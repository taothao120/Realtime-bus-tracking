
STM_GPS_ESFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800a208  0800a208  0001a208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a728  0800a728  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a728  0800a728  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a728  0800a728  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a72c  0800a72c  0001a72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a730  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  200001f0  0800a920  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  0800a920  000209f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4c2  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c0  00000000  00000000  0002c71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000917  00000000  00000000  0002f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001895a  00000000  00000000  0002ffaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8cf  00000000  00000000  00048909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008747f  00000000  00000000  000581d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046d4  00000000  00000000  000df658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  000e3d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1ec 	.word	0x0800a1ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800a1ec 	.word	0x0800a1ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bdc:	b08c      	sub	sp, #48	; 0x30
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000be4:	4b5b      	ldr	r3, [pc, #364]	; (8000d54 <decodeGGA+0x17c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000bee:	e004      	b.n	8000bfa <decodeGGA+0x22>
 8000bf0:	4b58      	ldr	r3, [pc, #352]	; (8000d54 <decodeGGA+0x17c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	4a57      	ldr	r2, [pc, #348]	; (8000d54 <decodeGGA+0x17c>)
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <decodeGGA+0x17c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b2c      	cmp	r3, #44	; 0x2c
 8000c08:	d1f2      	bne.n	8000bf0 <decodeGGA+0x18>
	inx++;
 8000c0a:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <decodeGGA+0x17c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a50      	ldr	r2, [pc, #320]	; (8000d54 <decodeGGA+0x17c>)
 8000c12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000c14:	e004      	b.n	8000c20 <decodeGGA+0x48>
 8000c16:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <decodeGGA+0x17c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a4d      	ldr	r2, [pc, #308]	; (8000d54 <decodeGGA+0x17c>)
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b4c      	ldr	r3, [pc, #304]	; (8000d54 <decodeGGA+0x17c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b2c      	cmp	r3, #44	; 0x2c
 8000c2e:	d1f2      	bne.n	8000c16 <decodeGGA+0x3e>
	inx++;
 8000c30:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <decodeGGA+0x17c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a47      	ldr	r2, [pc, #284]	; (8000d54 <decodeGGA+0x17c>)
 8000c38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000c3a:	e004      	b.n	8000c46 <decodeGGA+0x6e>
 8000c3c:	4b45      	ldr	r3, [pc, #276]	; (8000d54 <decodeGGA+0x17c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a44      	ldr	r2, [pc, #272]	; (8000d54 <decodeGGA+0x17c>)
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <decodeGGA+0x17c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b2c      	cmp	r3, #44	; 0x2c
 8000c54:	d1f2      	bne.n	8000c3c <decodeGGA+0x64>
	inx++;
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <decodeGGA+0x17c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a3d      	ldr	r2, [pc, #244]	; (8000d54 <decodeGGA+0x17c>)
 8000c5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000c60:	e004      	b.n	8000c6c <decodeGGA+0x94>
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <decodeGGA+0x17c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <decodeGGA+0x17c>)
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <decodeGGA+0x17c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b2c      	cmp	r3, #44	; 0x2c
 8000c7a:	d1f2      	bne.n	8000c62 <decodeGGA+0x8a>
	inx++;
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <decodeGGA+0x17c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <decodeGGA+0x17c>)
 8000c84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000c86:	e004      	b.n	8000c92 <decodeGGA+0xba>
 8000c88:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <decodeGGA+0x17c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <decodeGGA+0x17c>)
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <decodeGGA+0x17c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b2c      	cmp	r3, #44	; 0x2c
 8000ca0:	d1f2      	bne.n	8000c88 <decodeGGA+0xb0>
	inx++;
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <decodeGGA+0x17c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <decodeGGA+0x17c>)
 8000caa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000cac:	e004      	b.n	8000cb8 <decodeGGA+0xe0>
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <decodeGGA+0x17c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <decodeGGA+0x17c>)
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <decodeGGA+0x17c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b2c      	cmp	r3, #44	; 0x2c
 8000cc6:	d1f2      	bne.n	8000cae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <decodeGGA+0x17c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <decodeGGA+0x17c>)
 8000cd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <decodeGGA+0x17c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b31      	cmp	r3, #49	; 0x31
 8000ce0:	d00f      	beq.n	8000d02 <decodeGGA+0x12a>
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <decodeGGA+0x17c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b32      	cmp	r3, #50	; 0x32
 8000cf0:	d007      	beq.n	8000d02 <decodeGGA+0x12a>
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <decodeGGA+0x17c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b36      	cmp	r3, #54	; 0x36
 8000d00:	d106      	bne.n	8000d10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2201      	movs	r2, #1
 8000d06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <decodeGGA+0x17c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d0e:	e009      	b.n	8000d24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000d16:	2301      	movs	r3, #1
 8000d18:	e332      	b.n	8001380 <decodeGGA+0x7a8>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <decodeGGA+0x17c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <decodeGGA+0x17c>)
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <decodeGGA+0x17c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b2c      	cmp	r3, #44	; 0x2c
 8000d32:	d1f2      	bne.n	8000d1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <decodeGGA+0x17c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <decodeGGA+0x17c>)
 8000d3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	220c      	movs	r2, #12
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 ff8f 	bl	8005c6a <memset>
	i=0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000d50:	e016      	b.n	8000d80 <decodeGGA+0x1a8>
 8000d52:	bf00      	nop
 8000d54:	2000020c 	.word	0x2000020c
	{
		buffer[i] = GGAbuffer[inx];
 8000d58:	4b6d      	ldr	r3, [pc, #436]	; (8000f10 <decodeGGA+0x338>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	7819      	ldrb	r1, [r3, #0]
 8000d64:	f107 0208 	add.w	r2, r7, #8
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	4413      	add	r3, r2
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
		i++;
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	3301      	adds	r3, #1
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000d76:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <decodeGGA+0x338>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a64      	ldr	r2, [pc, #400]	; (8000f10 <decodeGGA+0x338>)
 8000d7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000d80:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <decodeGGA+0x338>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b2c      	cmp	r3, #44	; 0x2c
 8000d8e:	d1e3      	bne.n	8000d58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 ff49 	bl	8004c2c <atoi>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a5d      	ldr	r2, [pc, #372]	; (8000f14 <decodeGGA+0x33c>)
 8000d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000da2:	1312      	asrs	r2, r2, #12
 8000da4:	17db      	asrs	r3, r3, #31
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <decodeGGA+0x340>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	495b      	ldr	r1, [pc, #364]	; (8000f1c <decodeGGA+0x344>)
 8000dae:	fb81 0103 	smull	r0, r1, r1, r3
 8000db2:	1149      	asrs	r1, r1, #5
 8000db4:	17db      	asrs	r3, r3, #31
 8000db6:	1acb      	subs	r3, r1, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	4a59      	ldr	r2, [pc, #356]	; (8000f20 <decodeGGA+0x348>)
 8000dbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 ff32 	bl	8004c2c <atoi>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a54      	ldr	r2, [pc, #336]	; (8000f1c <decodeGGA+0x344>)
 8000dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd0:	1152      	asrs	r2, r2, #5
 8000dd2:	17db      	asrs	r3, r3, #31
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	4a51      	ldr	r2, [pc, #324]	; (8000f1c <decodeGGA+0x344>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1151      	asrs	r1, r2, #5
 8000dde:	17da      	asrs	r2, r3, #31
 8000de0:	1a8a      	subs	r2, r1, r2
 8000de2:	2164      	movs	r1, #100	; 0x64
 8000de4:	fb01 f202 	mul.w	r2, r1, r2
 8000de8:	1a9a      	subs	r2, r3, r2
 8000dea:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <decodeGGA+0x340>)
 8000dec:	6819      	ldr	r1, [r3, #0]
 8000dee:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <decodeGGA+0x344>)
 8000df0:	fb83 0301 	smull	r0, r3, r3, r1
 8000df4:	1158      	asrs	r0, r3, #5
 8000df6:	17cb      	asrs	r3, r1, #31
 8000df8:	1ac3      	subs	r3, r0, r3
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	fb00 f303 	mul.w	r3, r0, r3
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <decodeGGA+0x34c>)
 8000e06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8000e08:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <decodeGGA+0x34c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b3b      	cmp	r3, #59	; 0x3b
 8000e0e:	dd09      	ble.n	8000e24 <decodeGGA+0x24c>
	{
		min = min-60;
 8000e10:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <decodeGGA+0x34c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3b3c      	subs	r3, #60	; 0x3c
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <decodeGGA+0x34c>)
 8000e18:	6013      	str	r3, [r2, #0]
		hr++;
 8000e1a:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <decodeGGA+0x348>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a3f      	ldr	r2, [pc, #252]	; (8000f20 <decodeGGA+0x348>)
 8000e22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000e24:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <decodeGGA+0x348>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	da09      	bge.n	8000e40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <decodeGGA+0x348>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3318      	adds	r3, #24
 8000e32:	4a3b      	ldr	r2, [pc, #236]	; (8000f20 <decodeGGA+0x348>)
 8000e34:	6013      	str	r3, [r2, #0]
		daychange--;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <decodeGGA+0x350>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	4a3a      	ldr	r2, [pc, #232]	; (8000f28 <decodeGGA+0x350>)
 8000e3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <decodeGGA+0x348>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b17      	cmp	r3, #23
 8000e46:	dd09      	ble.n	8000e5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <decodeGGA+0x348>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3b18      	subs	r3, #24
 8000e4e:	4a34      	ldr	r2, [pc, #208]	; (8000f20 <decodeGGA+0x348>)
 8000e50:	6013      	str	r3, [r2, #0]
		daychange++;
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <decodeGGA+0x350>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <decodeGGA+0x350>)
 8000e5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <decodeGGA+0x348>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <decodeGGA+0x34c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fedb 	bl	8004c2c <atoi>
 8000e76:	4602      	mov	r2, r0
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <decodeGGA+0x344>)
 8000e7a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e7e:	1159      	asrs	r1, r3, #5
 8000e80:	17d3      	asrs	r3, r2, #31
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	2164      	movs	r1, #100	; 0x64
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <decodeGGA+0x338>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <decodeGGA+0x338>)
 8000e98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fee1 	bl	8005c6a <memset>
	i=0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000eac:	e013      	b.n	8000ed6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <decodeGGA+0x338>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	7819      	ldrb	r1, [r3, #0]
 8000eba:	f107 0208 	add.w	r2, r7, #8
 8000ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec0:	4413      	add	r3, r2
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
		i++;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	3301      	adds	r3, #1
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <decodeGGA+0x338>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <decodeGGA+0x338>)
 8000ed4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <decodeGGA+0x338>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ee4:	d1e3      	bne.n	8000eae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f930 	bl	8000150 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b05      	cmp	r3, #5
 8000ef4:	d801      	bhi.n	8000efa <decodeGGA+0x322>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e242      	b.n	8001380 <decodeGGA+0x7a8>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fe94 	bl	8004c2c <atoi>
 8000f04:	4603      	mov	r3, r0
 8000f06:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000f0c:	e011      	b.n	8000f32 <decodeGGA+0x35a>
 8000f0e:	bf00      	nop
 8000f10:	2000020c 	.word	0x2000020c
 8000f14:	68db8bad 	.word	0x68db8bad
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	51eb851f 	.word	0x51eb851f
 8000f20:	20000210 	.word	0x20000210
 8000f24:	20000214 	.word	0x20000214
 8000f28:	20000224 	.word	0x20000224
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2e:	3301      	adds	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f32:	f107 0208 	add.w	r2, r7, #8
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f3e:	d1f5      	bne.n	8000f2c <decodeGGA+0x354>
	j++;
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	3301      	adds	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff f900 	bl	8000150 <strlen>
 8000f50:	4602      	mov	r2, r0
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	4413      	add	r3, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fe63 	bl	8004c2c <atoi>
 8000f66:	61f8      	str	r0, [r7, #28]
	float lat = (num/100) + (((num % 100) + (dec/(pow(10, declen))))/60);  // 1234.56789 = 12.3456789
 8000f68:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000f6c:	4ab2      	ldr	r2, [pc, #712]	; (8001238 <decodeGGA+0x660>)
 8000f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f72:	1152      	asrs	r2, r2, #5
 8000f74:	17db      	asrs	r3, r3, #31
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa42 	bl	8000404 <__aeabi_i2d>
 8000f80:	4604      	mov	r4, r0
 8000f82:	460d      	mov	r5, r1
 8000f84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000f88:	4aab      	ldr	r2, [pc, #684]	; (8001238 <decodeGGA+0x660>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	1151      	asrs	r1, r2, #5
 8000f90:	17da      	asrs	r2, r3, #31
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	2164      	movs	r1, #100	; 0x64
 8000f96:	fb01 f202 	mul.w	r2, r1, r2
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa30 	bl	8000404 <__aeabi_i2d>
 8000fa4:	4680      	mov	r8, r0
 8000fa6:	4689      	mov	r9, r1
 8000fa8:	69f8      	ldr	r0, [r7, #28]
 8000faa:	f7ff fa2b 	bl	8000404 <__aeabi_i2d>
 8000fae:	4682      	mov	sl, r0
 8000fb0:	468b      	mov	fp, r1
 8000fb2:	6a38      	ldr	r0, [r7, #32]
 8000fb4:	f7ff fa26 	bl	8000404 <__aeabi_i2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	499e      	ldr	r1, [pc, #632]	; (800123c <decodeGGA+0x664>)
 8000fc2:	f008 fa0b 	bl	80093dc <pow>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4650      	mov	r0, sl
 8000fcc:	4659      	mov	r1, fp
 8000fce:	f7ff fbad 	bl	800072c <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	4649      	mov	r1, r9
 8000fda:	f7ff f8c7 	bl	800016c <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b95      	ldr	r3, [pc, #596]	; (8001240 <decodeGGA+0x668>)
 8000fec:	f7ff fb9e 	bl	800072c <__aeabi_ddiv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff f8b8 	bl	800016c <__adddf3>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fd60 	bl	8000ac8 <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	601a      	str	r2, [r3, #0]
	inx++;
 8001012:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <decodeGGA+0x66c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a8a      	ldr	r2, [pc, #552]	; (8001244 <decodeGGA+0x66c>)
 800101a:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 800101c:	4b89      	ldr	r3, [pc, #548]	; (8001244 <decodeGGA+0x66c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 800102c:	4b85      	ldr	r3, [pc, #532]	; (8001244 <decodeGGA+0x66c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a84      	ldr	r2, [pc, #528]	; (8001244 <decodeGGA+0x66c>)
 8001034:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001036:	4b83      	ldr	r3, [pc, #524]	; (8001244 <decodeGGA+0x66c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a81      	ldr	r2, [pc, #516]	; (8001244 <decodeGGA+0x66c>)
 800103e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	220c      	movs	r2, #12
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fe0e 	bl	8005c6a <memset>
	i=0;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
	float log=0;
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001058:	e013      	b.n	8001082 <decodeGGA+0x4aa>
	{
		buffer[i] = GGAbuffer[inx];
 800105a:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <decodeGGA+0x66c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	7819      	ldrb	r1, [r3, #0]
 8001066:	f107 0208 	add.w	r2, r7, #8
 800106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106c:	4413      	add	r3, r2
 800106e:	460a      	mov	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
		i++;
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	3301      	adds	r3, #1
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001078:	4b72      	ldr	r3, [pc, #456]	; (8001244 <decodeGGA+0x66c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a71      	ldr	r2, [pc, #452]	; (8001244 <decodeGGA+0x66c>)
 8001080:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001082:	4b70      	ldr	r3, [pc, #448]	; (8001244 <decodeGGA+0x66c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b2c      	cmp	r3, #44	; 0x2c
 8001090:	d1e3      	bne.n	800105a <decodeGGA+0x482>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fdc8 	bl	8004c2c <atoi>
 800109c:	4603      	mov	r3, r0
 800109e:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80010a4:	e002      	b.n	80010ac <decodeGGA+0x4d4>
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	3301      	adds	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ac:	f107 0208 	add.w	r2, r7, #8
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b2e      	cmp	r3, #46	; 0x2e
 80010b8:	d1f5      	bne.n	80010a6 <decodeGGA+0x4ce>
	j++;
 80010ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010bc:	3301      	adds	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f843 	bl	8000150 <strlen>
 80010ca:	4602      	mov	r2, r0
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	4413      	add	r3, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fda6 	bl	8004c2c <atoi>
 80010e0:	61f8      	str	r0, [r7, #28]
	log = (num/100) + (((num % 100) + (dec/(pow(10, declen))))/60);   // 1234.56789 = 12.3456789
 80010e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010e6:	4a54      	ldr	r2, [pc, #336]	; (8001238 <decodeGGA+0x660>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1152      	asrs	r2, r2, #5
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f985 	bl	8000404 <__aeabi_i2d>
 80010fa:	4604      	mov	r4, r0
 80010fc:	460d      	mov	r5, r1
 80010fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001102:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <decodeGGA+0x660>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1151      	asrs	r1, r2, #5
 800110a:	17da      	asrs	r2, r3, #31
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	2164      	movs	r1, #100	; 0x64
 8001110:	fb01 f202 	mul.w	r2, r1, r2
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	b21b      	sxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f973 	bl	8000404 <__aeabi_i2d>
 800111e:	4680      	mov	r8, r0
 8001120:	4689      	mov	r9, r1
 8001122:	69f8      	ldr	r0, [r7, #28]
 8001124:	f7ff f96e 	bl	8000404 <__aeabi_i2d>
 8001128:	4682      	mov	sl, r0
 800112a:	468b      	mov	fp, r1
 800112c:	6a38      	ldr	r0, [r7, #32]
 800112e:	f7ff f969 	bl	8000404 <__aeabi_i2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4940      	ldr	r1, [pc, #256]	; (800123c <decodeGGA+0x664>)
 800113c:	f008 f94e 	bl	80093dc <pow>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4650      	mov	r0, sl
 8001146:	4659      	mov	r1, fp
 8001148:	f7ff faf0 	bl	800072c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4640      	mov	r0, r8
 8001152:	4649      	mov	r1, r9
 8001154:	f7ff f80a 	bl	800016c <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <decodeGGA+0x668>)
 8001166:	f7ff fae1 	bl	800072c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7fe fffb 	bl	800016c <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fca3 	bl	8000ac8 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	617b      	str	r3, [r7, #20]
	gga->lcation.longitude = log;  // save the longitude data into the strucure
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	609a      	str	r2, [r3, #8]
	inx++;
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <decodeGGA+0x66c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <decodeGGA+0x66c>)
 8001194:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <decodeGGA+0x66c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <decodeGGA+0x66c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a25      	ldr	r2, [pc, #148]	; (8001244 <decodeGGA+0x66c>)
 80011ae:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <decodeGGA+0x66c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a23      	ldr	r2, [pc, #140]	; (8001244 <decodeGGA+0x66c>)
 80011b8:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <decodeGGA+0x66c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <decodeGGA+0x66c>)
 80011c2:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <decodeGGA+0x66c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <decodeGGA+0x66c>)
 80011cc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	220c      	movs	r2, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fd47 	bl	8005c6a <memset>
	i=0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80011e0:	e013      	b.n	800120a <decodeGGA+0x632>
	{
		buffer[i] = GGAbuffer[inx];
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <decodeGGA+0x66c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	7819      	ldrb	r1, [r3, #0]
 80011ee:	f107 0208 	add.w	r2, r7, #8
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	4413      	add	r3, r2
 80011f6:	460a      	mov	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
		i++;
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	3301      	adds	r3, #1
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <decodeGGA+0x66c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <decodeGGA+0x66c>)
 8001208:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <decodeGGA+0x66c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b2c      	cmp	r3, #44	; 0x2c
 8001218:	d1e3      	bne.n	80011e2 <decodeGGA+0x60a>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fd04 	bl	8004c2c <atoi>
 8001224:	4602      	mov	r2, r0
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <decodeGGA+0x66c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <decodeGGA+0x66c>)
 8001232:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001234:	e00d      	b.n	8001252 <decodeGGA+0x67a>
 8001236:	bf00      	nop
 8001238:	51eb851f 	.word	0x51eb851f
 800123c:	40240000 	.word	0x40240000
 8001240:	404e0000 	.word	0x404e0000
 8001244:	2000020c 	.word	0x2000020c
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <decodeGGA+0x7b4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a4f      	ldr	r2, [pc, #316]	; (800138c <decodeGGA+0x7b4>)
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b4e      	ldr	r3, [pc, #312]	; (800138c <decodeGGA+0x7b4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b2c      	cmp	r3, #44	; 0x2c
 8001260:	d1f2      	bne.n	8001248 <decodeGGA+0x670>


	/*************** Altitude calculation ********************/
	inx++;
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <decodeGGA+0x7b4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	4a48      	ldr	r2, [pc, #288]	; (800138c <decodeGGA+0x7b4>)
 800126a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	220c      	movs	r2, #12
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f004 fcf8 	bl	8005c6a <memset>
	i=0;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 800127e:	e013      	b.n	80012a8 <decodeGGA+0x6d0>
	{
		buffer[i] = GGAbuffer[inx];
 8001280:	4b42      	ldr	r3, [pc, #264]	; (800138c <decodeGGA+0x7b4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	f107 0208 	add.w	r2, r7, #8
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	4413      	add	r3, r2
 8001294:	460a      	mov	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
		i++;
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	3301      	adds	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <decodeGGA+0x7b4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a39      	ldr	r2, [pc, #228]	; (800138c <decodeGGA+0x7b4>)
 80012a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <decodeGGA+0x7b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b2c      	cmp	r3, #44	; 0x2c
 80012b6:	d1e3      	bne.n	8001280 <decodeGGA+0x6a8>
	}
	num = (atoi(buffer));
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fcb5 	bl	8004c2c <atoi>
 80012c2:	4603      	mov	r3, r0
 80012c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 80012ca:	e002      	b.n	80012d2 <decodeGGA+0x6fa>
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	3301      	adds	r3, #1
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b2e      	cmp	r3, #46	; 0x2e
 80012de:	d1f5      	bne.n	80012cc <decodeGGA+0x6f4>
	j++;
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	3301      	adds	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff30 	bl	8000150 <strlen>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	4413      	add	r3, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fc93 	bl	8004c2c <atoi>
 8001306:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001308:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f879 	bl	8000404 <__aeabi_i2d>
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
 8001316:	69f8      	ldr	r0, [r7, #28]
 8001318:	f7ff f874 	bl	8000404 <__aeabi_i2d>
 800131c:	4680      	mov	r8, r0
 800131e:	4689      	mov	r9, r1
 8001320:	6a38      	ldr	r0, [r7, #32]
 8001322:	f7ff f86f 	bl	8000404 <__aeabi_i2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	4918      	ldr	r1, [pc, #96]	; (8001390 <decodeGGA+0x7b8>)
 8001330:	f008 f854 	bl	80093dc <pow>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4640      	mov	r0, r8
 800133a:	4649      	mov	r1, r9
 800133c:	f7ff f9f6 	bl	800072c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7fe ff10 	bl	800016c <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbb8 	bl	8000ac8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	621a      	str	r2, [r3, #32]

	inx++;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <decodeGGA+0x7b4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <decodeGGA+0x7b4>)
 800136a:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <decodeGGA+0x7b4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800137e:	2300      	movs	r3, #0

}
 8001380:	4618      	mov	r0, r3
 8001382:	3730      	adds	r7, #48	; 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800138a:	bf00      	nop
 800138c:	2000020c 	.word	0x2000020c
 8001390:	40240000 	.word	0x40240000

08001394 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001394:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001398:	b090      	sub	sp, #64	; 0x40
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
	inx = 0;
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <decodeRMC+0x258>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80013aa:	e004      	b.n	80013b6 <decodeRMC+0x22>
 80013ac:	4b8f      	ldr	r3, [pc, #572]	; (80015ec <decodeRMC+0x258>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a8e      	ldr	r2, [pc, #568]	; (80015ec <decodeRMC+0x258>)
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b8d      	ldr	r3, [pc, #564]	; (80015ec <decodeRMC+0x258>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b2c      	cmp	r3, #44	; 0x2c
 80013c4:	d1f2      	bne.n	80013ac <decodeRMC+0x18>
	inx++;
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <decodeRMC+0x258>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a87      	ldr	r2, [pc, #540]	; (80015ec <decodeRMC+0x258>)
 80013ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80013d0:	e004      	b.n	80013dc <decodeRMC+0x48>
 80013d2:	4b86      	ldr	r3, [pc, #536]	; (80015ec <decodeRMC+0x258>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a84      	ldr	r2, [pc, #528]	; (80015ec <decodeRMC+0x258>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b83      	ldr	r3, [pc, #524]	; (80015ec <decodeRMC+0x258>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b2c      	cmp	r3, #44	; 0x2c
 80013ea:	d1f2      	bne.n	80013d2 <decodeRMC+0x3e>
	inx++;
 80013ec:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <decodeRMC+0x258>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a7e      	ldr	r2, [pc, #504]	; (80015ec <decodeRMC+0x258>)
 80013f4:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80013f6:	4b7d      	ldr	r3, [pc, #500]	; (80015ec <decodeRMC+0x258>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b41      	cmp	r3, #65	; 0x41
 8001404:	d10d      	bne.n	8001422 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 800140c:	4b77      	ldr	r3, [pc, #476]	; (80015ec <decodeRMC+0x258>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a76      	ldr	r2, [pc, #472]	; (80015ec <decodeRMC+0x258>)
 8001414:	6013      	str	r3, [r2, #0]
	inx++;
 8001416:	4b75      	ldr	r3, [pc, #468]	; (80015ec <decodeRMC+0x258>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a73      	ldr	r2, [pc, #460]	; (80015ec <decodeRMC+0x258>)
 800141e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001420:	e009      	b.n	8001436 <decodeRMC+0xa2>
		rmc->isValid =0;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
		return 1;
 8001428:	2301      	movs	r3, #1
 800142a:	e1d5      	b.n	80017d8 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800142c:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <decodeRMC+0x258>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <decodeRMC+0x258>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <decodeRMC+0x258>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b2c      	cmp	r3, #44	; 0x2c
 8001444:	d1f2      	bne.n	800142c <decodeRMC+0x98>
	inx++;
 8001446:	4b69      	ldr	r3, [pc, #420]	; (80015ec <decodeRMC+0x258>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a67      	ldr	r2, [pc, #412]	; (80015ec <decodeRMC+0x258>)
 800144e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001450:	e004      	b.n	800145c <decodeRMC+0xc8>
 8001452:	4b66      	ldr	r3, [pc, #408]	; (80015ec <decodeRMC+0x258>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a64      	ldr	r2, [pc, #400]	; (80015ec <decodeRMC+0x258>)
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <decodeRMC+0x258>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b2c      	cmp	r3, #44	; 0x2c
 800146a:	d1f2      	bne.n	8001452 <decodeRMC+0xbe>
	inx++;
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <decodeRMC+0x258>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a5e      	ldr	r2, [pc, #376]	; (80015ec <decodeRMC+0x258>)
 8001474:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001476:	e004      	b.n	8001482 <decodeRMC+0xee>
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <decodeRMC+0x258>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a5b      	ldr	r2, [pc, #364]	; (80015ec <decodeRMC+0x258>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <decodeRMC+0x258>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b2c      	cmp	r3, #44	; 0x2c
 8001490:	d1f2      	bne.n	8001478 <decodeRMC+0xe4>
	inx++;
 8001492:	4b56      	ldr	r3, [pc, #344]	; (80015ec <decodeRMC+0x258>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a54      	ldr	r2, [pc, #336]	; (80015ec <decodeRMC+0x258>)
 800149a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800149c:	e004      	b.n	80014a8 <decodeRMC+0x114>
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <decodeRMC+0x258>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a51      	ldr	r2, [pc, #324]	; (80015ec <decodeRMC+0x258>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <decodeRMC+0x258>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b2c      	cmp	r3, #44	; 0x2c
 80014b6:	d1f2      	bne.n	800149e <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80014b8:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <decodeRMC+0x258>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <decodeRMC+0x258>)
 80014c0:	6013      	str	r3, [r2, #0]
	i=0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	220c      	movs	r2, #12
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fbcb 	bl	8005c6a <memset>
	while (RMCbuffer[inx] != ',')
 80014d4:	e013      	b.n	80014fe <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80014d6:	4b45      	ldr	r3, [pc, #276]	; (80015ec <decodeRMC+0x258>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	7819      	ldrb	r1, [r3, #0]
 80014e2:	f107 0208 	add.w	r2, r7, #8
 80014e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e8:	4413      	add	r3, r2
 80014ea:	460a      	mov	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
		i++;
 80014ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f0:	3301      	adds	r3, #1
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <decodeRMC+0x258>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a3c      	ldr	r2, [pc, #240]	; (80015ec <decodeRMC+0x258>)
 80014fc:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <decodeRMC+0x258>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b2c      	cmp	r3, #44	; 0x2c
 800150c:	d1e3      	bne.n	80014d6 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d055      	beq.n	80015c4 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fb85 	bl	8004c2c <atoi>
 8001522:	4603      	mov	r3, r0
 8001524:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 800152a:	e002      	b.n	8001532 <decodeRMC+0x19e>
 800152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152e:	3301      	adds	r3, #1
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
 8001532:	f107 0208 	add.w	r2, r7, #8
 8001536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b2e      	cmp	r3, #46	; 0x2e
 800153e:	d1f5      	bne.n	800152c <decodeRMC+0x198>
		j++;
 8001540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001542:	3301      	adds	r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fe00 	bl	8000150 <strlen>
 8001550:	4602      	mov	r2, r0
 8001552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	f107 0208 	add.w	r2, r7, #8
 800155e:	4413      	add	r3, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fb63 	bl	8004c2c <atoi>
 8001566:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001568:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff49 	bl	8000404 <__aeabi_i2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001578:	f7fe ff44 	bl	8000404 <__aeabi_i2d>
 800157c:	4680      	mov	r8, r0
 800157e:	4689      	mov	r9, r1
 8001580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001582:	f7fe ff3f 	bl	8000404 <__aeabi_i2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	4918      	ldr	r1, [pc, #96]	; (80015f0 <decodeRMC+0x25c>)
 8001590:	f007 ff24 	bl	80093dc <pow>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4640      	mov	r0, r8
 800159a:	4649      	mov	r1, r9
 800159c:	f7ff f8c6 	bl	800072c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7fe fde0 	bl	800016c <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa88 	bl	8000ac8 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e003      	b.n	80015cc <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <decodeRMC+0x258>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <decodeRMC+0x258>)
 80015d4:	6013      	str	r3, [r2, #0]
	i=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	220c      	movs	r2, #12
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fb41 	bl	8005c6a <memset>
	while (RMCbuffer[inx] != ',')
 80015e8:	e018      	b.n	800161c <decodeRMC+0x288>
 80015ea:	bf00      	nop
 80015ec:	2000020c 	.word	0x2000020c
 80015f0:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 80015f4:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <decodeRMC+0x450>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001606:	4413      	add	r3, r2
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
		i++;
 800160c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160e:	3301      	adds	r3, #1
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001612:	4b74      	ldr	r3, [pc, #464]	; (80017e4 <decodeRMC+0x450>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a72      	ldr	r2, [pc, #456]	; (80017e4 <decodeRMC+0x450>)
 800161a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800161c:	4b71      	ldr	r3, [pc, #452]	; (80017e4 <decodeRMC+0x450>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b2c      	cmp	r3, #44	; 0x2c
 800162a:	d1e3      	bne.n	80015f4 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d055      	beq.n	80016e2 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4618      	mov	r0, r3
 800163c:	f003 faf6 	bl	8004c2c <atoi>
 8001640:	4603      	mov	r3, r0
 8001642:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001648:	e002      	b.n	8001650 <decodeRMC+0x2bc>
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	3301      	adds	r3, #1
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b2e      	cmp	r3, #46	; 0x2e
 800165c:	d1f5      	bne.n	800164a <decodeRMC+0x2b6>
		j++;
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	3301      	adds	r3, #1
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fd71 	bl	8000150 <strlen>
 800166e:	4602      	mov	r2, r0
 8001670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	4413      	add	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fad4 	bl	8004c2c <atoi>
 8001684:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feba 	bl	8000404 <__aeabi_i2d>
 8001690:	4604      	mov	r4, r0
 8001692:	460d      	mov	r5, r1
 8001694:	69b8      	ldr	r0, [r7, #24]
 8001696:	f7fe feb5 	bl	8000404 <__aeabi_i2d>
 800169a:	4680      	mov	r8, r0
 800169c:	4689      	mov	r9, r1
 800169e:	69f8      	ldr	r0, [r7, #28]
 80016a0:	f7fe feb0 	bl	8000404 <__aeabi_i2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	f04f 0000 	mov.w	r0, #0
 80016ac:	494e      	ldr	r1, [pc, #312]	; (80017e8 <decodeRMC+0x454>)
 80016ae:	f007 fe95 	bl	80093dc <pow>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f7ff f837 	bl	800072c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7fe fd51 	bl	800016c <__adddf3>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff f9f9 	bl	8000ac8 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	e003      	b.n	80016ea <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <decodeRMC+0x450>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4a3c      	ldr	r2, [pc, #240]	; (80017e4 <decodeRMC+0x450>)
 80016f2:	6013      	str	r3, [r2, #0]
	i=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	220c      	movs	r2, #12
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fab2 	bl	8005c6a <memset>
	while (RMCbuffer[inx] != ',')
 8001706:	e013      	b.n	8001730 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <decodeRMC+0x450>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	7819      	ldrb	r1, [r3, #0]
 8001714:	f107 0208 	add.w	r2, r7, #8
 8001718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800171a:	4413      	add	r3, r2
 800171c:	460a      	mov	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
		i++;
 8001720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001722:	3301      	adds	r3, #1
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <decodeRMC+0x450>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <decodeRMC+0x450>)
 800172e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <decodeRMC+0x450>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b2c      	cmp	r3, #44	; 0x2c
 800173e:	d1e3      	bne.n	8001708 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4618      	mov	r0, r3
 8001746:	f003 fa71 	bl	8004c2c <atoi>
 800174a:	4603      	mov	r3, r0
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <decodeRMC+0x458>)
 800174e:	fb82 1203 	smull	r1, r2, r2, r3
 8001752:	1312      	asrs	r2, r2, #12
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <decodeRMC+0x45c>)
 800175a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fa63 	bl	8004c2c <atoi>
 8001766:	4603      	mov	r3, r0
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <decodeRMC+0x460>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	1152      	asrs	r2, r2, #5
 8001770:	17db      	asrs	r3, r3, #31
 8001772:	1ad2      	subs	r2, r2, r3
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <decodeRMC+0x460>)
 8001776:	fb83 1302 	smull	r1, r3, r3, r2
 800177a:	1159      	asrs	r1, r3, #5
 800177c:	17d3      	asrs	r3, r2, #31
 800177e:	1acb      	subs	r3, r1, r3
 8001780:	2164      	movs	r1, #100	; 0x64
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <decodeRMC+0x464>)
 800178a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fa4b 	bl	8004c2c <atoi>
 8001796:	4602      	mov	r2, r0
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <decodeRMC+0x460>)
 800179a:	fb83 1302 	smull	r1, r3, r3, r2
 800179e:	1159      	asrs	r1, r3, #5
 80017a0:	17d3      	asrs	r3, r2, #31
 80017a2:	1acb      	subs	r3, r1, r3
 80017a4:	2164      	movs	r1, #100	; 0x64
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <decodeRMC+0x468>)
 80017ae:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <decodeRMC+0x45c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <decodeRMC+0x46c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <decodeRMC+0x45c>)
 80017bc:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <decodeRMC+0x45c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <decodeRMC+0x464>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <decodeRMC+0x468>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	609a      	str	r2, [r3, #8]

	return 0;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3740      	adds	r7, #64	; 0x40
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e2:	bf00      	nop
 80017e4:	2000020c 	.word	0x2000020c
 80017e8:	40240000 	.word	0x40240000
 80017ec:	68db8bad 	.word	0x68db8bad
 80017f0:	20000218 	.word	0x20000218
 80017f4:	51eb851f 	.word	0x51eb851f
 80017f8:	2000021c 	.word	0x2000021c
 80017fc:	20000220 	.word	0x20000220
 8001800:	20000224 	.word	0x20000224

08001804 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f023 030f 	bic.w	r3, r3, #15
 8001814:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	f043 030c 	orr.w	r3, r3, #12
 8001822:	b2db      	uxtb	r3, r3
 8001824:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	b2db      	uxtb	r3, r3
 800182e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	f043 030c 	orr.w	r3, r3, #12
 8001836:	b2db      	uxtb	r3, r3
 8001838:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	b2db      	uxtb	r3, r3
 8001842:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2304      	movs	r3, #4
 800184e:	214e      	movs	r1, #78	; 0x4e
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <lcd_send_cmd+0x5c>)
 8001852:	f001 fc47 	bl	80030e4 <HAL_I2C_Master_Transmit>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000228 	.word	0x20000228

08001864 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	f023 030f 	bic.w	r3, r3, #15
 8001874:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	f043 030d 	orr.w	r3, r3, #13
 8001882:	b2db      	uxtb	r3, r3
 8001884:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	f043 0309 	orr.w	r3, r3, #9
 800188c:	b2db      	uxtb	r3, r3
 800188e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	f043 030d 	orr.w	r3, r3, #13
 8001896:	b2db      	uxtb	r3, r3
 8001898:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	f043 0309 	orr.w	r3, r3, #9
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a4:	f107 0208 	add.w	r2, r7, #8
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2304      	movs	r3, #4
 80018ae:	214e      	movs	r1, #78	; 0x4e
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <lcd_send_data+0x5c>)
 80018b2:	f001 fc17 	bl	80030e4 <HAL_I2C_Master_Transmit>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000228 	.word	0x20000228

080018c4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    switch (row)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <lcd_put_cur+0x18>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <lcd_put_cur+0x22>
 80018da:	e009      	b.n	80018f0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e2:	603b      	str	r3, [r7, #0]
            break;
 80018e4:	e004      	b.n	80018f0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018ec:	603b      	str	r3, [r7, #0]
            break;
 80018ee:	bf00      	nop
    }

    lcd_send_cmd (col);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff85 	bl	8001804 <lcd_send_cmd>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <lcd_init>:


void lcd_init (void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001906:	2032      	movs	r0, #50	; 0x32
 8001908:	f000 ff40 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x30);
 800190c:	2030      	movs	r0, #48	; 0x30
 800190e:	f7ff ff79 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001912:	2005      	movs	r0, #5
 8001914:	f000 ff3a 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001918:	2030      	movs	r0, #48	; 0x30
 800191a:	f7ff ff73 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800191e:	2001      	movs	r0, #1
 8001920:	f000 ff34 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001924:	2030      	movs	r0, #48	; 0x30
 8001926:	f7ff ff6d 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(10);
 800192a:	200a      	movs	r0, #10
 800192c:	f000 ff2e 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001930:	2020      	movs	r0, #32
 8001932:	f7ff ff67 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(10);
 8001936:	200a      	movs	r0, #10
 8001938:	f000 ff28 	bl	800278c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800193c:	2028      	movs	r0, #40	; 0x28
 800193e:	f7ff ff61 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 ff22 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001948:	2008      	movs	r0, #8
 800194a:	f7ff ff5b 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f000 ff1c 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff ff55 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f000 ff16 	bl	800278c <HAL_Delay>
	HAL_Delay(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f000 ff13 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001966:	2006      	movs	r0, #6
 8001968:	f7ff ff4c 	bl	8001804 <lcd_send_cmd>
	HAL_Delay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f000 ff0d 	bl	800278c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001972:	200c      	movs	r0, #12
 8001974:	f7ff ff46 	bl	8001804 <lcd_send_cmd>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001984:	e006      	b.n	8001994 <lcd_send_string+0x18>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff68 	bl	8001864 <lcd_send_data>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f4      	bne.n	8001986 <lcd_send_string+0xa>
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b091      	sub	sp, #68	; 0x44
 80019ac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f000 fe8b 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f943 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fa09 	bl	8001dcc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019ba:	f000 f9b3 	bl	8001d24 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80019be:	f000 f983 	bl	8001cc8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80019c2:	f000 f9d9 	bl	8001d78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80019c6:	f7ff ff9c 	bl	8001902 <lcd_init>
  Ringbuf_init();
 80019ca:	f000 fc51 	bl	8002270 <Ringbuf_init>
  HAL_Delay(500);
 80019ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d2:	f000 fedb 	bl	800278c <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (Wait_for("GGA") == 1)
 80019d6:	4884      	ldr	r0, [pc, #528]	; (8001be8 <main+0x240>)
 80019d8:	f000 fd74 	bl	80024c4 <Wait_for>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d115      	bne.n	8001a0e <main+0x66>
	  {

		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <main+0x244>)
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", GGA);
 80019ea:	4981      	ldr	r1, [pc, #516]	; (8001bf0 <main+0x248>)
 80019ec:	4881      	ldr	r0, [pc, #516]	; (8001bf4 <main+0x24c>)
 80019ee:	f000 fce9 	bl	80023c4 <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 80019f2:	4981      	ldr	r1, [pc, #516]	; (8001bf8 <main+0x250>)
 80019f4:	487e      	ldr	r0, [pc, #504]	; (8001bf0 <main+0x248>)
 80019f6:	f7ff f8ef 	bl	8000bd8 <decodeGGA>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <main+0x60>
 8001a00:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <main+0x254>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e002      	b.n	8001a0e <main+0x66>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 8001a08:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <main+0x254>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

	  }

	  if (Wait_for("RMC") == 1)
 8001a0e:	487c      	ldr	r0, [pc, #496]	; (8001c00 <main+0x258>)
 8001a10:	f000 fd58 	bl	80024c4 <Wait_for>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d115      	bne.n	8001a46 <main+0x9e>
	  {

		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8001a1a:	4b74      	ldr	r3, [pc, #464]	; (8001bec <main+0x244>)
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", RMC);
 8001a22:	4978      	ldr	r1, [pc, #480]	; (8001c04 <main+0x25c>)
 8001a24:	4873      	ldr	r0, [pc, #460]	; (8001bf4 <main+0x24c>)
 8001a26:	f000 fccd 	bl	80023c4 <Copy_upto>
		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8001a2a:	4977      	ldr	r1, [pc, #476]	; (8001c08 <main+0x260>)
 8001a2c:	4875      	ldr	r0, [pc, #468]	; (8001c04 <main+0x25c>)
 8001a2e:	f7ff fcb1 	bl	8001394 <decodeRMC>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d103      	bne.n	8001a40 <main+0x98>
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <main+0x264>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e002      	b.n	8001a46 <main+0x9e>
		  else flagRMC = 1;  // 1 indicates the data is invalid
 8001a40:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <main+0x264>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

	  }

	  if ((flagGGA == 2) | (flagRMC == 2))
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <main+0x254>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <main+0x264>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d046      	beq.n	8001af8 <main+0x150>
	  {
		  lcd_put_cur(0, 0);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff ff29 	bl	80018c4 <lcd_put_cur>
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001a72:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <main+0x250>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fcd6 	bl	8000428 <__aeabi_f2d>
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	460d      	mov	r5, r1
 8001a80:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <main+0x250>)
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	461e      	mov	r6, r3
		  				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <main+0x250>)
 8001a88:	689b      	ldr	r3, [r3, #8]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fccc 	bl	8000428 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
		  				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001a94:	4958      	ldr	r1, [pc, #352]	; (8001bf8 <main+0x250>)
 8001a96:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001a98:	9104      	str	r1, [sp, #16]
 8001a9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a9e:	9600      	str	r6, [sp, #0]
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	495a      	ldr	r1, [pc, #360]	; (8001c10 <main+0x268>)
 8001aa6:	485b      	ldr	r0, [pc, #364]	; (8001c14 <main+0x26c>)
 8001aa8:	f004 f87c 	bl	8005ba4 <siprintf>
		  lcd_send_string(lcdBuffer);
 8001aac:	4859      	ldr	r0, [pc, #356]	; (8001c14 <main+0x26c>)
 8001aae:	f7ff ff65 	bl	800197c <lcd_send_string>

		  memset(lcdBuffer, '\0', 50);
 8001ab2:	2232      	movs	r2, #50	; 0x32
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4857      	ldr	r0, [pc, #348]	; (8001c14 <main+0x26c>)
 8001ab8:	f004 f8d7 	bl	8005c6a <memset>
		  lcd_put_cur(1, 0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff ff00 	bl	80018c4 <lcd_put_cur>
		  sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <main+0x250>)
 8001ac6:	691c      	ldr	r4, [r3, #16]
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <main+0x250>)
 8001aca:	695d      	ldr	r5, [r3, #20]
 8001acc:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <main+0x250>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <main+0x250>)
 8001ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ad4:	4948      	ldr	r1, [pc, #288]	; (8001bf8 <main+0x250>)
 8001ad6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001ad8:	4847      	ldr	r0, [pc, #284]	; (8001bf8 <main+0x250>)
 8001ada:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001adc:	9003      	str	r0, [sp, #12]
 8001ade:	9102      	str	r1, [sp, #8]
 8001ae0:	9201      	str	r2, [sp, #4]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	494b      	ldr	r1, [pc, #300]	; (8001c18 <main+0x270>)
 8001aea:	484a      	ldr	r0, [pc, #296]	; (8001c14 <main+0x26c>)
 8001aec:	f004 f85a 	bl	8005ba4 <siprintf>
		  				  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \
		  				  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
		  lcd_send_string(lcdBuffer);
 8001af0:	4848      	ldr	r0, [pc, #288]	; (8001c14 <main+0x26c>)
 8001af2:	f7ff ff43 	bl	800197c <lcd_send_string>
 8001af6:	e01f      	b.n	8001b38 <main+0x190>
	  }

	  else if ((flagGGA == 1) | (flagRMC == 1))
 8001af8:	4b40      	ldr	r3, [pc, #256]	; (8001bfc <main+0x254>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <main+0x264>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	bf0c      	ite	eq
 8001b0e:	2301      	moveq	r3, #1
 8001b10:	2300      	movne	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00d      	beq.n	8001b38 <main+0x190>
	  {
		  // Instead of clearing the display, it's better if we print spaces.
		  // This will avoid the "refreshing" part
		  lcd_put_cur(0, 0);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fed0 	bl	80018c4 <lcd_put_cur>
		  lcd_send_string("   NO FIX YET   ");
 8001b24:	483d      	ldr	r0, [pc, #244]	; (8001c1c <main+0x274>)
 8001b26:	f7ff ff29 	bl	800197c <lcd_send_string>
		  lcd_put_cur(1, 0);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fec9 	bl	80018c4 <lcd_put_cur>
		  lcd_send_string("   Please wait  ");
 8001b32:	483b      	ldr	r0, [pc, #236]	; (8001c20 <main+0x278>)
 8001b34:	f7ff ff22 	bl	800197c <lcd_send_string>
	  }

	  if (VCCTimeout <= 0)
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <main+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dc18      	bgt.n	8001b72 <main+0x1ca>
	  {
		  VCCTimeout = 5000;  // Reset the timeout
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <main+0x244>)
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	601a      	str	r2, [r3, #0]

		  //reset flags
		  flagGGA =flagRMC =0;
 8001b48:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <main+0x264>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <main+0x264>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <main+0x254>)
 8001b54:	6013      	str	r3, [r2, #0]

		  // You are here means the VCC is less, or maybe there is some connection issue
		  // Check the VCC, also you can try connecting to the external 5V

		  lcd_put_cur(0, 0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff feb3 	bl	80018c4 <lcd_put_cur>
		  lcd_send_string("    VCC Issue   ");
 8001b5e:	4831      	ldr	r0, [pc, #196]	; (8001c24 <main+0x27c>)
 8001b60:	f7ff ff0c 	bl	800197c <lcd_send_string>
		  lcd_put_cur(1, 0);
 8001b64:	2100      	movs	r1, #0
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff feac 	bl	80018c4 <lcd_put_cur>
		  lcd_send_string("Check Connection");
 8001b6c:	482e      	ldr	r0, [pc, #184]	; (8001c28 <main+0x280>)
 8001b6e:	f7ff ff05 	bl	800197c <lcd_send_string>
//		}
//		HAL_UART_Transmit(&huart1, (char*)buffer, sizeof(buffer), 1000);  // Transmit the concatenated string
//
	  	  char flat_str[20];
	  	  char flon_str[20];
	  	  sprintf(flat_str, "%f", gpsData.ggastruct.lcation.latitude);
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <main+0x250>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fc56 	bl	8000428 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	f107 0014 	add.w	r0, r7, #20
 8001b84:	4929      	ldr	r1, [pc, #164]	; (8001c2c <main+0x284>)
 8001b86:	f004 f80d 	bl	8005ba4 <siprintf>
	  	  sprintf(flon_str, "%f", gpsData.ggastruct.lcation.longitude);
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <main+0x250>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fc4a 	bl	8000428 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4638      	mov	r0, r7
 8001b9a:	4924      	ldr	r1, [pc, #144]	; (8001c2c <main+0x284>)
 8001b9c:	f004 f802 	bl	8005ba4 <siprintf>
	  	  strcpy(rx, flat_str);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4822      	ldr	r0, [pc, #136]	; (8001c30 <main+0x288>)
 8001ba8:	f004 f8ed 	bl	8005d86 <strcpy>
	  	  strcat(rx, " ");
 8001bac:	4820      	ldr	r0, [pc, #128]	; (8001c30 <main+0x288>)
 8001bae:	f7fe facf 	bl	8000150 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <main+0x288>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	491e      	ldr	r1, [pc, #120]	; (8001c34 <main+0x28c>)
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	8013      	strh	r3, [r2, #0]
	  	  strcat(rx, flon_str);
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4819      	ldr	r0, [pc, #100]	; (8001c30 <main+0x288>)
 8001bca:	f004 f856 	bl	8005c7a <strcat>
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)rx, strlen(rx), 1000);
 8001bce:	4818      	ldr	r0, [pc, #96]	; (8001c30 <main+0x288>)
 8001bd0:	f7fe fabe 	bl	8000150 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bdc:	4914      	ldr	r1, [pc, #80]	; (8001c30 <main+0x288>)
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <main+0x290>)
 8001be0:	f002 fa50 	bl	8004084 <HAL_UART_Transmit>
  {
 8001be4:	e6f7      	b.n	80019d6 <main+0x2e>
 8001be6:	bf00      	nop
 8001be8:	0800a208 	.word	0x0800a208
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000340 	.word	0x20000340
 8001bf4:	0800a20c 	.word	0x0800a20c
 8001bf8:	20000408 	.word	0x20000408
 8001bfc:	2000044c 	.word	0x2000044c
 8001c00:	0800a210 	.word	0x0800a210
 8001c04:	200003a4 	.word	0x200003a4
 8001c08:	20000434 	.word	0x20000434
 8001c0c:	20000450 	.word	0x20000450
 8001c10:	0800a214 	.word	0x0800a214
 8001c14:	20000454 	.word	0x20000454
 8001c18:	0800a228 	.word	0x0800a228
 8001c1c:	0800a248 	.word	0x0800a248
 8001c20:	0800a25c 	.word	0x0800a25c
 8001c24:	0800a270 	.word	0x0800a270
 8001c28:	0800a284 	.word	0x0800a284
 8001c2c:	0800a298 	.word	0x0800a298
 8001c30:	2000030c 	.word	0x2000030c
 8001c34:	0800a29c 	.word	0x0800a29c
 8001c38:	200002c4 	.word	0x200002c4

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	; 0x40
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	2228      	movs	r2, #40	; 0x28
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 f80d 	bl	8005c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fd9d 	bl	80037c4 <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c90:	f000 f8ca 	bl	8001e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c94:	230f      	movs	r3, #15
 8001c96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 f80a 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cba:	f000 f8b5 	bl	8001e28 <Error_Handler>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3740      	adds	r7, #64	; 0x40
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <MX_I2C1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d06:	f001 f8a9 	bl	8002e5c <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 f88a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000228 	.word	0x20000228
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	f002 f942 	bl	8003fe4 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f000 f85f 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000027c 	.word	0x2000027c
 8001d74:	40013800 	.word	0x40013800

08001d78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <MX_USART2_UART_Init+0x50>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f002 f918 	bl	8003fe4 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dba:	f000 f835 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002c4 	.word	0x200002c4
 8001dc8:	40004400 	.word	0x40004400

08001dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <MX_GPIO_Init+0x58>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>
	...

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_MspInit+0x6c>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <HAL_MspInit+0x6c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6193      	str	r3, [r2, #24]
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_MspInit+0x6c>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_MspInit+0x6c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_MspInit+0x6c>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_MspInit+0x6c>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 fd87 	bl	8002982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 fda0 	bl	80029ba <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_MspInit+0x70>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_MspInit+0x70>)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a15      	ldr	r2, [pc, #84]	; (8001f18 <HAL_I2C_MspInit+0x70>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d123      	bne.n	8001f10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <HAL_I2C_MspInit+0x78>)
 8001ef4:	f000 fe2e 	bl	8002b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f02:	61d3      	str	r3, [r2, #28]
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_I2C_MspInit+0x74>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	; (800202c <HAL_UART_MspInit+0x108>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d13a      	bne.n	8001fba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a33      	ldr	r2, [pc, #204]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	482a      	ldr	r0, [pc, #168]	; (8002034 <HAL_UART_MspInit+0x110>)
 8001f8a:	f000 fde3 	bl	8002b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4824      	ldr	r0, [pc, #144]	; (8002034 <HAL_UART_MspInit+0x110>)
 8001fa4:	f000 fdd6 	bl	8002b54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2025      	movs	r0, #37	; 0x25
 8001fae:	f000 fce8 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fb2:	2025      	movs	r0, #37	; 0x25
 8001fb4:	f000 fd01 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb8:	e034      	b.n	8002024 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_UART_MspInit+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d12f      	bne.n	8002024 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fce:	61d3      	str	r3, [r2, #28]
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_UART_MspInit+0x10c>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	4619      	mov	r1, r3
 8002006:	480b      	ldr	r0, [pc, #44]	; (8002034 <HAL_UART_MspInit+0x110>)
 8002008:	f000 fda4 	bl	8002b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800200c:	2308      	movs	r3, #8
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4619      	mov	r1, r3
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <HAL_UART_MspInit+0x110>)
 8002020:	f000 fd98 	bl	8002b54 <HAL_GPIO_Init>
}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40013800 	.word	0x40013800
 8002030:	40021000 	.word	0x40021000
 8002034:	40010800 	.word	0x40010800
 8002038:	40004400 	.word	0x40004400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <SysTick_Handler+0x38>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <SysTick_Handler+0x1c>
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <SysTick_Handler+0x38>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <SysTick_Handler+0x38>)
 800209a:	801a      	strh	r2, [r3, #0]
	if (VCCTimeout>0) VCCTimeout--;
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <SysTick_Handler+0x3c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dd04      	ble.n	80020ae <SysTick_Handler+0x2e>
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Handler+0x3c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <SysTick_Handler+0x3c>)
 80020ac:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ae:	f000 fb51 	bl	8002754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000048c 	.word	0x2000048c
 80020bc:	20000004 	.word	0x20000004

080020c0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80020c4:	f001 fb66 	bl	8003794 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <USART1_IRQHandler+0x14>)
 80020d2:	f000 fa75 	bl	80025c0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020d6:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USART1_IRQHandler+0x14>)
 80020d8:	f002 f858 	bl	800418c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000027c 	.word	0x2000027c

080020e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <_kill>:

int _kill(int pid, int sig)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020fc:	f003 fe16 	bl	8005d2c <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	2216      	movs	r2, #22
 8002104:	601a      	str	r2, [r3, #0]
  return -1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_exit>:

void _exit (int status)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800211a:	f04f 31ff 	mov.w	r1, #4294967295
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffe7 	bl	80020f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002124:	e7fe      	b.n	8002124 <_exit+0x12>

08002126 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e00a      	b.n	800214e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002138:	f3af 8000 	nop.w
 800213c:	4601      	mov	r1, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	60ba      	str	r2, [r7, #8]
 8002144:	b2ca      	uxtb	r2, r1
 8002146:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	dbf0      	blt.n	8002138 <_read+0x12>
  }

  return len;
 8002156:	687b      	ldr	r3, [r7, #4]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e009      	b.n	8002186 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	60ba      	str	r2, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	dbf1      	blt.n	8002172 <_write+0x12>
  }
  return len;
 800218e:	687b      	ldr	r3, [r7, #4]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_close>:

int _close(int file)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021be:	605a      	str	r2, [r3, #4]
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <_isatty>:

int _isatty(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f003 fd80 	bl	8005d2c <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20005000 	.word	0x20005000
 8002258:	00000400 	.word	0x00000400
 800225c:	20000488 	.word	0x20000488
 8002260:	200009f8 	.word	0x200009f8

08002264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <Ringbuf_init+0x38>)
 8002276:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <Ringbuf_init+0x3c>)
 8002278:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <Ringbuf_init+0x40>)
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <Ringbuf_init+0x44>)
 800227e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <Ringbuf_init+0x48>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <Ringbuf_init+0x48>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <Ringbuf_init+0x48>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <Ringbuf_init+0x48>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	60da      	str	r2, [r3, #12]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	200008a0 	.word	0x200008a0
 80022ac:	20000490 	.word	0x20000490
 80022b0:	200008a4 	.word	0x200008a4
 80022b4:	20000698 	.word	0x20000698
 80022b8:	2000027c 	.word	0x2000027c

080022bc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d009      	beq.n	80022f6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	79f9      	ldrb	r1, [r7, #7]
 80022ec:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <Uart_read+0x54>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <Uart_read+0x54>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002316:	429a      	cmp	r2, r3
 8002318:	d102      	bne.n	8002320 <Uart_read+0x20>
  {
    return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	e013      	b.n	8002348 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <Uart_read+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <Uart_read+0x54>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <Uart_read+0x54>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <Uart_read+0x54>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002342:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002346:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	200008a0 	.word	0x200008a0

08002358 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <IsDataAvailable+0x30>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <IsDataAvailable+0x30>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800236e:	b29b      	uxth	r3, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b29b      	uxth	r3, r3
 8002374:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002378:	b29b      	uxth	r3, r3
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	200008a0 	.word	0x200008a0

0800238c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <Uart_peek+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <Uart_peek+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d102      	bne.n	80023aa <Uart_peek+0x1e>
  {
    return -1;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	e006      	b.n	80023b8 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <Uart_peek+0x34>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <Uart_peek+0x34>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	200008a0 	.word	0x200008a0

080023c4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fd febc 	bl	8000150 <strlen>
 80023d8:	4603      	mov	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80023e0:	e01e      	b.n	8002420 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <Copy_upto+0xf8>)
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <Copy_upto+0xf8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	4403      	add	r3, r0
 80023f4:	5c8a      	ldrb	r2, [r1, r2]
 80023f6:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80023f8:	4b30      	ldr	r3, [pc, #192]	; (80024bc <Copy_upto+0xf8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <Copy_upto+0xf8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800240a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3301      	adds	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002414:	bf00      	nop
 8002416:	f7ff ff9f 	bl	8002358 <IsDataAvailable>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0fa      	beq.n	8002416 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002420:	f7ff ffb4 	bl	800238c <Uart_peek>
 8002424:	4601      	mov	r1, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4299      	cmp	r1, r3
 8002430:	d1d7      	bne.n	80023e2 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002432:	e027      	b.n	8002484 <Copy_upto+0xc0>
	{
		so_far++;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800243a:	f7ff ff61 	bl	8002300 <Uart_read>
 800243e:	4601      	mov	r1, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	613a      	str	r2, [r7, #16]
 8002446:	461a      	mov	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d101      	bne.n	800245c <Copy_upto+0x98>
 8002458:	2301      	movs	r3, #1
 800245a:	e02b      	b.n	80024b4 <Copy_upto+0xf0>
		timeout = TIMEOUT_DEF;
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <Copy_upto+0xfc>)
 800245e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002462:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002464:	bf00      	nop
 8002466:	f7ff ff77 	bl	8002358 <IsDataAvailable>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d103      	bne.n	8002478 <Copy_upto+0xb4>
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <Copy_upto+0xfc>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f6      	bne.n	8002466 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <Copy_upto+0xfc>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <Copy_upto+0xc0>
 8002480:	2300      	movs	r3, #0
 8002482:	e017      	b.n	80024b4 <Copy_upto+0xf0>
	while (Uart_peek() == string [so_far])
 8002484:	f7ff ff82 	bl	800238c <Uart_peek>
 8002488:	4601      	mov	r1, r0
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4299      	cmp	r1, r3
 8002494:	d0ce      	beq.n	8002434 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	429a      	cmp	r2, r3
 800249c:	d002      	beq.n	80024a4 <Copy_upto+0xe0>
	{
		so_far = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
		goto again;
 80024a2:	e79d      	b.n	80023e0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d101      	bne.n	80024b0 <Copy_upto+0xec>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e001      	b.n	80024b4 <Copy_upto+0xf0>
	else return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200008a0 	.word	0x200008a0
 80024c0:	2000048c 	.word	0x2000048c

080024c4 <Wait_for>:
//
//	if (so_far == len) return 1;
//	else return 0;
//}
int Wait_for (char *string)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fd fe3d 	bl	8000150 <strlen>
 80024d6:	4603      	mov	r3, r0
 80024d8:	60bb      	str	r3, [r7, #8]

again:
	//timeout = TIMEOUT_DEF;
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80024da:	bf00      	nop
 80024dc:	f7ff ff3c 	bl	8002358 <IsDataAvailable>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11b      	bne.n	800251e <Wait_for+0x5a>
 80024e6:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <Wait_for+0xf4>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f6      	bne.n	80024dc <Wait_for+0x18>
	//if (timeout == 0) return 0;
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80024ee:	e016      	b.n	800251e <Wait_for+0x5a>
	{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <Wait_for+0xf8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <Wait_for+0xf8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002502:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			if (_rx_buffer->tail == _rx_buffer->head) return 0;
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <Wait_for+0xf8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <Wait_for+0xf8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002516:	429a      	cmp	r2, r3
 8002518:	d101      	bne.n	800251e <Wait_for+0x5a>
 800251a:	2300      	movs	r3, #0
 800251c:	e048      	b.n	80025b0 <Wait_for+0xec>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800251e:	f7ff ff35 	bl	800238c <Uart_peek>
 8002522:	4601      	mov	r1, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4299      	cmp	r1, r3
 800252e:	d1df      	bne.n	80024f0 <Wait_for+0x2c>


	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002530:	e027      	b.n	8002582 <Wait_for+0xbe>
	{
		// now we will peek for the other letters too
		so_far++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3301      	adds	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <Wait_for+0xf8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <Wait_for+0xf8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	429a      	cmp	r2, r3
 8002554:	d101      	bne.n	800255a <Wait_for+0x96>
 8002556:	2301      	movs	r3, #1
 8002558:	e02a      	b.n	80025b0 <Wait_for+0xec>
		timeout = TIMEOUT_DEF;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <Wait_for+0xf4>)
 800255c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002560:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002562:	bf00      	nop
 8002564:	f7ff fef8 	bl	8002358 <IsDataAvailable>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <Wait_for+0xb2>
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <Wait_for+0xf4>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f6      	bne.n	8002564 <Wait_for+0xa0>
		if (timeout == 0) return 0;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <Wait_for+0xf4>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <Wait_for+0xbe>
 800257e:	2300      	movs	r3, #0
 8002580:	e016      	b.n	80025b0 <Wait_for+0xec>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002582:	f7ff ff03 	bl	800238c <Uart_peek>
 8002586:	4601      	mov	r1, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4299      	cmp	r1, r3
 8002592:	d0ce      	beq.n	8002532 <Wait_for+0x6e>
	}

	if (so_far != len)
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d002      	beq.n	80025a2 <Wait_for+0xde>
	{
		so_far = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
		goto again;
 80025a0:	e79b      	b.n	80024da <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d101      	bne.n	80025ae <Wait_for+0xea>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <Wait_for+0xec>
	else return 0;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	2000048c 	.word	0x2000048c
 80025bc:	200008a0 	.word	0x200008a0

080025c0 <Uart_isr>:



void Uart_isr (UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d013      	beq.n	800260a <Uart_isr+0x4a>
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <Uart_isr+0xb4>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe5a 	bl	80022bc <store_char>
        return;
 8002608:	e031      	b.n	800266e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02c      	beq.n	800266e <Uart_isr+0xae>
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d027      	beq.n	800266e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <Uart_isr+0xb8>)
 8002620:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <Uart_isr+0xb8>)
 8002626:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800262a:	429a      	cmp	r2, r3
 800262c:	d108      	bne.n	8002640 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800263e:	e015      	b.n	800266c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <Uart_isr+0xb8>)
 8002642:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <Uart_isr+0xb8>)
 8002648:	5cd3      	ldrb	r3, [r2, r3]
 800264a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <Uart_isr+0xb8>)
 800264e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <Uart_isr+0xb8>)
 800265a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	7bba      	ldrb	r2, [r7, #14]
 800266a:	605a      	str	r2, [r3, #4]
    	return;
 800266c:	bf00      	nop
    }
}
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200008a0 	.word	0x200008a0
 8002678:	20000698 	.word	0x20000698

0800267c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800267c:	f7ff fdf2 	bl	8002264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002682:	490c      	ldr	r1, [pc, #48]	; (80026b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002684:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002698:	4c09      	ldr	r4, [pc, #36]	; (80026c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a6:	f003 fb47 	bl	8005d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026aa:	f7ff f97d 	bl	80019a8 <main>
  bx lr
 80026ae:	4770      	bx	lr
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026b8:	0800a730 	.word	0x0800a730
  ldr r2, =_sbss
 80026bc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026c0:	200009f8 	.word	0x200009f8

080026c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <ADC1_2_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_Init+0x28>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_Init+0x28>)
 80026d2:	f043 0310 	orr.w	r3, r3, #16
 80026d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	2003      	movs	r0, #3
 80026da:	f000 f947 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 f808 	bl	80026f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e4:	f7ff fba6 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_InitTick+0x54>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_InitTick+0x58>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f95f 	bl	80029d6 <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d80a      	bhi.n	800273e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f000 f927 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <HAL_InitTick+0x5c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000008 	.word	0x20000008
 800274c:	20000010 	.word	0x20000010
 8002750:	2000000c 	.word	0x2000000c

08002754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_IncTick+0x1c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_IncTick+0x20>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a03      	ldr	r2, [pc, #12]	; (8002774 <HAL_IncTick+0x20>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	20000010 	.word	0x20000010
 8002774:	200008a8 	.word	0x200008a8

08002778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return uwTick;
 800277c:	4b02      	ldr	r3, [pc, #8]	; (8002788 <HAL_GetTick+0x10>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	200008a8 	.word	0x200008a8

0800278c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff fff0 	bl	8002778 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d005      	beq.n	80027b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_Delay+0x44>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027b2:	bf00      	nop
 80027b4:	f7ff ffe0 	bl	8002778 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d8f7      	bhi.n	80027b4 <HAL_Delay+0x28>
  {
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000010 	.word	0x20000010

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4906      	ldr	r1, [pc, #24]	; (800286c <__NVIC_EnableIRQ+0x34>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	; (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	; (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff90 	bl	8002870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff2d 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff42 	bl	800281c <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff90 	bl	80028c4 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5f 	bl	8002870 <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff35 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d008      	beq.n	8002a18 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e020      	b.n	8002a5a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 020e 	bic.w	r2, r2, #14
 8002a26:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	e051      	b.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 020e 	bic.w	r2, r2, #14
 8002a96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_DMA_Abort_IT+0xd4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d029      	beq.n	8002b06 <HAL_DMA_Abort_IT+0xa2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_DMA_Abort_IT+0xd8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x9e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_DMA_Abort_IT+0xdc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01a      	beq.n	8002afc <HAL_DMA_Abort_IT+0x98>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_DMA_Abort_IT+0xe0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x92>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_DMA_Abort_IT+0xe4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00a      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x8c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <HAL_DMA_Abort_IT+0xe8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d102      	bne.n	8002aea <HAL_DMA_Abort_IT+0x86>
 8002ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ae8:	e00e      	b.n	8002b08 <HAL_DMA_Abort_IT+0xa4>
 8002aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aee:	e00b      	b.n	8002b08 <HAL_DMA_Abort_IT+0xa4>
 8002af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af4:	e008      	b.n	8002b08 <HAL_DMA_Abort_IT+0xa4>
 8002af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afa:	e005      	b.n	8002b08 <HAL_DMA_Abort_IT+0xa4>
 8002afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b00:	e002      	b.n	8002b08 <HAL_DMA_Abort_IT+0xa4>
 8002b02:	2310      	movs	r3, #16
 8002b04:	e000      	b.n	8002b08 <HAL_DMA_Abort_IT+0xa4>
 8002b06:	2301      	movs	r3, #1
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_DMA_Abort_IT+0xec>)
 8002b0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
    } 
  }
  return status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40020008 	.word	0x40020008
 8002b3c:	4002001c 	.word	0x4002001c
 8002b40:	40020030 	.word	0x40020030
 8002b44:	40020044 	.word	0x40020044
 8002b48:	40020058 	.word	0x40020058
 8002b4c:	4002006c 	.word	0x4002006c
 8002b50:	40020000 	.word	0x40020000

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b08b      	sub	sp, #44	; 0x2c
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b66:	e169      	b.n	8002e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 8158 	bne.w	8002e36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a9a      	ldr	r2, [pc, #616]	; (8002df4 <HAL_GPIO_Init+0x2a0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d05e      	beq.n	8002c4e <HAL_GPIO_Init+0xfa>
 8002b90:	4a98      	ldr	r2, [pc, #608]	; (8002df4 <HAL_GPIO_Init+0x2a0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d875      	bhi.n	8002c82 <HAL_GPIO_Init+0x12e>
 8002b96:	4a98      	ldr	r2, [pc, #608]	; (8002df8 <HAL_GPIO_Init+0x2a4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d058      	beq.n	8002c4e <HAL_GPIO_Init+0xfa>
 8002b9c:	4a96      	ldr	r2, [pc, #600]	; (8002df8 <HAL_GPIO_Init+0x2a4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d86f      	bhi.n	8002c82 <HAL_GPIO_Init+0x12e>
 8002ba2:	4a96      	ldr	r2, [pc, #600]	; (8002dfc <HAL_GPIO_Init+0x2a8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d052      	beq.n	8002c4e <HAL_GPIO_Init+0xfa>
 8002ba8:	4a94      	ldr	r2, [pc, #592]	; (8002dfc <HAL_GPIO_Init+0x2a8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d869      	bhi.n	8002c82 <HAL_GPIO_Init+0x12e>
 8002bae:	4a94      	ldr	r2, [pc, #592]	; (8002e00 <HAL_GPIO_Init+0x2ac>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d04c      	beq.n	8002c4e <HAL_GPIO_Init+0xfa>
 8002bb4:	4a92      	ldr	r2, [pc, #584]	; (8002e00 <HAL_GPIO_Init+0x2ac>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d863      	bhi.n	8002c82 <HAL_GPIO_Init+0x12e>
 8002bba:	4a92      	ldr	r2, [pc, #584]	; (8002e04 <HAL_GPIO_Init+0x2b0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d046      	beq.n	8002c4e <HAL_GPIO_Init+0xfa>
 8002bc0:	4a90      	ldr	r2, [pc, #576]	; (8002e04 <HAL_GPIO_Init+0x2b0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d85d      	bhi.n	8002c82 <HAL_GPIO_Init+0x12e>
 8002bc6:	2b12      	cmp	r3, #18
 8002bc8:	d82a      	bhi.n	8002c20 <HAL_GPIO_Init+0xcc>
 8002bca:	2b12      	cmp	r3, #18
 8002bcc:	d859      	bhi.n	8002c82 <HAL_GPIO_Init+0x12e>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <HAL_GPIO_Init+0x80>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002c4f 	.word	0x08002c4f
 8002bd8:	08002c29 	.word	0x08002c29
 8002bdc:	08002c3b 	.word	0x08002c3b
 8002be0:	08002c7d 	.word	0x08002c7d
 8002be4:	08002c83 	.word	0x08002c83
 8002be8:	08002c83 	.word	0x08002c83
 8002bec:	08002c83 	.word	0x08002c83
 8002bf0:	08002c83 	.word	0x08002c83
 8002bf4:	08002c83 	.word	0x08002c83
 8002bf8:	08002c83 	.word	0x08002c83
 8002bfc:	08002c83 	.word	0x08002c83
 8002c00:	08002c83 	.word	0x08002c83
 8002c04:	08002c83 	.word	0x08002c83
 8002c08:	08002c83 	.word	0x08002c83
 8002c0c:	08002c83 	.word	0x08002c83
 8002c10:	08002c83 	.word	0x08002c83
 8002c14:	08002c83 	.word	0x08002c83
 8002c18:	08002c31 	.word	0x08002c31
 8002c1c:	08002c45 	.word	0x08002c45
 8002c20:	4a79      	ldr	r2, [pc, #484]	; (8002e08 <HAL_GPIO_Init+0x2b4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c26:	e02c      	b.n	8002c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	623b      	str	r3, [r7, #32]
          break;
 8002c2e:	e029      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	3304      	adds	r3, #4
 8002c36:	623b      	str	r3, [r7, #32]
          break;
 8002c38:	e024      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	623b      	str	r3, [r7, #32]
          break;
 8002c42:	e01f      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	623b      	str	r3, [r7, #32]
          break;
 8002c4c:	e01a      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c56:	2304      	movs	r3, #4
 8002c58:	623b      	str	r3, [r7, #32]
          break;
 8002c5a:	e013      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c64:	2308      	movs	r3, #8
 8002c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	611a      	str	r2, [r3, #16]
          break;
 8002c6e:	e009      	b.n	8002c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c70:	2308      	movs	r3, #8
 8002c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	615a      	str	r2, [r3, #20]
          break;
 8002c7a:	e003      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
          break;
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x130>
          break;
 8002c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d801      	bhi.n	8002c8e <HAL_GPIO_Init+0x13a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	e001      	b.n	8002c92 <HAL_GPIO_Init+0x13e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2bff      	cmp	r3, #255	; 0xff
 8002c98:	d802      	bhi.n	8002ca0 <HAL_GPIO_Init+0x14c>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	e002      	b.n	8002ca6 <HAL_GPIO_Init+0x152>
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	3b08      	subs	r3, #8
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	210f      	movs	r1, #15
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	6a39      	ldr	r1, [r7, #32]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80b1 	beq.w	8002e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6193      	str	r3, [r2, #24]
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cec:	4a48      	ldr	r2, [pc, #288]	; (8002e10 <HAL_GPIO_Init+0x2bc>)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a40      	ldr	r2, [pc, #256]	; (8002e14 <HAL_GPIO_Init+0x2c0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_GPIO_Init+0x1ec>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a3f      	ldr	r2, [pc, #252]	; (8002e18 <HAL_GPIO_Init+0x2c4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00d      	beq.n	8002d3c <HAL_GPIO_Init+0x1e8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a3e      	ldr	r2, [pc, #248]	; (8002e1c <HAL_GPIO_Init+0x2c8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <HAL_GPIO_Init+0x2cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_GPIO_Init+0x1e0>
 8002d30:	2303      	movs	r3, #3
 8002d32:	e006      	b.n	8002d42 <HAL_GPIO_Init+0x1ee>
 8002d34:	2304      	movs	r3, #4
 8002d36:	e004      	b.n	8002d42 <HAL_GPIO_Init+0x1ee>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e002      	b.n	8002d42 <HAL_GPIO_Init+0x1ee>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_GPIO_Init+0x1ee>
 8002d40:	2300      	movs	r3, #0
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	f002 0203 	and.w	r2, r2, #3
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	4093      	lsls	r3, r2
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d52:	492f      	ldr	r1, [pc, #188]	; (8002e10 <HAL_GPIO_Init+0x2bc>)
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	492c      	ldr	r1, [pc, #176]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4928      	ldr	r1, [pc, #160]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	491e      	ldr	r1, [pc, #120]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4918      	ldr	r1, [pc, #96]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4914      	ldr	r1, [pc, #80]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d021      	beq.n	8002e28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_GPIO_Init+0x2d0>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e021      	b.n	8002e36 <HAL_GPIO_Init+0x2e2>
 8002df2:	bf00      	nop
 8002df4:	10320000 	.word	0x10320000
 8002df8:	10310000 	.word	0x10310000
 8002dfc:	10220000 	.word	0x10220000
 8002e00:	10210000 	.word	0x10210000
 8002e04:	10120000 	.word	0x10120000
 8002e08:	10110000 	.word	0x10110000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40010800 	.word	0x40010800
 8002e18:	40010c00 	.word	0x40010c00
 8002e1c:	40011000 	.word	0x40011000
 8002e20:	40011400 	.word	0x40011400
 8002e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	4909      	ldr	r1, [pc, #36]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	3301      	adds	r3, #1
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f47f ae8e 	bne.w	8002b68 <HAL_GPIO_Init+0x14>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	372c      	adds	r7, #44	; 0x2c
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e12b      	b.n	80030c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff f810 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	; 0x24
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec0:	f001 f84a 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a81      	ldr	r2, [pc, #516]	; (80030d0 <HAL_I2C_Init+0x274>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d807      	bhi.n	8002ee0 <HAL_I2C_Init+0x84>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a80      	ldr	r2, [pc, #512]	; (80030d4 <HAL_I2C_Init+0x278>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	bf94      	ite	ls
 8002ed8:	2301      	movls	r3, #1
 8002eda:	2300      	movhi	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e006      	b.n	8002eee <HAL_I2C_Init+0x92>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a7d      	ldr	r2, [pc, #500]	; (80030d8 <HAL_I2C_Init+0x27c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf94      	ite	ls
 8002ee8:	2301      	movls	r3, #1
 8002eea:	2300      	movhi	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0e7      	b.n	80030c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a78      	ldr	r2, [pc, #480]	; (80030dc <HAL_I2C_Init+0x280>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0c9b      	lsrs	r3, r3, #18
 8002f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a6a      	ldr	r2, [pc, #424]	; (80030d0 <HAL_I2C_Init+0x274>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d802      	bhi.n	8002f30 <HAL_I2C_Init+0xd4>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	e009      	b.n	8002f44 <HAL_I2C_Init+0xe8>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <HAL_I2C_Init+0x284>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	3301      	adds	r3, #1
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	495c      	ldr	r1, [pc, #368]	; (80030d0 <HAL_I2C_Init+0x274>)
 8002f60:	428b      	cmp	r3, r1
 8002f62:	d819      	bhi.n	8002f98 <HAL_I2C_Init+0x13c>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e59      	subs	r1, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f72:	1c59      	adds	r1, r3, #1
 8002f74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f78:	400b      	ands	r3, r1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_I2C_Init+0x138>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1e59      	subs	r1, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	e051      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8002f94:	2304      	movs	r3, #4
 8002f96:	e04f      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d111      	bne.n	8002fc4 <HAL_I2C_Init+0x168>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e58      	subs	r0, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e012      	b.n	8002fea <HAL_I2C_Init+0x18e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e58      	subs	r0, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	0099      	lsls	r1, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x196>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e022      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10e      	bne.n	8003018 <HAL_I2C_Init+0x1bc>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e58      	subs	r0, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	440b      	add	r3, r1
 8003008:	fbb0 f3f3 	udiv	r3, r0, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Init+0x1dc>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	0099      	lsls	r1, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	6809      	ldr	r1, [r1, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6911      	ldr	r1, [r2, #16]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	000186a0 	.word	0x000186a0
 80030d4:	001e847f 	.word	0x001e847f
 80030d8:	003d08ff 	.word	0x003d08ff
 80030dc:	431bde83 	.word	0x431bde83
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	461a      	mov	r2, r3
 80030f0:	460b      	mov	r3, r1
 80030f2:	817b      	strh	r3, [r7, #10]
 80030f4:	4613      	mov	r3, r2
 80030f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7ff fb3e 	bl	8002778 <HAL_GetTick>
 80030fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	f040 80e0 	bne.w	80032cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	4970      	ldr	r1, [pc, #448]	; (80032d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f964 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	e0d3      	b.n	80032ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2C_Master_Transmit+0x50>
 8003130:	2302      	movs	r3, #2
 8003132:	e0cc      	b.n	80032ce <HAL_I2C_Master_Transmit+0x1ea>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d007      	beq.n	800315a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003168:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2221      	movs	r2, #33	; 0x21
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2210      	movs	r2, #16
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_I2C_Master_Transmit+0x1f8>)
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f89c 	bl	80032e0 <I2C_MasterRequestWrite>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e08d      	b.n	80032ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031c8:	e066      	b.n	8003298 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa22 	bl	8003618 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d107      	bne.n	80031f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06b      	b.n	80032ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d11b      	bne.n	800326c <HAL_I2C_Master_Transmit+0x188>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	d017      	beq.n	800326c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa19 	bl	80036a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01a      	b.n	80032ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d194      	bne.n	80031ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000

080032e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	460b      	mov	r3, r1
 80032ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d006      	beq.n	800330a <I2C_MasterRequestWrite+0x2a>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d003      	beq.n	800330a <I2C_MasterRequestWrite+0x2a>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003308:	d108      	bne.n	800331c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e00b      	b.n	8003334 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	2b12      	cmp	r3, #18
 8003322:	d107      	bne.n	8003334 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003332:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f84f 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335a:	d103      	bne.n	8003364 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e035      	b.n	80033d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003370:	d108      	bne.n	8003384 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003380:	611a      	str	r2, [r3, #16]
 8003382:	e01b      	b.n	80033bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	11db      	asrs	r3, r3, #7
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 0306 	and.w	r3, r3, #6
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f063 030f 	orn	r3, r3, #15
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <I2C_MasterRequestWrite+0xfc>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f898 	bl	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e010      	b.n	80033d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <I2C_MasterRequestWrite+0x100>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f888 	bl	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	00010008 	.word	0x00010008
 80033e0:	00010002 	.word	0x00010002

080033e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f4:	e048      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d044      	beq.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7ff f9bb 	bl	8002778 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d139      	bne.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	0c1b      	lsrs	r3, r3, #16
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10d      	bne.n	800343a <I2C_WaitOnFlagUntilTimeout+0x56>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	43da      	mvns	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	e00c      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0x70>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	429a      	cmp	r2, r3
 8003458:	d116      	bne.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e023      	b.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	0c1b      	lsrs	r3, r3, #16
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10d      	bne.n	80034ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	43da      	mvns	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	e00c      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d093      	beq.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e6:	e071      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	d123      	bne.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e067      	b.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d041      	beq.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003548:	f7ff f916 	bl	8002778 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d136      	bne.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10c      	bne.n	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e00b      	b.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	43da      	mvns	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e021      	b.n	8003610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10c      	bne.n	80035f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	43da      	mvns	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e00b      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f af6d 	bne.w	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003624:	e034      	b.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f886 	bl	8003738 <I2C_IsAcknowledgeFailed>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e034      	b.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d028      	beq.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7ff f89b 	bl	8002778 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11d      	bne.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d016      	beq.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d1c3      	bne.n	8003626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b4:	e034      	b.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f83e 	bl	8003738 <I2C_IsAcknowledgeFailed>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e034      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d028      	beq.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ce:	f7ff f853 	bl	8002778 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d302      	bcc.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d11d      	bne.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d016      	beq.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e007      	b.n	8003730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d1c3      	bne.n	80036b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d11b      	bne.n	8003788 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003758:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80037a4:	f000 f808 	bl	80037b8 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80037a8:	4b02      	ldr	r3, [pc, #8]	; (80037b4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80037aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037ae:	615a      	str	r2, [r3, #20]
  }
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40010400 	.word	0x40010400

080037b8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e272      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8087 	beq.w	80038f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e4:	4b92      	ldr	r3, [pc, #584]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00c      	beq.n	800380a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037f0:	4b8f      	ldr	r3, [pc, #572]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d112      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
 80037fc:	4b8c      	ldr	r3, [pc, #560]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d10b      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d06c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x12c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d168      	bne.n	80038f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e24c      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x76>
 800382c:	4b80      	ldr	r3, [pc, #512]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7f      	ldr	r2, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e02e      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7a      	ldr	r2, [pc, #488]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a77      	ldr	r2, [pc, #476]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e01d      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0xbc>
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a71      	ldr	r2, [pc, #452]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 8003880:	4b6b      	ldr	r3, [pc, #428]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6a      	ldr	r2, [pc, #424]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a67      	ldr	r2, [pc, #412]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe ff6a 	bl	8002778 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fe ff66 	bl	8002778 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e200      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe4>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe ff56 	bl	8002778 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe ff52 	bl	8002778 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1ec      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10c>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d063      	beq.n	80039c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038fe:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800390a:	4b49      	ldr	r3, [pc, #292]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1c0      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4939      	ldr	r1, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e03a      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCC_OscConfig+0x270>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fe ff0b 	bl	8002778 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003966:	f7fe ff07 	bl	8002778 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1a1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4927      	ldr	r1, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_RCC_OscConfig+0x270>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe feea 	bl	8002778 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7fe fee6 	bl	8002778 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e180      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03a      	beq.n	8003a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d019      	beq.n	8003a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039da:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_RCC_OscConfig+0x274>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7fe feca 	bl	8002778 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fe fec6 	bl	8002778 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e160      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f000 face 	bl	8003fa8 <RCC_Delay>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCC_OscConfig+0x274>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fe feb0 	bl	8002778 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1a:	e00f      	b.n	8003a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7fe feac 	bl	8002778 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e146      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	42420000 	.word	0x42420000
 8003a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b92      	ldr	r3, [pc, #584]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e9      	bne.n	8003a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a6 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a87      	ldr	r2, [pc, #540]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]
 8003a72:	4b85      	ldr	r3, [pc, #532]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b82      	ldr	r3, [pc, #520]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7e      	ldr	r2, [pc, #504]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fe6d 	bl	8002778 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7fe fe69 	bl	8002778 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	; 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e103      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x312>
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	e02d      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x334>
 8003ade:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a66      	ldr	r2, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
 8003af6:	e01c      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x356>
 8003b00:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a60      	ldr	r2, [pc, #384]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	4b58      	ldr	r3, [pc, #352]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe fe1d 	bl	8002778 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fe fe19 	bl	8002778 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0b1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ee      	beq.n	8003b42 <HAL_RCC_OscConfig+0x37e>
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b66:	f7fe fe07 	bl	8002778 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fe fe03 	bl	8002778 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e09b      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b84:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b96:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8087 	beq.w	8003cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d061      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d146      	bne.n	8003c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fdd7 	bl	8002778 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe fdd3 	bl	8002778 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e06d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4921      	ldr	r1, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a19      	ldr	r1, [r3, #32]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	491b      	ldr	r1, [pc, #108]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe fda7 	bl	8002778 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fe fda3 	bl	8002778 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e03d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x46a>
 8003c4c:	e035      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fe fd90 	bl	8002778 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fe fd8c 	bl	8002778 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e026      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x498>
 8003c7a:	e01e      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e019      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCC_OscConfig+0x500>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d0      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b67      	ldr	r3, [pc, #412]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4965      	ldr	r1, [pc, #404]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a58      	ldr	r2, [pc, #352]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a52      	ldr	r2, [pc, #328]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d040      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d115      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e073      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06b      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4936      	ldr	r1, [pc, #216]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fe fcde 	bl	8002778 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe fcda 	bl	8002778 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e053      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d210      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f821 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1cc>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fc3c 	bl	80026f4 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800a2a0 	.word	0x0800a2a0
 8003e94:	20000008 	.word	0x20000008
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eca:	e027      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0c5b      	lsrs	r3, r3, #17
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	fb03 f202 	mul.w	r2, r3, r2
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e004      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	613b      	str	r3, [r7, #16]
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	613b      	str	r3, [r7, #16]
      break;
 8003f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f22:	693b      	ldr	r3, [r7, #16]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	0800a2b8 	.word	0x0800a2b8
 8003f3c:	0800a2c8 	.word	0x0800a2c8
 8003f40:	003d0900 	.word	0x003d0900

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	20000008 	.word	0x20000008

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff2 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0800a2b0 	.word	0x0800a2b0

08003f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f84:	f7ff ffde 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	0adb      	lsrs	r3, r3, #11
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	0800a2b0 	.word	0x0800a2b0

08003fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <RCC_Delay+0x34>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <RCC_Delay+0x38>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	0a5b      	lsrs	r3, r3, #9
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fc4:	bf00      	nop
  }
  while (Delay --);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	60fa      	str	r2, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f9      	bne.n	8003fc4 <RCC_Delay+0x1c>
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	20000008 	.word	0x20000008
 8003fe0:	10624dd3 	.word	0x10624dd3

08003fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e042      	b.n	800407c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd ff8a 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fd71 	bl	8004b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d16d      	bne.n	8004180 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_UART_Transmit+0x2c>
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e066      	b.n	8004182 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c2:	f7fe fb59 	bl	8002778 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x6c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f8:	e02a      	b.n	8004150 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 faf9 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e036      	b.n	8004182 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	3302      	adds	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e007      	b.n	8004142 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3301      	adds	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1cf      	bne.n	80040fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fac9 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b0ba      	sub	sp, #232	; 0xe8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80041ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
 80041de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fbd1 	bl	8004992 <UART_Receive_IT>
      return;
 80041f0:	e25b      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80de 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
 80041fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80d1 	beq.w	80043b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 81f2 	beq.w	80046a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb5c 	bl	8004992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <HAL_UART_IRQHandler+0x17a>
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04f      	beq.n	80043a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa66 	bl	80047d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d041      	beq.n	800439e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800434a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800435e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1d9      	bne.n	800431a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	4a7e      	ldr	r2, [pc, #504]	; (800456c <HAL_UART_IRQHandler+0x3e0>)
 8004374:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fb72 	bl	8002a64 <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004390:	4610      	mov	r0, r2
 8004392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e00e      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f99c 	bl	80046d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00a      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f998 	bl	80046d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e006      	b.n	80043b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f994 	bl	80046d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80043b2:	e175      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	bf00      	nop
    return;
 80043b6:	e173      	b.n	80046a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 814f 	bne.w	8004660 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8148 	beq.w	8004660 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8141 	beq.w	8004660 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80b6 	beq.w	8004570 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8145 	beq.w	80046a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004422:	429a      	cmp	r2, r3
 8004424:	f080 813e 	bcs.w	80046a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b20      	cmp	r3, #32
 8004438:	f000 8088 	beq.w	800454c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004468:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800446c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004474:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1d9      	bne.n	800443c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e1      	bne.n	8004488 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3314      	adds	r3, #20
 80044e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e3      	bne.n	80044c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800452e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004530:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800453c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fa51 	bl	80029ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800455a:	b29b      	uxth	r3, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	b29b      	uxth	r3, r3
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8bf 	bl	80046e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004568:	e09c      	b.n	80046a4 <HAL_UART_IRQHandler+0x518>
 800456a:	bf00      	nop
 800456c:	0800489d 	.word	0x0800489d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004578:	b29b      	uxth	r3, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 808e 	beq.w	80046a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800458c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8089 	beq.w	80046a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80045ba:	647a      	str	r2, [r7, #68]	; 0x44
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e3      	bne.n	8004596 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	623b      	str	r3, [r7, #32]
   return(result);
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3314      	adds	r3, #20
 80045ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045f2:	633a      	str	r2, [r7, #48]	; 0x30
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	60fb      	str	r3, [r7, #12]
   return(result);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0310 	bic.w	r3, r3, #16
 800462a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004638:	61fa      	str	r2, [r7, #28]
 800463a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69b9      	ldr	r1, [r7, #24]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	617b      	str	r3, [r7, #20]
   return(result);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e3      	bne.n	8004614 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f844 	bl	80046e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800465e:	e023      	b.n	80046a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_UART_IRQHandler+0x4f4>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f923 	bl	80048c4 <UART_Transmit_IT>
    return;
 800467e:	e014      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <HAL_UART_IRQHandler+0x51e>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f962 	bl	8004962 <UART_EndTransmit_IT>
    return;
 800469e:	e004      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
    return;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
      return;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <HAL_UART_IRQHandler+0x51e>
      return;
 80046a8:	bf00      	nop
  }
}
 80046aa:	37e8      	adds	r7, #232	; 0xe8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b090      	sub	sp, #64	; 0x40
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470c:	e050      	b.n	80047b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d04c      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <UART_WaitOnFlagUntilTimeout+0x30>
 800471c:	f7fe f82c 	bl	8002778 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004728:	429a      	cmp	r2, r3
 800472a:	d241      	bcs.n	80047b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800474c:	637a      	str	r2, [r7, #52]	; 0x34
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	613b      	str	r3, [r7, #16]
   return(result);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3314      	adds	r3, #20
 800477e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004780:	623a      	str	r2, [r7, #32]
 8004782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	69f9      	ldr	r1, [r7, #28]
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	61bb      	str	r3, [r7, #24]
   return(result);
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e5      	bne.n	8004760 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e00f      	b.n	80047d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4013      	ands	r3, r2
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	429a      	cmp	r2, r3
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d09f      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3740      	adds	r7, #64	; 0x40
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b095      	sub	sp, #84	; 0x54
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004800:	643a      	str	r2, [r7, #64]	; 0x40
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	61fb      	str	r3, [r7, #28]
   return(result);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	2b01      	cmp	r3, #1
 800484e:	d119      	bne.n	8004884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	647b      	str	r3, [r7, #68]	; 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004870:	61ba      	str	r2, [r7, #24]
 8004872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	613b      	str	r3, [r7, #16]
   return(result);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e5      	bne.n	8004850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004892:	bf00      	nop
 8004894:	3754      	adds	r7, #84	; 0x54
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff ff0c 	bl	80046d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b21      	cmp	r3, #33	; 0x21
 80048d6:	d13e      	bne.n	8004956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e0:	d114      	bne.n	800490c <UART_Transmit_IT+0x48>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d110      	bne.n	800490c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]
 800490a:	e008      	b.n	800491e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	1c59      	adds	r1, r3, #1
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6211      	str	r1, [r2, #32]
 8004916:	781a      	ldrb	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29b      	uxth	r3, r3
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4619      	mov	r1, r3
 800492c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fe94 	bl	80046b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b08c      	sub	sp, #48	; 0x30
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b22      	cmp	r3, #34	; 0x22
 80049a4:	f040 80ae 	bne.w	8004b04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d117      	bne.n	80049e2 <UART_Receive_IT+0x50>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d113      	bne.n	80049e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
 80049e0:	e026      	b.n	8004a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d007      	beq.n	8004a06 <UART_Receive_IT+0x74>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <UART_Receive_IT+0x82>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	e008      	b.n	8004a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d15d      	bne.n	8004b00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0220 	bic.w	r2, r2, #32
 8004a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d135      	bne.n	8004af6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 0310 	bic.w	r3, r3, #16
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	623a      	str	r2, [r7, #32]
 8004ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d10a      	bne.n	8004ae8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fdf9 	bl	80046e6 <HAL_UARTEx_RxEventCallback>
 8004af4:	e002      	b.n	8004afc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fde3 	bl	80046c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e002      	b.n	8004b06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b4a:	f023 030c 	bic.w	r3, r3, #12
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2c      	ldr	r2, [pc, #176]	; (8004c24 <UART_SetConfig+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d103      	bne.n	8004b80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7ff fa02 	bl	8003f80 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	e002      	b.n	8004b86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7ff f9ea 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8004b84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009a      	lsls	r2, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <UART_SetConfig+0x118>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	0119      	lsls	r1, r3, #4
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <UART_SetConfig+0x118>)
 8004bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2064      	movs	r0, #100	; 0x64
 8004bc6:	fb00 f303 	mul.w	r3, r0, r3
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <UART_SetConfig+0x118>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	4419      	add	r1, r3
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009a      	lsls	r2, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <UART_SetConfig+0x118>)
 8004bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	2064      	movs	r0, #100	; 0x64
 8004bfe:	fb00 f303 	mul.w	r3, r0, r3
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	3332      	adds	r3, #50	; 0x32
 8004c08:	4a07      	ldr	r2, [pc, #28]	; (8004c28 <UART_SetConfig+0x118>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	440a      	add	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40013800 	.word	0x40013800
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <atoi>:
 8004c2c:	220a      	movs	r2, #10
 8004c2e:	2100      	movs	r1, #0
 8004c30:	f000 b880 	b.w	8004d34 <strtol>

08004c34 <_strtol_l.constprop.0>:
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3a:	4686      	mov	lr, r0
 8004c3c:	4690      	mov	r8, r2
 8004c3e:	d001      	beq.n	8004c44 <_strtol_l.constprop.0+0x10>
 8004c40:	2b24      	cmp	r3, #36	; 0x24
 8004c42:	d906      	bls.n	8004c52 <_strtol_l.constprop.0+0x1e>
 8004c44:	f001 f872 	bl	8005d2c <__errno>
 8004c48:	2316      	movs	r3, #22
 8004c4a:	6003      	str	r3, [r0, #0]
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	460d      	mov	r5, r1
 8004c54:	4835      	ldr	r0, [pc, #212]	; (8004d2c <_strtol_l.constprop.0+0xf8>)
 8004c56:	462a      	mov	r2, r5
 8004c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c5c:	5d06      	ldrb	r6, [r0, r4]
 8004c5e:	f016 0608 	ands.w	r6, r6, #8
 8004c62:	d1f8      	bne.n	8004c56 <_strtol_l.constprop.0+0x22>
 8004c64:	2c2d      	cmp	r4, #45	; 0x2d
 8004c66:	d12e      	bne.n	8004cc6 <_strtol_l.constprop.0+0x92>
 8004c68:	2601      	movs	r6, #1
 8004c6a:	782c      	ldrb	r4, [r5, #0]
 8004c6c:	1c95      	adds	r5, r2, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d057      	beq.n	8004d22 <_strtol_l.constprop.0+0xee>
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d109      	bne.n	8004c8a <_strtol_l.constprop.0+0x56>
 8004c76:	2c30      	cmp	r4, #48	; 0x30
 8004c78:	d107      	bne.n	8004c8a <_strtol_l.constprop.0+0x56>
 8004c7a:	782a      	ldrb	r2, [r5, #0]
 8004c7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004c80:	2a58      	cmp	r2, #88	; 0x58
 8004c82:	d149      	bne.n	8004d18 <_strtol_l.constprop.0+0xe4>
 8004c84:	2310      	movs	r3, #16
 8004c86:	786c      	ldrb	r4, [r5, #1]
 8004c88:	3502      	adds	r5, #2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004c90:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004c94:	fbbc f9f3 	udiv	r9, ip, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	fb03 ca19 	mls	sl, r3, r9, ip
 8004c9e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004ca2:	2f09      	cmp	r7, #9
 8004ca4:	d814      	bhi.n	8004cd0 <_strtol_l.constprop.0+0x9c>
 8004ca6:	463c      	mov	r4, r7
 8004ca8:	42a3      	cmp	r3, r4
 8004caa:	dd20      	ble.n	8004cee <_strtol_l.constprop.0+0xba>
 8004cac:	1c57      	adds	r7, r2, #1
 8004cae:	d007      	beq.n	8004cc0 <_strtol_l.constprop.0+0x8c>
 8004cb0:	4581      	cmp	r9, r0
 8004cb2:	d319      	bcc.n	8004ce8 <_strtol_l.constprop.0+0xb4>
 8004cb4:	d101      	bne.n	8004cba <_strtol_l.constprop.0+0x86>
 8004cb6:	45a2      	cmp	sl, r4
 8004cb8:	db16      	blt.n	8004ce8 <_strtol_l.constprop.0+0xb4>
 8004cba:	2201      	movs	r2, #1
 8004cbc:	fb00 4003 	mla	r0, r0, r3, r4
 8004cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cc4:	e7eb      	b.n	8004c9e <_strtol_l.constprop.0+0x6a>
 8004cc6:	2c2b      	cmp	r4, #43	; 0x2b
 8004cc8:	bf04      	itt	eq
 8004cca:	782c      	ldrbeq	r4, [r5, #0]
 8004ccc:	1c95      	addeq	r5, r2, #2
 8004cce:	e7ce      	b.n	8004c6e <_strtol_l.constprop.0+0x3a>
 8004cd0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004cd4:	2f19      	cmp	r7, #25
 8004cd6:	d801      	bhi.n	8004cdc <_strtol_l.constprop.0+0xa8>
 8004cd8:	3c37      	subs	r4, #55	; 0x37
 8004cda:	e7e5      	b.n	8004ca8 <_strtol_l.constprop.0+0x74>
 8004cdc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004ce0:	2f19      	cmp	r7, #25
 8004ce2:	d804      	bhi.n	8004cee <_strtol_l.constprop.0+0xba>
 8004ce4:	3c57      	subs	r4, #87	; 0x57
 8004ce6:	e7df      	b.n	8004ca8 <_strtol_l.constprop.0+0x74>
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	e7e8      	b.n	8004cc0 <_strtol_l.constprop.0+0x8c>
 8004cee:	1c53      	adds	r3, r2, #1
 8004cf0:	d108      	bne.n	8004d04 <_strtol_l.constprop.0+0xd0>
 8004cf2:	2322      	movs	r3, #34	; 0x22
 8004cf4:	4660      	mov	r0, ip
 8004cf6:	f8ce 3000 	str.w	r3, [lr]
 8004cfa:	f1b8 0f00 	cmp.w	r8, #0
 8004cfe:	d0a6      	beq.n	8004c4e <_strtol_l.constprop.0+0x1a>
 8004d00:	1e69      	subs	r1, r5, #1
 8004d02:	e006      	b.n	8004d12 <_strtol_l.constprop.0+0xde>
 8004d04:	b106      	cbz	r6, 8004d08 <_strtol_l.constprop.0+0xd4>
 8004d06:	4240      	negs	r0, r0
 8004d08:	f1b8 0f00 	cmp.w	r8, #0
 8004d0c:	d09f      	beq.n	8004c4e <_strtol_l.constprop.0+0x1a>
 8004d0e:	2a00      	cmp	r2, #0
 8004d10:	d1f6      	bne.n	8004d00 <_strtol_l.constprop.0+0xcc>
 8004d12:	f8c8 1000 	str.w	r1, [r8]
 8004d16:	e79a      	b.n	8004c4e <_strtol_l.constprop.0+0x1a>
 8004d18:	2430      	movs	r4, #48	; 0x30
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1b5      	bne.n	8004c8a <_strtol_l.constprop.0+0x56>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	e7b3      	b.n	8004c8a <_strtol_l.constprop.0+0x56>
 8004d22:	2c30      	cmp	r4, #48	; 0x30
 8004d24:	d0a9      	beq.n	8004c7a <_strtol_l.constprop.0+0x46>
 8004d26:	230a      	movs	r3, #10
 8004d28:	e7af      	b.n	8004c8a <_strtol_l.constprop.0+0x56>
 8004d2a:	bf00      	nop
 8004d2c:	0800a2cb 	.word	0x0800a2cb

08004d30 <_strtol_r>:
 8004d30:	f7ff bf80 	b.w	8004c34 <_strtol_l.constprop.0>

08004d34 <strtol>:
 8004d34:	4613      	mov	r3, r2
 8004d36:	460a      	mov	r2, r1
 8004d38:	4601      	mov	r1, r0
 8004d3a:	4802      	ldr	r0, [pc, #8]	; (8004d44 <strtol+0x10>)
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f7ff bf79 	b.w	8004c34 <_strtol_l.constprop.0>
 8004d42:	bf00      	nop
 8004d44:	2000006c 	.word	0x2000006c

08004d48 <__cvt>:
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4e:	461f      	mov	r7, r3
 8004d50:	bfbb      	ittet	lt
 8004d52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d56:	461f      	movlt	r7, r3
 8004d58:	2300      	movge	r3, #0
 8004d5a:	232d      	movlt	r3, #45	; 0x2d
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	4614      	mov	r4, r2
 8004d60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d64:	7013      	strb	r3, [r2, #0]
 8004d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d68:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d6c:	f023 0820 	bic.w	r8, r3, #32
 8004d70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d74:	d005      	beq.n	8004d82 <__cvt+0x3a>
 8004d76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d7a:	d100      	bne.n	8004d7e <__cvt+0x36>
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e000      	b.n	8004d84 <__cvt+0x3c>
 8004d82:	2303      	movs	r3, #3
 8004d84:	aa07      	add	r2, sp, #28
 8004d86:	9204      	str	r2, [sp, #16]
 8004d88:	aa06      	add	r2, sp, #24
 8004d8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d8e:	e9cd 3500 	strd	r3, r5, [sp]
 8004d92:	4622      	mov	r2, r4
 8004d94:	463b      	mov	r3, r7
 8004d96:	f001 f89b 	bl	8005ed0 <_dtoa_r>
 8004d9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d9e:	4606      	mov	r6, r0
 8004da0:	d102      	bne.n	8004da8 <__cvt+0x60>
 8004da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004da4:	07db      	lsls	r3, r3, #31
 8004da6:	d522      	bpl.n	8004dee <__cvt+0xa6>
 8004da8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dac:	eb06 0905 	add.w	r9, r6, r5
 8004db0:	d110      	bne.n	8004dd4 <__cvt+0x8c>
 8004db2:	7833      	ldrb	r3, [r6, #0]
 8004db4:	2b30      	cmp	r3, #48	; 0x30
 8004db6:	d10a      	bne.n	8004dce <__cvt+0x86>
 8004db8:	2200      	movs	r2, #0
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc4:	b918      	cbnz	r0, 8004dce <__cvt+0x86>
 8004dc6:	f1c5 0501 	rsb	r5, r5, #1
 8004dca:	f8ca 5000 	str.w	r5, [sl]
 8004dce:	f8da 3000 	ldr.w	r3, [sl]
 8004dd2:	4499      	add	r9, r3
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8004de0:	b108      	cbz	r0, 8004de6 <__cvt+0x9e>
 8004de2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004de6:	2230      	movs	r2, #48	; 0x30
 8004de8:	9b07      	ldr	r3, [sp, #28]
 8004dea:	454b      	cmp	r3, r9
 8004dec:	d307      	bcc.n	8004dfe <__cvt+0xb6>
 8004dee:	4630      	mov	r0, r6
 8004df0:	9b07      	ldr	r3, [sp, #28]
 8004df2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004df4:	1b9b      	subs	r3, r3, r6
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	b008      	add	sp, #32
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	9107      	str	r1, [sp, #28]
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e7f0      	b.n	8004de8 <__cvt+0xa0>

08004e06 <__exponent>:
 8004e06:	4603      	mov	r3, r0
 8004e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	f803 2b02 	strb.w	r2, [r3], #2
 8004e10:	bfb6      	itet	lt
 8004e12:	222d      	movlt	r2, #45	; 0x2d
 8004e14:	222b      	movge	r2, #43	; 0x2b
 8004e16:	4249      	neglt	r1, r1
 8004e18:	2909      	cmp	r1, #9
 8004e1a:	7042      	strb	r2, [r0, #1]
 8004e1c:	dd2a      	ble.n	8004e74 <__exponent+0x6e>
 8004e1e:	f10d 0207 	add.w	r2, sp, #7
 8004e22:	4617      	mov	r7, r2
 8004e24:	260a      	movs	r6, #10
 8004e26:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e2a:	4694      	mov	ip, r2
 8004e2c:	fb06 1415 	mls	r4, r6, r5, r1
 8004e30:	3430      	adds	r4, #48	; 0x30
 8004e32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e36:	460c      	mov	r4, r1
 8004e38:	2c63      	cmp	r4, #99	; 0x63
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e40:	dcf1      	bgt.n	8004e26 <__exponent+0x20>
 8004e42:	3130      	adds	r1, #48	; 0x30
 8004e44:	f1ac 0402 	sub.w	r4, ip, #2
 8004e48:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	1c41      	adds	r1, r0, #1
 8004e50:	42ba      	cmp	r2, r7
 8004e52:	d30a      	bcc.n	8004e6a <__exponent+0x64>
 8004e54:	f10d 0209 	add.w	r2, sp, #9
 8004e58:	eba2 020c 	sub.w	r2, r2, ip
 8004e5c:	42bc      	cmp	r4, r7
 8004e5e:	bf88      	it	hi
 8004e60:	2200      	movhi	r2, #0
 8004e62:	4413      	add	r3, r2
 8004e64:	1a18      	subs	r0, r3, r0
 8004e66:	b003      	add	sp, #12
 8004e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e72:	e7ed      	b.n	8004e50 <__exponent+0x4a>
 8004e74:	2330      	movs	r3, #48	; 0x30
 8004e76:	3130      	adds	r1, #48	; 0x30
 8004e78:	7083      	strb	r3, [r0, #2]
 8004e7a:	70c1      	strb	r1, [r0, #3]
 8004e7c:	1d03      	adds	r3, r0, #4
 8004e7e:	e7f1      	b.n	8004e64 <__exponent+0x5e>

08004e80 <_printf_float>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	b091      	sub	sp, #68	; 0x44
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	461f      	mov	r7, r3
 8004e90:	4605      	mov	r5, r0
 8004e92:	f000 ff01 	bl	8005c98 <_localeconv_r>
 8004e96:	6803      	ldr	r3, [r0, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9c:	f7fb f958 	bl	8000150 <strlen>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea8:	900a      	str	r0, [sp, #40]	; 0x28
 8004eaa:	3307      	adds	r3, #7
 8004eac:	f023 0307 	bic.w	r3, r3, #7
 8004eb0:	f103 0208 	add.w	r2, r3, #8
 8004eb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8004ebc:	f8c8 2000 	str.w	r2, [r8]
 8004ec0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004ec4:	4652      	mov	r2, sl
 8004ec6:	4643      	mov	r3, r8
 8004ec8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ecc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	4b9c      	ldr	r3, [pc, #624]	; (800514c <_printf_float+0x2cc>)
 8004eda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004edc:	f7fb fd96 	bl	8000a0c <__aeabi_dcmpun>
 8004ee0:	bb70      	cbnz	r0, 8004f40 <_printf_float+0xc0>
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee6:	4650      	mov	r0, sl
 8004ee8:	4b98      	ldr	r3, [pc, #608]	; (800514c <_printf_float+0x2cc>)
 8004eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eec:	f7fb fd70 	bl	80009d0 <__aeabi_dcmple>
 8004ef0:	bb30      	cbnz	r0, 8004f40 <_printf_float+0xc0>
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4650      	mov	r0, sl
 8004ef8:	4641      	mov	r1, r8
 8004efa:	f7fb fd5f 	bl	80009bc <__aeabi_dcmplt>
 8004efe:	b110      	cbz	r0, 8004f06 <_printf_float+0x86>
 8004f00:	232d      	movs	r3, #45	; 0x2d
 8004f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f06:	4a92      	ldr	r2, [pc, #584]	; (8005150 <_printf_float+0x2d0>)
 8004f08:	4b92      	ldr	r3, [pc, #584]	; (8005154 <_printf_float+0x2d4>)
 8004f0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f0e:	bf94      	ite	ls
 8004f10:	4690      	movls	r8, r2
 8004f12:	4698      	movhi	r8, r3
 8004f14:	2303      	movs	r3, #3
 8004f16:	f04f 0a00 	mov.w	sl, #0
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	f02b 0304 	bic.w	r3, fp, #4
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	4633      	mov	r3, r6
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	9700      	str	r7, [sp, #0]
 8004f2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f2c:	f000 f9d6 	bl	80052dc <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	f040 8090 	bne.w	8005056 <_printf_float+0x1d6>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	b011      	add	sp, #68	; 0x44
 8004f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f40:	4652      	mov	r2, sl
 8004f42:	4643      	mov	r3, r8
 8004f44:	4650      	mov	r0, sl
 8004f46:	4641      	mov	r1, r8
 8004f48:	f7fb fd60 	bl	8000a0c <__aeabi_dcmpun>
 8004f4c:	b148      	cbz	r0, 8004f62 <_printf_float+0xe2>
 8004f4e:	f1b8 0f00 	cmp.w	r8, #0
 8004f52:	bfb8      	it	lt
 8004f54:	232d      	movlt	r3, #45	; 0x2d
 8004f56:	4a80      	ldr	r2, [pc, #512]	; (8005158 <_printf_float+0x2d8>)
 8004f58:	bfb8      	it	lt
 8004f5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	; (800515c <_printf_float+0x2dc>)
 8004f60:	e7d3      	b.n	8004f0a <_printf_float+0x8a>
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	d142      	bne.n	8004ff2 <_printf_float+0x172>
 8004f6c:	2306      	movs	r3, #6
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	9206      	str	r2, [sp, #24]
 8004f74:	aa0e      	add	r2, sp, #56	; 0x38
 8004f76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f7a:	aa0d      	add	r2, sp, #52	; 0x34
 8004f7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f80:	9203      	str	r2, [sp, #12]
 8004f82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	4652      	mov	r2, sl
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4628      	mov	r0, r5
 8004f94:	4643      	mov	r3, r8
 8004f96:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f98:	f7ff fed6 	bl	8004d48 <__cvt>
 8004f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f9e:	4680      	mov	r8, r0
 8004fa0:	2947      	cmp	r1, #71	; 0x47
 8004fa2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fa4:	d108      	bne.n	8004fb8 <_printf_float+0x138>
 8004fa6:	1cc8      	adds	r0, r1, #3
 8004fa8:	db02      	blt.n	8004fb0 <_printf_float+0x130>
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	4299      	cmp	r1, r3
 8004fae:	dd40      	ble.n	8005032 <_printf_float+0x1b2>
 8004fb0:	f1a9 0902 	sub.w	r9, r9, #2
 8004fb4:	fa5f f989 	uxtb.w	r9, r9
 8004fb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fbc:	d81f      	bhi.n	8004ffe <_printf_float+0x17e>
 8004fbe:	464a      	mov	r2, r9
 8004fc0:	3901      	subs	r1, #1
 8004fc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fc6:	910d      	str	r1, [sp, #52]	; 0x34
 8004fc8:	f7ff ff1d 	bl	8004e06 <__exponent>
 8004fcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fce:	4682      	mov	sl, r0
 8004fd0:	1813      	adds	r3, r2, r0
 8004fd2:	2a01      	cmp	r2, #1
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	dc02      	bgt.n	8004fde <_printf_float+0x15e>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	07d2      	lsls	r2, r2, #31
 8004fdc:	d501      	bpl.n	8004fe2 <_printf_float+0x162>
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d09b      	beq.n	8004f22 <_printf_float+0xa2>
 8004fea:	232d      	movs	r3, #45	; 0x2d
 8004fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff0:	e797      	b.n	8004f22 <_printf_float+0xa2>
 8004ff2:	2947      	cmp	r1, #71	; 0x47
 8004ff4:	d1bc      	bne.n	8004f70 <_printf_float+0xf0>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ba      	bne.n	8004f70 <_printf_float+0xf0>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e7b7      	b.n	8004f6e <_printf_float+0xee>
 8004ffe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005002:	d118      	bne.n	8005036 <_printf_float+0x1b6>
 8005004:	2900      	cmp	r1, #0
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	dd0b      	ble.n	8005022 <_printf_float+0x1a2>
 800500a:	6121      	str	r1, [r4, #16]
 800500c:	b913      	cbnz	r3, 8005014 <_printf_float+0x194>
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	07d0      	lsls	r0, r2, #31
 8005012:	d502      	bpl.n	800501a <_printf_float+0x19a>
 8005014:	3301      	adds	r3, #1
 8005016:	440b      	add	r3, r1
 8005018:	6123      	str	r3, [r4, #16]
 800501a:	f04f 0a00 	mov.w	sl, #0
 800501e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005020:	e7df      	b.n	8004fe2 <_printf_float+0x162>
 8005022:	b913      	cbnz	r3, 800502a <_printf_float+0x1aa>
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	07d2      	lsls	r2, r2, #31
 8005028:	d501      	bpl.n	800502e <_printf_float+0x1ae>
 800502a:	3302      	adds	r3, #2
 800502c:	e7f4      	b.n	8005018 <_printf_float+0x198>
 800502e:	2301      	movs	r3, #1
 8005030:	e7f2      	b.n	8005018 <_printf_float+0x198>
 8005032:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005038:	4299      	cmp	r1, r3
 800503a:	db05      	blt.n	8005048 <_printf_float+0x1c8>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	6121      	str	r1, [r4, #16]
 8005040:	07d8      	lsls	r0, r3, #31
 8005042:	d5ea      	bpl.n	800501a <_printf_float+0x19a>
 8005044:	1c4b      	adds	r3, r1, #1
 8005046:	e7e7      	b.n	8005018 <_printf_float+0x198>
 8005048:	2900      	cmp	r1, #0
 800504a:	bfcc      	ite	gt
 800504c:	2201      	movgt	r2, #1
 800504e:	f1c1 0202 	rsble	r2, r1, #2
 8005052:	4413      	add	r3, r2
 8005054:	e7e0      	b.n	8005018 <_printf_float+0x198>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	055a      	lsls	r2, r3, #21
 800505a:	d407      	bmi.n	800506c <_printf_float+0x1ec>
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	4642      	mov	r2, r8
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	d12b      	bne.n	80050c2 <_printf_float+0x242>
 800506a:	e764      	b.n	8004f36 <_printf_float+0xb6>
 800506c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005070:	f240 80dd 	bls.w	800522e <_printf_float+0x3ae>
 8005074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005078:	2200      	movs	r2, #0
 800507a:	2300      	movs	r3, #0
 800507c:	f7fb fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8005080:	2800      	cmp	r0, #0
 8005082:	d033      	beq.n	80050ec <_printf_float+0x26c>
 8005084:	2301      	movs	r3, #1
 8005086:	4631      	mov	r1, r6
 8005088:	4628      	mov	r0, r5
 800508a:	4a35      	ldr	r2, [pc, #212]	; (8005160 <_printf_float+0x2e0>)
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	f43f af51 	beq.w	8004f36 <_printf_float+0xb6>
 8005094:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005098:	429a      	cmp	r2, r3
 800509a:	db02      	blt.n	80050a2 <_printf_float+0x222>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07d8      	lsls	r0, r3, #31
 80050a0:	d50f      	bpl.n	80050c2 <_printf_float+0x242>
 80050a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f af42 	beq.w	8004f36 <_printf_float+0xb6>
 80050b2:	f04f 0800 	mov.w	r8, #0
 80050b6:	f104 091a 	add.w	r9, r4, #26
 80050ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050bc:	3b01      	subs	r3, #1
 80050be:	4543      	cmp	r3, r8
 80050c0:	dc09      	bgt.n	80050d6 <_printf_float+0x256>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	079b      	lsls	r3, r3, #30
 80050c6:	f100 8104 	bmi.w	80052d2 <_printf_float+0x452>
 80050ca:	68e0      	ldr	r0, [r4, #12]
 80050cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050ce:	4298      	cmp	r0, r3
 80050d0:	bfb8      	it	lt
 80050d2:	4618      	movlt	r0, r3
 80050d4:	e731      	b.n	8004f3a <_printf_float+0xba>
 80050d6:	2301      	movs	r3, #1
 80050d8:	464a      	mov	r2, r9
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f af28 	beq.w	8004f36 <_printf_float+0xb6>
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	e7e6      	b.n	80050ba <_printf_float+0x23a>
 80050ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dc38      	bgt.n	8005164 <_printf_float+0x2e4>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <_printf_float+0x2e0>)
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f af1a 	beq.w	8004f36 <_printf_float+0xb6>
 8005102:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005106:	4313      	orrs	r3, r2
 8005108:	d102      	bne.n	8005110 <_printf_float+0x290>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	07d9      	lsls	r1, r3, #31
 800510e:	d5d8      	bpl.n	80050c2 <_printf_float+0x242>
 8005110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	f43f af0b 	beq.w	8004f36 <_printf_float+0xb6>
 8005120:	f04f 0900 	mov.w	r9, #0
 8005124:	f104 0a1a 	add.w	sl, r4, #26
 8005128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800512a:	425b      	negs	r3, r3
 800512c:	454b      	cmp	r3, r9
 800512e:	dc01      	bgt.n	8005134 <_printf_float+0x2b4>
 8005130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005132:	e794      	b.n	800505e <_printf_float+0x1de>
 8005134:	2301      	movs	r3, #1
 8005136:	4652      	mov	r2, sl
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f aef9 	beq.w	8004f36 <_printf_float+0xb6>
 8005144:	f109 0901 	add.w	r9, r9, #1
 8005148:	e7ee      	b.n	8005128 <_printf_float+0x2a8>
 800514a:	bf00      	nop
 800514c:	7fefffff 	.word	0x7fefffff
 8005150:	0800a3cb 	.word	0x0800a3cb
 8005154:	0800a3cf 	.word	0x0800a3cf
 8005158:	0800a3d3 	.word	0x0800a3d3
 800515c:	0800a3d7 	.word	0x0800a3d7
 8005160:	0800a3db 	.word	0x0800a3db
 8005164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005168:	429a      	cmp	r2, r3
 800516a:	bfa8      	it	ge
 800516c:	461a      	movge	r2, r3
 800516e:	2a00      	cmp	r2, #0
 8005170:	4691      	mov	r9, r2
 8005172:	dc37      	bgt.n	80051e4 <_printf_float+0x364>
 8005174:	f04f 0b00 	mov.w	fp, #0
 8005178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800517c:	f104 021a 	add.w	r2, r4, #26
 8005180:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005184:	ebaa 0309 	sub.w	r3, sl, r9
 8005188:	455b      	cmp	r3, fp
 800518a:	dc33      	bgt.n	80051f4 <_printf_float+0x374>
 800518c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005190:	429a      	cmp	r2, r3
 8005192:	db3b      	blt.n	800520c <_printf_float+0x38c>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	07da      	lsls	r2, r3, #31
 8005198:	d438      	bmi.n	800520c <_printf_float+0x38c>
 800519a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800519e:	eba2 0903 	sub.w	r9, r2, r3
 80051a2:	eba2 020a 	sub.w	r2, r2, sl
 80051a6:	4591      	cmp	r9, r2
 80051a8:	bfa8      	it	ge
 80051aa:	4691      	movge	r9, r2
 80051ac:	f1b9 0f00 	cmp.w	r9, #0
 80051b0:	dc34      	bgt.n	800521c <_printf_float+0x39c>
 80051b2:	f04f 0800 	mov.w	r8, #0
 80051b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ba:	f104 0a1a 	add.w	sl, r4, #26
 80051be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	eba3 0309 	sub.w	r3, r3, r9
 80051c8:	4543      	cmp	r3, r8
 80051ca:	f77f af7a 	ble.w	80050c2 <_printf_float+0x242>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4652      	mov	r2, sl
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	47b8      	blx	r7
 80051d8:	3001      	adds	r0, #1
 80051da:	f43f aeac 	beq.w	8004f36 <_printf_float+0xb6>
 80051de:	f108 0801 	add.w	r8, r8, #1
 80051e2:	e7ec      	b.n	80051be <_printf_float+0x33e>
 80051e4:	4613      	mov	r3, r2
 80051e6:	4631      	mov	r1, r6
 80051e8:	4642      	mov	r2, r8
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	d1c0      	bne.n	8005174 <_printf_float+0x2f4>
 80051f2:	e6a0      	b.n	8004f36 <_printf_float+0xb6>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f ae99 	beq.w	8004f36 <_printf_float+0xb6>
 8005204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005206:	f10b 0b01 	add.w	fp, fp, #1
 800520a:	e7b9      	b.n	8005180 <_printf_float+0x300>
 800520c:	4631      	mov	r1, r6
 800520e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	d1bf      	bne.n	800519a <_printf_float+0x31a>
 800521a:	e68c      	b.n	8004f36 <_printf_float+0xb6>
 800521c:	464b      	mov	r3, r9
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	eb08 020a 	add.w	r2, r8, sl
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	d1c2      	bne.n	80051b2 <_printf_float+0x332>
 800522c:	e683      	b.n	8004f36 <_printf_float+0xb6>
 800522e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005230:	2a01      	cmp	r2, #1
 8005232:	dc01      	bgt.n	8005238 <_printf_float+0x3b8>
 8005234:	07db      	lsls	r3, r3, #31
 8005236:	d539      	bpl.n	80052ac <_printf_float+0x42c>
 8005238:	2301      	movs	r3, #1
 800523a:	4642      	mov	r2, r8
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f ae77 	beq.w	8004f36 <_printf_float+0xb6>
 8005248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f ae6f 	beq.w	8004f36 <_printf_float+0xb6>
 8005258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800525c:	2200      	movs	r2, #0
 800525e:	2300      	movs	r3, #0
 8005260:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005264:	f7fb fba0 	bl	80009a8 <__aeabi_dcmpeq>
 8005268:	b9d8      	cbnz	r0, 80052a2 <_printf_float+0x422>
 800526a:	f109 33ff 	add.w	r3, r9, #4294967295
 800526e:	f108 0201 	add.w	r2, r8, #1
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	47b8      	blx	r7
 8005278:	3001      	adds	r0, #1
 800527a:	d10e      	bne.n	800529a <_printf_float+0x41a>
 800527c:	e65b      	b.n	8004f36 <_printf_float+0xb6>
 800527e:	2301      	movs	r3, #1
 8005280:	464a      	mov	r2, r9
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae54 	beq.w	8004f36 <_printf_float+0xb6>
 800528e:	f108 0801 	add.w	r8, r8, #1
 8005292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005294:	3b01      	subs	r3, #1
 8005296:	4543      	cmp	r3, r8
 8005298:	dcf1      	bgt.n	800527e <_printf_float+0x3fe>
 800529a:	4653      	mov	r3, sl
 800529c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052a0:	e6de      	b.n	8005060 <_printf_float+0x1e0>
 80052a2:	f04f 0800 	mov.w	r8, #0
 80052a6:	f104 091a 	add.w	r9, r4, #26
 80052aa:	e7f2      	b.n	8005292 <_printf_float+0x412>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4642      	mov	r2, r8
 80052b0:	e7df      	b.n	8005272 <_printf_float+0x3f2>
 80052b2:	2301      	movs	r3, #1
 80052b4:	464a      	mov	r2, r9
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	f43f ae3a 	beq.w	8004f36 <_printf_float+0xb6>
 80052c2:	f108 0801 	add.w	r8, r8, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	4543      	cmp	r3, r8
 80052ce:	dcf0      	bgt.n	80052b2 <_printf_float+0x432>
 80052d0:	e6fb      	b.n	80050ca <_printf_float+0x24a>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	f104 0919 	add.w	r9, r4, #25
 80052da:	e7f4      	b.n	80052c6 <_printf_float+0x446>

080052dc <_printf_common>:
 80052dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	4616      	mov	r6, r2
 80052e2:	4699      	mov	r9, r3
 80052e4:	688a      	ldr	r2, [r1, #8]
 80052e6:	690b      	ldr	r3, [r1, #16]
 80052e8:	4607      	mov	r7, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	bfb8      	it	lt
 80052ee:	4613      	movlt	r3, r2
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052f6:	460c      	mov	r4, r1
 80052f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052fc:	b10a      	cbz	r2, 8005302 <_printf_common+0x26>
 80052fe:	3301      	adds	r3, #1
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	0699      	lsls	r1, r3, #26
 8005306:	bf42      	ittt	mi
 8005308:	6833      	ldrmi	r3, [r6, #0]
 800530a:	3302      	addmi	r3, #2
 800530c:	6033      	strmi	r3, [r6, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	f015 0506 	ands.w	r5, r5, #6
 8005314:	d106      	bne.n	8005324 <_printf_common+0x48>
 8005316:	f104 0a19 	add.w	sl, r4, #25
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	6832      	ldr	r2, [r6, #0]
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	42ab      	cmp	r3, r5
 8005322:	dc2b      	bgt.n	800537c <_printf_common+0xa0>
 8005324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005328:	1e13      	subs	r3, r2, #0
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	bf18      	it	ne
 800532e:	2301      	movne	r3, #1
 8005330:	0692      	lsls	r2, r2, #26
 8005332:	d430      	bmi.n	8005396 <_printf_common+0xba>
 8005334:	4649      	mov	r1, r9
 8005336:	4638      	mov	r0, r7
 8005338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800533c:	47c0      	blx	r8
 800533e:	3001      	adds	r0, #1
 8005340:	d023      	beq.n	800538a <_printf_common+0xae>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	2b04      	cmp	r3, #4
 800534c:	bf14      	ite	ne
 800534e:	2500      	movne	r5, #0
 8005350:	6833      	ldreq	r3, [r6, #0]
 8005352:	f04f 0600 	mov.w	r6, #0
 8005356:	bf08      	it	eq
 8005358:	68e5      	ldreq	r5, [r4, #12]
 800535a:	f104 041a 	add.w	r4, r4, #26
 800535e:	bf08      	it	eq
 8005360:	1aed      	subeq	r5, r5, r3
 8005362:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005366:	bf08      	it	eq
 8005368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800536c:	4293      	cmp	r3, r2
 800536e:	bfc4      	itt	gt
 8005370:	1a9b      	subgt	r3, r3, r2
 8005372:	18ed      	addgt	r5, r5, r3
 8005374:	42b5      	cmp	r5, r6
 8005376:	d11a      	bne.n	80053ae <_printf_common+0xd2>
 8005378:	2000      	movs	r0, #0
 800537a:	e008      	b.n	800538e <_printf_common+0xb2>
 800537c:	2301      	movs	r3, #1
 800537e:	4652      	mov	r2, sl
 8005380:	4649      	mov	r1, r9
 8005382:	4638      	mov	r0, r7
 8005384:	47c0      	blx	r8
 8005386:	3001      	adds	r0, #1
 8005388:	d103      	bne.n	8005392 <_printf_common+0xb6>
 800538a:	f04f 30ff 	mov.w	r0, #4294967295
 800538e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005392:	3501      	adds	r5, #1
 8005394:	e7c1      	b.n	800531a <_printf_common+0x3e>
 8005396:	2030      	movs	r0, #48	; 0x30
 8005398:	18e1      	adds	r1, r4, r3
 800539a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053a4:	4422      	add	r2, r4
 80053a6:	3302      	adds	r3, #2
 80053a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053ac:	e7c2      	b.n	8005334 <_printf_common+0x58>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4622      	mov	r2, r4
 80053b2:	4649      	mov	r1, r9
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c0      	blx	r8
 80053b8:	3001      	adds	r0, #1
 80053ba:	d0e6      	beq.n	800538a <_printf_common+0xae>
 80053bc:	3601      	adds	r6, #1
 80053be:	e7d9      	b.n	8005374 <_printf_common+0x98>

080053c0 <_printf_i>:
 80053c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	7e0f      	ldrb	r7, [r1, #24]
 80053c6:	4691      	mov	r9, r2
 80053c8:	2f78      	cmp	r7, #120	; 0x78
 80053ca:	4680      	mov	r8, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	469a      	mov	sl, r3
 80053d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053d6:	d807      	bhi.n	80053e8 <_printf_i+0x28>
 80053d8:	2f62      	cmp	r7, #98	; 0x62
 80053da:	d80a      	bhi.n	80053f2 <_printf_i+0x32>
 80053dc:	2f00      	cmp	r7, #0
 80053de:	f000 80d5 	beq.w	800558c <_printf_i+0x1cc>
 80053e2:	2f58      	cmp	r7, #88	; 0x58
 80053e4:	f000 80c1 	beq.w	800556a <_printf_i+0x1aa>
 80053e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053f0:	e03a      	b.n	8005468 <_printf_i+0xa8>
 80053f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053f6:	2b15      	cmp	r3, #21
 80053f8:	d8f6      	bhi.n	80053e8 <_printf_i+0x28>
 80053fa:	a101      	add	r1, pc, #4	; (adr r1, 8005400 <_printf_i+0x40>)
 80053fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005400:	08005459 	.word	0x08005459
 8005404:	0800546d 	.word	0x0800546d
 8005408:	080053e9 	.word	0x080053e9
 800540c:	080053e9 	.word	0x080053e9
 8005410:	080053e9 	.word	0x080053e9
 8005414:	080053e9 	.word	0x080053e9
 8005418:	0800546d 	.word	0x0800546d
 800541c:	080053e9 	.word	0x080053e9
 8005420:	080053e9 	.word	0x080053e9
 8005424:	080053e9 	.word	0x080053e9
 8005428:	080053e9 	.word	0x080053e9
 800542c:	08005573 	.word	0x08005573
 8005430:	08005499 	.word	0x08005499
 8005434:	0800552d 	.word	0x0800552d
 8005438:	080053e9 	.word	0x080053e9
 800543c:	080053e9 	.word	0x080053e9
 8005440:	08005595 	.word	0x08005595
 8005444:	080053e9 	.word	0x080053e9
 8005448:	08005499 	.word	0x08005499
 800544c:	080053e9 	.word	0x080053e9
 8005450:	080053e9 	.word	0x080053e9
 8005454:	08005535 	.word	0x08005535
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	602a      	str	r2, [r5, #0]
 8005460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005468:	2301      	movs	r3, #1
 800546a:	e0a0      	b.n	80055ae <_printf_i+0x1ee>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	0607      	lsls	r7, r0, #24
 8005472:	f103 0104 	add.w	r1, r3, #4
 8005476:	6029      	str	r1, [r5, #0]
 8005478:	d501      	bpl.n	800547e <_printf_i+0xbe>
 800547a:	681e      	ldr	r6, [r3, #0]
 800547c:	e003      	b.n	8005486 <_printf_i+0xc6>
 800547e:	0646      	lsls	r6, r0, #25
 8005480:	d5fb      	bpl.n	800547a <_printf_i+0xba>
 8005482:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005486:	2e00      	cmp	r6, #0
 8005488:	da03      	bge.n	8005492 <_printf_i+0xd2>
 800548a:	232d      	movs	r3, #45	; 0x2d
 800548c:	4276      	negs	r6, r6
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005492:	230a      	movs	r3, #10
 8005494:	4859      	ldr	r0, [pc, #356]	; (80055fc <_printf_i+0x23c>)
 8005496:	e012      	b.n	80054be <_printf_i+0xfe>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	6820      	ldr	r0, [r4, #0]
 800549c:	1d19      	adds	r1, r3, #4
 800549e:	6029      	str	r1, [r5, #0]
 80054a0:	0605      	lsls	r5, r0, #24
 80054a2:	d501      	bpl.n	80054a8 <_printf_i+0xe8>
 80054a4:	681e      	ldr	r6, [r3, #0]
 80054a6:	e002      	b.n	80054ae <_printf_i+0xee>
 80054a8:	0641      	lsls	r1, r0, #25
 80054aa:	d5fb      	bpl.n	80054a4 <_printf_i+0xe4>
 80054ac:	881e      	ldrh	r6, [r3, #0]
 80054ae:	2f6f      	cmp	r7, #111	; 0x6f
 80054b0:	bf0c      	ite	eq
 80054b2:	2308      	moveq	r3, #8
 80054b4:	230a      	movne	r3, #10
 80054b6:	4851      	ldr	r0, [pc, #324]	; (80055fc <_printf_i+0x23c>)
 80054b8:	2100      	movs	r1, #0
 80054ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054be:	6865      	ldr	r5, [r4, #4]
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	bfa8      	it	ge
 80054c4:	6821      	ldrge	r1, [r4, #0]
 80054c6:	60a5      	str	r5, [r4, #8]
 80054c8:	bfa4      	itt	ge
 80054ca:	f021 0104 	bicge.w	r1, r1, #4
 80054ce:	6021      	strge	r1, [r4, #0]
 80054d0:	b90e      	cbnz	r6, 80054d6 <_printf_i+0x116>
 80054d2:	2d00      	cmp	r5, #0
 80054d4:	d04b      	beq.n	800556e <_printf_i+0x1ae>
 80054d6:	4615      	mov	r5, r2
 80054d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80054dc:	fb03 6711 	mls	r7, r3, r1, r6
 80054e0:	5dc7      	ldrb	r7, [r0, r7]
 80054e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054e6:	4637      	mov	r7, r6
 80054e8:	42bb      	cmp	r3, r7
 80054ea:	460e      	mov	r6, r1
 80054ec:	d9f4      	bls.n	80054d8 <_printf_i+0x118>
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d10b      	bne.n	800550a <_printf_i+0x14a>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	07de      	lsls	r6, r3, #31
 80054f6:	d508      	bpl.n	800550a <_printf_i+0x14a>
 80054f8:	6923      	ldr	r3, [r4, #16]
 80054fa:	6861      	ldr	r1, [r4, #4]
 80054fc:	4299      	cmp	r1, r3
 80054fe:	bfde      	ittt	le
 8005500:	2330      	movle	r3, #48	; 0x30
 8005502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800550a:	1b52      	subs	r2, r2, r5
 800550c:	6122      	str	r2, [r4, #16]
 800550e:	464b      	mov	r3, r9
 8005510:	4621      	mov	r1, r4
 8005512:	4640      	mov	r0, r8
 8005514:	f8cd a000 	str.w	sl, [sp]
 8005518:	aa03      	add	r2, sp, #12
 800551a:	f7ff fedf 	bl	80052dc <_printf_common>
 800551e:	3001      	adds	r0, #1
 8005520:	d14a      	bne.n	80055b8 <_printf_i+0x1f8>
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	b004      	add	sp, #16
 8005528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	f043 0320 	orr.w	r3, r3, #32
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	2778      	movs	r7, #120	; 0x78
 8005536:	4832      	ldr	r0, [pc, #200]	; (8005600 <_printf_i+0x240>)
 8005538:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	6829      	ldr	r1, [r5, #0]
 8005540:	061f      	lsls	r7, r3, #24
 8005542:	f851 6b04 	ldr.w	r6, [r1], #4
 8005546:	d402      	bmi.n	800554e <_printf_i+0x18e>
 8005548:	065f      	lsls	r7, r3, #25
 800554a:	bf48      	it	mi
 800554c:	b2b6      	uxthmi	r6, r6
 800554e:	07df      	lsls	r7, r3, #31
 8005550:	bf48      	it	mi
 8005552:	f043 0320 	orrmi.w	r3, r3, #32
 8005556:	6029      	str	r1, [r5, #0]
 8005558:	bf48      	it	mi
 800555a:	6023      	strmi	r3, [r4, #0]
 800555c:	b91e      	cbnz	r6, 8005566 <_printf_i+0x1a6>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	f023 0320 	bic.w	r3, r3, #32
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	2310      	movs	r3, #16
 8005568:	e7a6      	b.n	80054b8 <_printf_i+0xf8>
 800556a:	4824      	ldr	r0, [pc, #144]	; (80055fc <_printf_i+0x23c>)
 800556c:	e7e4      	b.n	8005538 <_printf_i+0x178>
 800556e:	4615      	mov	r5, r2
 8005570:	e7bd      	b.n	80054ee <_printf_i+0x12e>
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	6826      	ldr	r6, [r4, #0]
 8005576:	1d18      	adds	r0, r3, #4
 8005578:	6961      	ldr	r1, [r4, #20]
 800557a:	6028      	str	r0, [r5, #0]
 800557c:	0635      	lsls	r5, r6, #24
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	d501      	bpl.n	8005586 <_printf_i+0x1c6>
 8005582:	6019      	str	r1, [r3, #0]
 8005584:	e002      	b.n	800558c <_printf_i+0x1cc>
 8005586:	0670      	lsls	r0, r6, #25
 8005588:	d5fb      	bpl.n	8005582 <_printf_i+0x1c2>
 800558a:	8019      	strh	r1, [r3, #0]
 800558c:	2300      	movs	r3, #0
 800558e:	4615      	mov	r5, r2
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	e7bc      	b.n	800550e <_printf_i+0x14e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	2100      	movs	r1, #0
 8005598:	1d1a      	adds	r2, r3, #4
 800559a:	602a      	str	r2, [r5, #0]
 800559c:	681d      	ldr	r5, [r3, #0]
 800559e:	6862      	ldr	r2, [r4, #4]
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 fbf8 	bl	8005d96 <memchr>
 80055a6:	b108      	cbz	r0, 80055ac <_printf_i+0x1ec>
 80055a8:	1b40      	subs	r0, r0, r5
 80055aa:	6060      	str	r0, [r4, #4]
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	2300      	movs	r3, #0
 80055b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b6:	e7aa      	b.n	800550e <_printf_i+0x14e>
 80055b8:	462a      	mov	r2, r5
 80055ba:	4649      	mov	r1, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	47d0      	blx	sl
 80055c2:	3001      	adds	r0, #1
 80055c4:	d0ad      	beq.n	8005522 <_printf_i+0x162>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	079b      	lsls	r3, r3, #30
 80055ca:	d413      	bmi.n	80055f4 <_printf_i+0x234>
 80055cc:	68e0      	ldr	r0, [r4, #12]
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	4298      	cmp	r0, r3
 80055d2:	bfb8      	it	lt
 80055d4:	4618      	movlt	r0, r3
 80055d6:	e7a6      	b.n	8005526 <_printf_i+0x166>
 80055d8:	2301      	movs	r3, #1
 80055da:	4632      	mov	r2, r6
 80055dc:	4649      	mov	r1, r9
 80055de:	4640      	mov	r0, r8
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d09d      	beq.n	8005522 <_printf_i+0x162>
 80055e6:	3501      	adds	r5, #1
 80055e8:	68e3      	ldr	r3, [r4, #12]
 80055ea:	9903      	ldr	r1, [sp, #12]
 80055ec:	1a5b      	subs	r3, r3, r1
 80055ee:	42ab      	cmp	r3, r5
 80055f0:	dcf2      	bgt.n	80055d8 <_printf_i+0x218>
 80055f2:	e7eb      	b.n	80055cc <_printf_i+0x20c>
 80055f4:	2500      	movs	r5, #0
 80055f6:	f104 0619 	add.w	r6, r4, #25
 80055fa:	e7f5      	b.n	80055e8 <_printf_i+0x228>
 80055fc:	0800a3dd 	.word	0x0800a3dd
 8005600:	0800a3ee 	.word	0x0800a3ee

08005604 <_scanf_float>:
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	b087      	sub	sp, #28
 800560a:	9303      	str	r3, [sp, #12]
 800560c:	688b      	ldr	r3, [r1, #8]
 800560e:	4617      	mov	r7, r2
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005616:	bf85      	ittet	hi
 8005618:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800561c:	195b      	addhi	r3, r3, r5
 800561e:	2300      	movls	r3, #0
 8005620:	9302      	strhi	r3, [sp, #8]
 8005622:	bf88      	it	hi
 8005624:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005628:	468b      	mov	fp, r1
 800562a:	f04f 0500 	mov.w	r5, #0
 800562e:	bf8c      	ite	hi
 8005630:	608b      	strhi	r3, [r1, #8]
 8005632:	9302      	strls	r3, [sp, #8]
 8005634:	680b      	ldr	r3, [r1, #0]
 8005636:	4680      	mov	r8, r0
 8005638:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800563c:	f84b 3b1c 	str.w	r3, [fp], #28
 8005640:	460c      	mov	r4, r1
 8005642:	465e      	mov	r6, fp
 8005644:	46aa      	mov	sl, r5
 8005646:	46a9      	mov	r9, r5
 8005648:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800564c:	9501      	str	r5, [sp, #4]
 800564e:	68a2      	ldr	r2, [r4, #8]
 8005650:	b152      	cbz	r2, 8005668 <_scanf_float+0x64>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b4e      	cmp	r3, #78	; 0x4e
 8005658:	d864      	bhi.n	8005724 <_scanf_float+0x120>
 800565a:	2b40      	cmp	r3, #64	; 0x40
 800565c:	d83c      	bhi.n	80056d8 <_scanf_float+0xd4>
 800565e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005662:	b2c8      	uxtb	r0, r1
 8005664:	280e      	cmp	r0, #14
 8005666:	d93a      	bls.n	80056de <_scanf_float+0xda>
 8005668:	f1b9 0f00 	cmp.w	r9, #0
 800566c:	d003      	beq.n	8005676 <_scanf_float+0x72>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	f10a 3aff 	add.w	sl, sl, #4294967295
 800567a:	f1ba 0f01 	cmp.w	sl, #1
 800567e:	f200 8113 	bhi.w	80058a8 <_scanf_float+0x2a4>
 8005682:	455e      	cmp	r6, fp
 8005684:	f200 8105 	bhi.w	8005892 <_scanf_float+0x28e>
 8005688:	2501      	movs	r5, #1
 800568a:	4628      	mov	r0, r5
 800568c:	b007      	add	sp, #28
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005696:	2a0d      	cmp	r2, #13
 8005698:	d8e6      	bhi.n	8005668 <_scanf_float+0x64>
 800569a:	a101      	add	r1, pc, #4	; (adr r1, 80056a0 <_scanf_float+0x9c>)
 800569c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056a0:	080057df 	.word	0x080057df
 80056a4:	08005669 	.word	0x08005669
 80056a8:	08005669 	.word	0x08005669
 80056ac:	08005669 	.word	0x08005669
 80056b0:	0800583f 	.word	0x0800583f
 80056b4:	08005817 	.word	0x08005817
 80056b8:	08005669 	.word	0x08005669
 80056bc:	08005669 	.word	0x08005669
 80056c0:	080057ed 	.word	0x080057ed
 80056c4:	08005669 	.word	0x08005669
 80056c8:	08005669 	.word	0x08005669
 80056cc:	08005669 	.word	0x08005669
 80056d0:	08005669 	.word	0x08005669
 80056d4:	080057a5 	.word	0x080057a5
 80056d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80056dc:	e7db      	b.n	8005696 <_scanf_float+0x92>
 80056de:	290e      	cmp	r1, #14
 80056e0:	d8c2      	bhi.n	8005668 <_scanf_float+0x64>
 80056e2:	a001      	add	r0, pc, #4	; (adr r0, 80056e8 <_scanf_float+0xe4>)
 80056e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056e8:	08005797 	.word	0x08005797
 80056ec:	08005669 	.word	0x08005669
 80056f0:	08005797 	.word	0x08005797
 80056f4:	0800582b 	.word	0x0800582b
 80056f8:	08005669 	.word	0x08005669
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005781 	.word	0x08005781
 8005704:	08005781 	.word	0x08005781
 8005708:	08005781 	.word	0x08005781
 800570c:	08005781 	.word	0x08005781
 8005710:	08005781 	.word	0x08005781
 8005714:	08005781 	.word	0x08005781
 8005718:	08005781 	.word	0x08005781
 800571c:	08005781 	.word	0x08005781
 8005720:	08005781 	.word	0x08005781
 8005724:	2b6e      	cmp	r3, #110	; 0x6e
 8005726:	d809      	bhi.n	800573c <_scanf_float+0x138>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d8b2      	bhi.n	8005692 <_scanf_float+0x8e>
 800572c:	2b54      	cmp	r3, #84	; 0x54
 800572e:	d077      	beq.n	8005820 <_scanf_float+0x21c>
 8005730:	2b59      	cmp	r3, #89	; 0x59
 8005732:	d199      	bne.n	8005668 <_scanf_float+0x64>
 8005734:	2d07      	cmp	r5, #7
 8005736:	d197      	bne.n	8005668 <_scanf_float+0x64>
 8005738:	2508      	movs	r5, #8
 800573a:	e029      	b.n	8005790 <_scanf_float+0x18c>
 800573c:	2b74      	cmp	r3, #116	; 0x74
 800573e:	d06f      	beq.n	8005820 <_scanf_float+0x21c>
 8005740:	2b79      	cmp	r3, #121	; 0x79
 8005742:	e7f6      	b.n	8005732 <_scanf_float+0x12e>
 8005744:	6821      	ldr	r1, [r4, #0]
 8005746:	05c8      	lsls	r0, r1, #23
 8005748:	d51a      	bpl.n	8005780 <_scanf_float+0x17c>
 800574a:	9b02      	ldr	r3, [sp, #8]
 800574c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005750:	6021      	str	r1, [r4, #0]
 8005752:	f109 0901 	add.w	r9, r9, #1
 8005756:	b11b      	cbz	r3, 8005760 <_scanf_float+0x15c>
 8005758:	3b01      	subs	r3, #1
 800575a:	3201      	adds	r2, #1
 800575c:	9302      	str	r3, [sp, #8]
 800575e:	60a2      	str	r2, [r4, #8]
 8005760:	68a3      	ldr	r3, [r4, #8]
 8005762:	3b01      	subs	r3, #1
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	3301      	adds	r3, #1
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	607b      	str	r3, [r7, #4]
 8005774:	f340 8084 	ble.w	8005880 <_scanf_float+0x27c>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	e766      	b.n	800564e <_scanf_float+0x4a>
 8005780:	eb1a 0f05 	cmn.w	sl, r5
 8005784:	f47f af70 	bne.w	8005668 <_scanf_float+0x64>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800578e:	6022      	str	r2, [r4, #0]
 8005790:	f806 3b01 	strb.w	r3, [r6], #1
 8005794:	e7e4      	b.n	8005760 <_scanf_float+0x15c>
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	0610      	lsls	r0, r2, #24
 800579a:	f57f af65 	bpl.w	8005668 <_scanf_float+0x64>
 800579e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a2:	e7f4      	b.n	800578e <_scanf_float+0x18a>
 80057a4:	f1ba 0f00 	cmp.w	sl, #0
 80057a8:	d10e      	bne.n	80057c8 <_scanf_float+0x1c4>
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	d10e      	bne.n	80057ce <_scanf_float+0x1ca>
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057ba:	d108      	bne.n	80057ce <_scanf_float+0x1ca>
 80057bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057c0:	f04f 0a01 	mov.w	sl, #1
 80057c4:	6022      	str	r2, [r4, #0]
 80057c6:	e7e3      	b.n	8005790 <_scanf_float+0x18c>
 80057c8:	f1ba 0f02 	cmp.w	sl, #2
 80057cc:	d055      	beq.n	800587a <_scanf_float+0x276>
 80057ce:	2d01      	cmp	r5, #1
 80057d0:	d002      	beq.n	80057d8 <_scanf_float+0x1d4>
 80057d2:	2d04      	cmp	r5, #4
 80057d4:	f47f af48 	bne.w	8005668 <_scanf_float+0x64>
 80057d8:	3501      	adds	r5, #1
 80057da:	b2ed      	uxtb	r5, r5
 80057dc:	e7d8      	b.n	8005790 <_scanf_float+0x18c>
 80057de:	f1ba 0f01 	cmp.w	sl, #1
 80057e2:	f47f af41 	bne.w	8005668 <_scanf_float+0x64>
 80057e6:	f04f 0a02 	mov.w	sl, #2
 80057ea:	e7d1      	b.n	8005790 <_scanf_float+0x18c>
 80057ec:	b97d      	cbnz	r5, 800580e <_scanf_float+0x20a>
 80057ee:	f1b9 0f00 	cmp.w	r9, #0
 80057f2:	f47f af3c 	bne.w	800566e <_scanf_float+0x6a>
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005800:	f47f af39 	bne.w	8005676 <_scanf_float+0x72>
 8005804:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005808:	2501      	movs	r5, #1
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	e7c0      	b.n	8005790 <_scanf_float+0x18c>
 800580e:	2d03      	cmp	r5, #3
 8005810:	d0e2      	beq.n	80057d8 <_scanf_float+0x1d4>
 8005812:	2d05      	cmp	r5, #5
 8005814:	e7de      	b.n	80057d4 <_scanf_float+0x1d0>
 8005816:	2d02      	cmp	r5, #2
 8005818:	f47f af26 	bne.w	8005668 <_scanf_float+0x64>
 800581c:	2503      	movs	r5, #3
 800581e:	e7b7      	b.n	8005790 <_scanf_float+0x18c>
 8005820:	2d06      	cmp	r5, #6
 8005822:	f47f af21 	bne.w	8005668 <_scanf_float+0x64>
 8005826:	2507      	movs	r5, #7
 8005828:	e7b2      	b.n	8005790 <_scanf_float+0x18c>
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	0591      	lsls	r1, r2, #22
 800582e:	f57f af1b 	bpl.w	8005668 <_scanf_float+0x64>
 8005832:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005836:	6022      	str	r2, [r4, #0]
 8005838:	f8cd 9004 	str.w	r9, [sp, #4]
 800583c:	e7a8      	b.n	8005790 <_scanf_float+0x18c>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005844:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005848:	d006      	beq.n	8005858 <_scanf_float+0x254>
 800584a:	0550      	lsls	r0, r2, #21
 800584c:	f57f af0c 	bpl.w	8005668 <_scanf_float+0x64>
 8005850:	f1b9 0f00 	cmp.w	r9, #0
 8005854:	f43f af0f 	beq.w	8005676 <_scanf_float+0x72>
 8005858:	0591      	lsls	r1, r2, #22
 800585a:	bf58      	it	pl
 800585c:	9901      	ldrpl	r1, [sp, #4]
 800585e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005862:	bf58      	it	pl
 8005864:	eba9 0101 	subpl.w	r1, r9, r1
 8005868:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800586c:	f04f 0900 	mov.w	r9, #0
 8005870:	bf58      	it	pl
 8005872:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	e78a      	b.n	8005790 <_scanf_float+0x18c>
 800587a:	f04f 0a03 	mov.w	sl, #3
 800587e:	e787      	b.n	8005790 <_scanf_float+0x18c>
 8005880:	4639      	mov	r1, r7
 8005882:	4640      	mov	r0, r8
 8005884:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005888:	4798      	blx	r3
 800588a:	2800      	cmp	r0, #0
 800588c:	f43f aedf 	beq.w	800564e <_scanf_float+0x4a>
 8005890:	e6ea      	b.n	8005668 <_scanf_float+0x64>
 8005892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005896:	463a      	mov	r2, r7
 8005898:	4640      	mov	r0, r8
 800589a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800589e:	4798      	blx	r3
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	e6ec      	b.n	8005682 <_scanf_float+0x7e>
 80058a8:	1e6b      	subs	r3, r5, #1
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d825      	bhi.n	80058fa <_scanf_float+0x2f6>
 80058ae:	2d02      	cmp	r5, #2
 80058b0:	d836      	bhi.n	8005920 <_scanf_float+0x31c>
 80058b2:	455e      	cmp	r6, fp
 80058b4:	f67f aee8 	bls.w	8005688 <_scanf_float+0x84>
 80058b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058bc:	463a      	mov	r2, r7
 80058be:	4640      	mov	r0, r8
 80058c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058c4:	4798      	blx	r3
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	e7f1      	b.n	80058b2 <_scanf_float+0x2ae>
 80058ce:	9802      	ldr	r0, [sp, #8]
 80058d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80058d8:	463a      	mov	r2, r7
 80058da:	9002      	str	r0, [sp, #8]
 80058dc:	4640      	mov	r0, r8
 80058de:	4798      	blx	r3
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ea:	fa5f fa8a 	uxtb.w	sl, sl
 80058ee:	f1ba 0f02 	cmp.w	sl, #2
 80058f2:	d1ec      	bne.n	80058ce <_scanf_float+0x2ca>
 80058f4:	3d03      	subs	r5, #3
 80058f6:	b2ed      	uxtb	r5, r5
 80058f8:	1b76      	subs	r6, r6, r5
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	05da      	lsls	r2, r3, #23
 80058fe:	d52f      	bpl.n	8005960 <_scanf_float+0x35c>
 8005900:	055b      	lsls	r3, r3, #21
 8005902:	d510      	bpl.n	8005926 <_scanf_float+0x322>
 8005904:	455e      	cmp	r6, fp
 8005906:	f67f aebf 	bls.w	8005688 <_scanf_float+0x84>
 800590a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800590e:	463a      	mov	r2, r7
 8005910:	4640      	mov	r0, r8
 8005912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005916:	4798      	blx	r3
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	3b01      	subs	r3, #1
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	e7f1      	b.n	8005904 <_scanf_float+0x300>
 8005920:	46aa      	mov	sl, r5
 8005922:	9602      	str	r6, [sp, #8]
 8005924:	e7df      	b.n	80058e6 <_scanf_float+0x2e2>
 8005926:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	2965      	cmp	r1, #101	; 0x65
 800592e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005932:	f106 35ff 	add.w	r5, r6, #4294967295
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	d00c      	beq.n	8005954 <_scanf_float+0x350>
 800593a:	2945      	cmp	r1, #69	; 0x45
 800593c:	d00a      	beq.n	8005954 <_scanf_float+0x350>
 800593e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005942:	463a      	mov	r2, r7
 8005944:	4640      	mov	r0, r8
 8005946:	4798      	blx	r3
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800594e:	3b01      	subs	r3, #1
 8005950:	1eb5      	subs	r5, r6, #2
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	463a      	mov	r2, r7
 8005956:	4640      	mov	r0, r8
 8005958:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800595c:	4798      	blx	r3
 800595e:	462e      	mov	r6, r5
 8005960:	6825      	ldr	r5, [r4, #0]
 8005962:	f015 0510 	ands.w	r5, r5, #16
 8005966:	d155      	bne.n	8005a14 <_scanf_float+0x410>
 8005968:	7035      	strb	r5, [r6, #0]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005974:	d11d      	bne.n	80059b2 <_scanf_float+0x3ae>
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	454b      	cmp	r3, r9
 800597a:	eba3 0209 	sub.w	r2, r3, r9
 800597e:	d125      	bne.n	80059cc <_scanf_float+0x3c8>
 8005980:	2200      	movs	r2, #0
 8005982:	4659      	mov	r1, fp
 8005984:	4640      	mov	r0, r8
 8005986:	f002 fc37 	bl	80081f8 <_strtod_r>
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	f8d4 c000 	ldr.w	ip, [r4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f01c 0f02 	tst.w	ip, #2
 8005996:	4606      	mov	r6, r0
 8005998:	460f      	mov	r7, r1
 800599a:	f103 0204 	add.w	r2, r3, #4
 800599e:	d020      	beq.n	80059e2 <_scanf_float+0x3de>
 80059a0:	9903      	ldr	r1, [sp, #12]
 80059a2:	600a      	str	r2, [r1, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	e9c3 6700 	strd	r6, r7, [r3]
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60e3      	str	r3, [r4, #12]
 80059b0:	e66b      	b.n	800568a <_scanf_float+0x86>
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0e3      	beq.n	8005980 <_scanf_float+0x37c>
 80059b8:	9905      	ldr	r1, [sp, #20]
 80059ba:	230a      	movs	r3, #10
 80059bc:	462a      	mov	r2, r5
 80059be:	4640      	mov	r0, r8
 80059c0:	3101      	adds	r1, #1
 80059c2:	f7ff f9b5 	bl	8004d30 <_strtol_r>
 80059c6:	9b04      	ldr	r3, [sp, #16]
 80059c8:	9e05      	ldr	r6, [sp, #20]
 80059ca:	1ac2      	subs	r2, r0, r3
 80059cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059d0:	429e      	cmp	r6, r3
 80059d2:	bf28      	it	cs
 80059d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059d8:	4630      	mov	r0, r6
 80059da:	490f      	ldr	r1, [pc, #60]	; (8005a18 <_scanf_float+0x414>)
 80059dc:	f000 f8e2 	bl	8005ba4 <siprintf>
 80059e0:	e7ce      	b.n	8005980 <_scanf_float+0x37c>
 80059e2:	f01c 0f04 	tst.w	ip, #4
 80059e6:	d1db      	bne.n	80059a0 <_scanf_float+0x39c>
 80059e8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80059ec:	f8cc 2000 	str.w	r2, [ip]
 80059f0:	f8d3 8000 	ldr.w	r8, [r3]
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	f7fb f808 	bl	8000a0c <__aeabi_dcmpun>
 80059fc:	b128      	cbz	r0, 8005a0a <_scanf_float+0x406>
 80059fe:	4807      	ldr	r0, [pc, #28]	; (8005a1c <_scanf_float+0x418>)
 8005a00:	f000 f9d8 	bl	8005db4 <nanf>
 8005a04:	f8c8 0000 	str.w	r0, [r8]
 8005a08:	e7cf      	b.n	80059aa <_scanf_float+0x3a6>
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fb f85b 	bl	8000ac8 <__aeabi_d2f>
 8005a12:	e7f7      	b.n	8005a04 <_scanf_float+0x400>
 8005a14:	2500      	movs	r5, #0
 8005a16:	e638      	b.n	800568a <_scanf_float+0x86>
 8005a18:	0800a3ff 	.word	0x0800a3ff
 8005a1c:	0800a694 	.word	0x0800a694

08005a20 <std>:
 8005a20:	2300      	movs	r3, #0
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a2e:	6083      	str	r3, [r0, #8]
 8005a30:	8181      	strh	r1, [r0, #12]
 8005a32:	6643      	str	r3, [r0, #100]	; 0x64
 8005a34:	81c2      	strh	r2, [r0, #14]
 8005a36:	6183      	str	r3, [r0, #24]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	305c      	adds	r0, #92	; 0x5c
 8005a3e:	f000 f914 	bl	8005c6a <memset>
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <std+0x58>)
 8005a44:	6224      	str	r4, [r4, #32]
 8005a46:	6263      	str	r3, [r4, #36]	; 0x24
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <std+0x5c>)
 8005a4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <std+0x60>)
 8005a4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <std+0x64>)
 8005a52:	6323      	str	r3, [r4, #48]	; 0x30
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <std+0x68>)
 8005a56:	429c      	cmp	r4, r3
 8005a58:	d006      	beq.n	8005a68 <std+0x48>
 8005a5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a5e:	4294      	cmp	r4, r2
 8005a60:	d002      	beq.n	8005a68 <std+0x48>
 8005a62:	33d0      	adds	r3, #208	; 0xd0
 8005a64:	429c      	cmp	r4, r3
 8005a66:	d105      	bne.n	8005a74 <std+0x54>
 8005a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a70:	f000 b986 	b.w	8005d80 <__retarget_lock_init_recursive>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	08005be5 	.word	0x08005be5
 8005a7c:	08005c07 	.word	0x08005c07
 8005a80:	08005c3f 	.word	0x08005c3f
 8005a84:	08005c63 	.word	0x08005c63
 8005a88:	200008ac 	.word	0x200008ac

08005a8c <stdio_exit_handler>:
 8005a8c:	4a02      	ldr	r2, [pc, #8]	; (8005a98 <stdio_exit_handler+0xc>)
 8005a8e:	4903      	ldr	r1, [pc, #12]	; (8005a9c <stdio_exit_handler+0x10>)
 8005a90:	4803      	ldr	r0, [pc, #12]	; (8005aa0 <stdio_exit_handler+0x14>)
 8005a92:	f000 b869 	b.w	8005b68 <_fwalk_sglue>
 8005a96:	bf00      	nop
 8005a98:	20000014 	.word	0x20000014
 8005a9c:	080085b9 	.word	0x080085b9
 8005aa0:	20000020 	.word	0x20000020

08005aa4 <cleanup_stdio>:
 8005aa4:	6841      	ldr	r1, [r0, #4]
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <cleanup_stdio+0x34>)
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	4604      	mov	r4, r0
 8005aae:	d001      	beq.n	8005ab4 <cleanup_stdio+0x10>
 8005ab0:	f002 fd82 	bl	80085b8 <_fflush_r>
 8005ab4:	68a1      	ldr	r1, [r4, #8]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <cleanup_stdio+0x38>)
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <cleanup_stdio+0x1e>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f002 fd7b 	bl	80085b8 <_fflush_r>
 8005ac2:	68e1      	ldr	r1, [r4, #12]
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <cleanup_stdio+0x3c>)
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	d004      	beq.n	8005ad4 <cleanup_stdio+0x30>
 8005aca:	4620      	mov	r0, r4
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f002 bd72 	b.w	80085b8 <_fflush_r>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200008ac 	.word	0x200008ac
 8005adc:	20000914 	.word	0x20000914
 8005ae0:	2000097c 	.word	0x2000097c

08005ae4 <global_stdio_init.part.0>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <global_stdio_init.part.0+0x30>)
 8005ae8:	4c0b      	ldr	r4, [pc, #44]	; (8005b18 <global_stdio_init.part.0+0x34>)
 8005aea:	4a0c      	ldr	r2, [pc, #48]	; (8005b1c <global_stdio_init.part.0+0x38>)
 8005aec:	4620      	mov	r0, r4
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	2104      	movs	r1, #4
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7ff ff94 	bl	8005a20 <std>
 8005af8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005afc:	2201      	movs	r2, #1
 8005afe:	2109      	movs	r1, #9
 8005b00:	f7ff ff8e 	bl	8005a20 <std>
 8005b04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b08:	2202      	movs	r2, #2
 8005b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0e:	2112      	movs	r1, #18
 8005b10:	f7ff bf86 	b.w	8005a20 <std>
 8005b14:	200009e4 	.word	0x200009e4
 8005b18:	200008ac 	.word	0x200008ac
 8005b1c:	08005a8d 	.word	0x08005a8d

08005b20 <__sfp_lock_acquire>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__sfp_lock_acquire+0x8>)
 8005b22:	f000 b92e 	b.w	8005d82 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	200009ed 	.word	0x200009ed

08005b2c <__sfp_lock_release>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__sfp_lock_release+0x8>)
 8005b2e:	f000 b929 	b.w	8005d84 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	200009ed 	.word	0x200009ed

08005b38 <__sinit>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f7ff fff0 	bl	8005b20 <__sfp_lock_acquire>
 8005b40:	6a23      	ldr	r3, [r4, #32]
 8005b42:	b11b      	cbz	r3, 8005b4c <__sinit+0x14>
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f7ff bff0 	b.w	8005b2c <__sfp_lock_release>
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <__sinit+0x28>)
 8005b4e:	6223      	str	r3, [r4, #32]
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <__sinit+0x2c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f5      	bne.n	8005b44 <__sinit+0xc>
 8005b58:	f7ff ffc4 	bl	8005ae4 <global_stdio_init.part.0>
 8005b5c:	e7f2      	b.n	8005b44 <__sinit+0xc>
 8005b5e:	bf00      	nop
 8005b60:	08005aa5 	.word	0x08005aa5
 8005b64:	200009e4 	.word	0x200009e4

08005b68 <_fwalk_sglue>:
 8005b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	4688      	mov	r8, r1
 8005b70:	4614      	mov	r4, r2
 8005b72:	2600      	movs	r6, #0
 8005b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b78:	f1b9 0901 	subs.w	r9, r9, #1
 8005b7c:	d505      	bpl.n	8005b8a <_fwalk_sglue+0x22>
 8005b7e:	6824      	ldr	r4, [r4, #0]
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	d1f7      	bne.n	8005b74 <_fwalk_sglue+0xc>
 8005b84:	4630      	mov	r0, r6
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d907      	bls.n	8005ba0 <_fwalk_sglue+0x38>
 8005b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b94:	3301      	adds	r3, #1
 8005b96:	d003      	beq.n	8005ba0 <_fwalk_sglue+0x38>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	4306      	orrs	r6, r0
 8005ba0:	3568      	adds	r5, #104	; 0x68
 8005ba2:	e7e9      	b.n	8005b78 <_fwalk_sglue+0x10>

08005ba4 <siprintf>:
 8005ba4:	b40e      	push	{r1, r2, r3}
 8005ba6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005baa:	b500      	push	{lr}
 8005bac:	b09c      	sub	sp, #112	; 0x70
 8005bae:	ab1d      	add	r3, sp, #116	; 0x74
 8005bb0:	9002      	str	r0, [sp, #8]
 8005bb2:	9006      	str	r0, [sp, #24]
 8005bb4:	9107      	str	r1, [sp, #28]
 8005bb6:	9104      	str	r1, [sp, #16]
 8005bb8:	4808      	ldr	r0, [pc, #32]	; (8005bdc <siprintf+0x38>)
 8005bba:	4909      	ldr	r1, [pc, #36]	; (8005be0 <siprintf+0x3c>)
 8005bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bc0:	9105      	str	r1, [sp, #20]
 8005bc2:	6800      	ldr	r0, [r0, #0]
 8005bc4:	a902      	add	r1, sp, #8
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	f002 fb76 	bl	80082b8 <_svfiprintf_r>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	b01c      	add	sp, #112	; 0x70
 8005bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd8:	b003      	add	sp, #12
 8005bda:	4770      	bx	lr
 8005bdc:	2000006c 	.word	0x2000006c
 8005be0:	ffff0208 	.word	0xffff0208

08005be4 <__sread>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	460c      	mov	r4, r1
 8005be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bec:	f000 f87a 	bl	8005ce4 <_read_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	bfab      	itete	ge
 8005bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf8:	181b      	addge	r3, r3, r0
 8005bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bfe:	bfac      	ite	ge
 8005c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c02:	81a3      	strhlt	r3, [r4, #12]
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <__swrite>:
 8005c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	898b      	ldrh	r3, [r1, #12]
 8005c0e:	4605      	mov	r5, r0
 8005c10:	05db      	lsls	r3, r3, #23
 8005c12:	460c      	mov	r4, r1
 8005c14:	4616      	mov	r6, r2
 8005c16:	d505      	bpl.n	8005c24 <__swrite+0x1e>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c20:	f000 f84e 	bl	8005cc0 <_lseek_r>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	4632      	mov	r2, r6
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2c:	81a3      	strh	r3, [r4, #12]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	463b      	mov	r3, r7
 8005c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3a:	f000 b865 	b.w	8005d08 <_write_r>

08005c3e <__sseek>:
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	460c      	mov	r4, r1
 8005c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c46:	f000 f83b 	bl	8005cc0 <_lseek_r>
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	bf15      	itete	ne
 8005c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c5a:	81a3      	strheq	r3, [r4, #12]
 8005c5c:	bf18      	it	ne
 8005c5e:	81a3      	strhne	r3, [r4, #12]
 8005c60:	bd10      	pop	{r4, pc}

08005c62 <__sclose>:
 8005c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c66:	f000 b81b 	b.w	8005ca0 <_close_r>

08005c6a <memset>:
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d100      	bne.n	8005c74 <memset+0xa>
 8005c72:	4770      	bx	lr
 8005c74:	f803 1b01 	strb.w	r1, [r3], #1
 8005c78:	e7f9      	b.n	8005c6e <memset+0x4>

08005c7a <strcat>:
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	7814      	ldrb	r4, [r2, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	3201      	adds	r2, #1
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	d1fa      	bne.n	8005c7e <strcat+0x4>
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d1f9      	bne.n	8005c8a <strcat+0x10>
 8005c96:	bd10      	pop	{r4, pc}

08005c98 <_localeconv_r>:
 8005c98:	4800      	ldr	r0, [pc, #0]	; (8005c9c <_localeconv_r+0x4>)
 8005c9a:	4770      	bx	lr
 8005c9c:	20000160 	.word	0x20000160

08005ca0 <_close_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4d05      	ldr	r5, [pc, #20]	; (8005cbc <_close_r+0x1c>)
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	f7fc fa74 	bl	8002198 <_close>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_close_r+0x1a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_close_r+0x1a>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	200009e8 	.word	0x200009e8

08005cc0 <_lseek_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4d05      	ldr	r5, [pc, #20]	; (8005ce0 <_lseek_r+0x20>)
 8005ccc:	602a      	str	r2, [r5, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f7fc fa86 	bl	80021e0 <_lseek>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d102      	bne.n	8005cde <_lseek_r+0x1e>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	b103      	cbz	r3, 8005cde <_lseek_r+0x1e>
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	200009e8 	.word	0x200009e8

08005ce4 <_read_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	2200      	movs	r2, #0
 8005cee:	4d05      	ldr	r5, [pc, #20]	; (8005d04 <_read_r+0x20>)
 8005cf0:	602a      	str	r2, [r5, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7fc fa17 	bl	8002126 <_read>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_read_r+0x1e>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_read_r+0x1e>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200009e8 	.word	0x200009e8

08005d08 <_write_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	2200      	movs	r2, #0
 8005d12:	4d05      	ldr	r5, [pc, #20]	; (8005d28 <_write_r+0x20>)
 8005d14:	602a      	str	r2, [r5, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fc fa22 	bl	8002160 <_write>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_write_r+0x1e>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_write_r+0x1e>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200009e8 	.word	0x200009e8

08005d2c <__errno>:
 8005d2c:	4b01      	ldr	r3, [pc, #4]	; (8005d34 <__errno+0x8>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000006c 	.word	0x2000006c

08005d38 <__libc_init_array>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	4d0c      	ldr	r5, [pc, #48]	; (8005d70 <__libc_init_array+0x38>)
 8005d3e:	4c0d      	ldr	r4, [pc, #52]	; (8005d74 <__libc_init_array+0x3c>)
 8005d40:	1b64      	subs	r4, r4, r5
 8005d42:	10a4      	asrs	r4, r4, #2
 8005d44:	42a6      	cmp	r6, r4
 8005d46:	d109      	bne.n	8005d5c <__libc_init_array+0x24>
 8005d48:	f004 fa50 	bl	800a1ec <_init>
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	4d0a      	ldr	r5, [pc, #40]	; (8005d78 <__libc_init_array+0x40>)
 8005d50:	4c0a      	ldr	r4, [pc, #40]	; (8005d7c <__libc_init_array+0x44>)
 8005d52:	1b64      	subs	r4, r4, r5
 8005d54:	10a4      	asrs	r4, r4, #2
 8005d56:	42a6      	cmp	r6, r4
 8005d58:	d105      	bne.n	8005d66 <__libc_init_array+0x2e>
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d60:	4798      	blx	r3
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7ee      	b.n	8005d44 <__libc_init_array+0xc>
 8005d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6a:	4798      	blx	r3
 8005d6c:	3601      	adds	r6, #1
 8005d6e:	e7f2      	b.n	8005d56 <__libc_init_array+0x1e>
 8005d70:	0800a728 	.word	0x0800a728
 8005d74:	0800a728 	.word	0x0800a728
 8005d78:	0800a728 	.word	0x0800a728
 8005d7c:	0800a72c 	.word	0x0800a72c

08005d80 <__retarget_lock_init_recursive>:
 8005d80:	4770      	bx	lr

08005d82 <__retarget_lock_acquire_recursive>:
 8005d82:	4770      	bx	lr

08005d84 <__retarget_lock_release_recursive>:
 8005d84:	4770      	bx	lr

08005d86 <strcpy>:
 8005d86:	4603      	mov	r3, r0
 8005d88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d8c:	f803 2b01 	strb.w	r2, [r3], #1
 8005d90:	2a00      	cmp	r2, #0
 8005d92:	d1f9      	bne.n	8005d88 <strcpy+0x2>
 8005d94:	4770      	bx	lr

08005d96 <memchr>:
 8005d96:	4603      	mov	r3, r0
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	b2c9      	uxtb	r1, r1
 8005d9c:	4402      	add	r2, r0
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	d101      	bne.n	8005da8 <memchr+0x12>
 8005da4:	2000      	movs	r0, #0
 8005da6:	e003      	b.n	8005db0 <memchr+0x1a>
 8005da8:	7804      	ldrb	r4, [r0, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	428c      	cmp	r4, r1
 8005dae:	d1f6      	bne.n	8005d9e <memchr+0x8>
 8005db0:	bd10      	pop	{r4, pc}
	...

08005db4 <nanf>:
 8005db4:	4800      	ldr	r0, [pc, #0]	; (8005db8 <nanf+0x4>)
 8005db6:	4770      	bx	lr
 8005db8:	7fc00000 	.word	0x7fc00000

08005dbc <quorem>:
 8005dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	6903      	ldr	r3, [r0, #16]
 8005dc2:	690c      	ldr	r4, [r1, #16]
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	42a3      	cmp	r3, r4
 8005dc8:	db7f      	blt.n	8005eca <quorem+0x10e>
 8005dca:	3c01      	subs	r4, #1
 8005dcc:	f100 0514 	add.w	r5, r0, #20
 8005dd0:	f101 0814 	add.w	r8, r1, #20
 8005dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005de2:	3301      	adds	r3, #1
 8005de4:	429a      	cmp	r2, r3
 8005de6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005df2:	d331      	bcc.n	8005e58 <quorem+0x9c>
 8005df4:	f04f 0e00 	mov.w	lr, #0
 8005df8:	4640      	mov	r0, r8
 8005dfa:	46ac      	mov	ip, r5
 8005dfc:	46f2      	mov	sl, lr
 8005dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e02:	b293      	uxth	r3, r2
 8005e04:	fb06 e303 	mla	r3, r6, r3, lr
 8005e08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e0c:	0c1a      	lsrs	r2, r3, #16
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	fb06 220e 	mla	r2, r6, lr, r2
 8005e14:	ebaa 0303 	sub.w	r3, sl, r3
 8005e18:	f8dc a000 	ldr.w	sl, [ip]
 8005e1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e20:	fa1f fa8a 	uxth.w	sl, sl
 8005e24:	4453      	add	r3, sl
 8005e26:	f8dc a000 	ldr.w	sl, [ip]
 8005e2a:	b292      	uxth	r2, r2
 8005e2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e3a:	4581      	cmp	r9, r0
 8005e3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e40:	f84c 3b04 	str.w	r3, [ip], #4
 8005e44:	d2db      	bcs.n	8005dfe <quorem+0x42>
 8005e46:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e4a:	b92b      	cbnz	r3, 8005e58 <quorem+0x9c>
 8005e4c:	9b01      	ldr	r3, [sp, #4]
 8005e4e:	3b04      	subs	r3, #4
 8005e50:	429d      	cmp	r5, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	d32d      	bcc.n	8005eb2 <quorem+0xf6>
 8005e56:	613c      	str	r4, [r7, #16]
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f001 f9dd 	bl	8007218 <__mcmp>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	db23      	blt.n	8005eaa <quorem+0xee>
 8005e62:	4629      	mov	r1, r5
 8005e64:	2000      	movs	r0, #0
 8005e66:	3601      	adds	r6, #1
 8005e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e6c:	f8d1 c000 	ldr.w	ip, [r1]
 8005e70:	b293      	uxth	r3, r2
 8005e72:	1ac3      	subs	r3, r0, r3
 8005e74:	0c12      	lsrs	r2, r2, #16
 8005e76:	fa1f f08c 	uxth.w	r0, ip
 8005e7a:	4403      	add	r3, r0
 8005e7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e8a:	45c1      	cmp	r9, r8
 8005e8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e90:	f841 3b04 	str.w	r3, [r1], #4
 8005e94:	d2e8      	bcs.n	8005e68 <quorem+0xac>
 8005e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e9e:	b922      	cbnz	r2, 8005eaa <quorem+0xee>
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	429d      	cmp	r5, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	d30a      	bcc.n	8005ebe <quorem+0x102>
 8005ea8:	613c      	str	r4, [r7, #16]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	b003      	add	sp, #12
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	3b04      	subs	r3, #4
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	d1cd      	bne.n	8005e56 <quorem+0x9a>
 8005eba:	3c01      	subs	r4, #1
 8005ebc:	e7c8      	b.n	8005e50 <quorem+0x94>
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <quorem+0xec>
 8005ec6:	3c01      	subs	r4, #1
 8005ec8:	e7eb      	b.n	8005ea2 <quorem+0xe6>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e7ee      	b.n	8005eac <quorem+0xf0>
	...

08005ed0 <_dtoa_r>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	461f      	mov	r7, r3
 8005ed8:	69c4      	ldr	r4, [r0, #28]
 8005eda:	b099      	sub	sp, #100	; 0x64
 8005edc:	4605      	mov	r5, r0
 8005ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ee2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005ee6:	b974      	cbnz	r4, 8005f06 <_dtoa_r+0x36>
 8005ee8:	2010      	movs	r0, #16
 8005eea:	f000 fe1d 	bl	8006b28 <malloc>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	61e8      	str	r0, [r5, #28]
 8005ef2:	b920      	cbnz	r0, 8005efe <_dtoa_r+0x2e>
 8005ef4:	21ef      	movs	r1, #239	; 0xef
 8005ef6:	4bac      	ldr	r3, [pc, #688]	; (80061a8 <_dtoa_r+0x2d8>)
 8005ef8:	48ac      	ldr	r0, [pc, #688]	; (80061ac <_dtoa_r+0x2dc>)
 8005efa:	f002 fbd5 	bl	80086a8 <__assert_func>
 8005efe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f02:	6004      	str	r4, [r0, #0]
 8005f04:	60c4      	str	r4, [r0, #12]
 8005f06:	69eb      	ldr	r3, [r5, #28]
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	b151      	cbz	r1, 8005f22 <_dtoa_r+0x52>
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4093      	lsls	r3, r2
 8005f12:	604a      	str	r2, [r1, #4]
 8005f14:	608b      	str	r3, [r1, #8]
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 fefa 	bl	8006d10 <_Bfree>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	69eb      	ldr	r3, [r5, #28]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	1e3b      	subs	r3, r7, #0
 8005f24:	bfaf      	iteee	ge
 8005f26:	2300      	movge	r3, #0
 8005f28:	2201      	movlt	r2, #1
 8005f2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f2e:	9305      	strlt	r3, [sp, #20]
 8005f30:	bfa8      	it	ge
 8005f32:	f8c8 3000 	strge.w	r3, [r8]
 8005f36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f3a:	4b9d      	ldr	r3, [pc, #628]	; (80061b0 <_dtoa_r+0x2e0>)
 8005f3c:	bfb8      	it	lt
 8005f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f42:	ea33 0309 	bics.w	r3, r3, r9
 8005f46:	d119      	bne.n	8005f7c <_dtoa_r+0xac>
 8005f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f54:	4333      	orrs	r3, r6
 8005f56:	f000 8589 	beq.w	8006a6c <_dtoa_r+0xb9c>
 8005f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f5c:	b953      	cbnz	r3, 8005f74 <_dtoa_r+0xa4>
 8005f5e:	4b95      	ldr	r3, [pc, #596]	; (80061b4 <_dtoa_r+0x2e4>)
 8005f60:	e023      	b.n	8005faa <_dtoa_r+0xda>
 8005f62:	4b95      	ldr	r3, [pc, #596]	; (80061b8 <_dtoa_r+0x2e8>)
 8005f64:	9303      	str	r3, [sp, #12]
 8005f66:	3308      	adds	r3, #8
 8005f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	9803      	ldr	r0, [sp, #12]
 8005f6e:	b019      	add	sp, #100	; 0x64
 8005f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	4b8f      	ldr	r3, [pc, #572]	; (80061b4 <_dtoa_r+0x2e4>)
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	3303      	adds	r3, #3
 8005f7a:	e7f5      	b.n	8005f68 <_dtoa_r+0x98>
 8005f7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f7fa fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f90:	4680      	mov	r8, r0
 8005f92:	b160      	cbz	r0, 8005fae <_dtoa_r+0xde>
 8005f94:	2301      	movs	r3, #1
 8005f96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8562 	beq.w	8006a66 <_dtoa_r+0xb96>
 8005fa2:	4b86      	ldr	r3, [pc, #536]	; (80061bc <_dtoa_r+0x2ec>)
 8005fa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	e7de      	b.n	8005f6c <_dtoa_r+0x9c>
 8005fae:	ab16      	add	r3, sp, #88	; 0x58
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	ab17      	add	r3, sp, #92	; 0x5c
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005fbc:	f001 fa3c 	bl	8007438 <__d2b>
 8005fc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	2c00      	cmp	r4, #0
 8005fc8:	d07e      	beq.n	80060c8 <_dtoa_r+0x1f8>
 8005fca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005fdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005fe0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4b75      	ldr	r3, [pc, #468]	; (80061c0 <_dtoa_r+0x2f0>)
 8005fea:	f7fa f8bd 	bl	8000168 <__aeabi_dsub>
 8005fee:	a368      	add	r3, pc, #416	; (adr r3, 8006190 <_dtoa_r+0x2c0>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fa70 	bl	80004d8 <__aeabi_dmul>
 8005ff8:	a367      	add	r3, pc, #412	; (adr r3, 8006198 <_dtoa_r+0x2c8>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa f8b5 	bl	800016c <__adddf3>
 8006002:	4606      	mov	r6, r0
 8006004:	4620      	mov	r0, r4
 8006006:	460f      	mov	r7, r1
 8006008:	f7fa f9fc 	bl	8000404 <__aeabi_i2d>
 800600c:	a364      	add	r3, pc, #400	; (adr r3, 80061a0 <_dtoa_r+0x2d0>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f7fa fa61 	bl	80004d8 <__aeabi_dmul>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4630      	mov	r0, r6
 800601c:	4639      	mov	r1, r7
 800601e:	f7fa f8a5 	bl	800016c <__adddf3>
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	f7fa fd07 	bl	8000a38 <__aeabi_d2iz>
 800602a:	2200      	movs	r2, #0
 800602c:	4683      	mov	fp, r0
 800602e:	2300      	movs	r3, #0
 8006030:	4630      	mov	r0, r6
 8006032:	4639      	mov	r1, r7
 8006034:	f7fa fcc2 	bl	80009bc <__aeabi_dcmplt>
 8006038:	b148      	cbz	r0, 800604e <_dtoa_r+0x17e>
 800603a:	4658      	mov	r0, fp
 800603c:	f7fa f9e2 	bl	8000404 <__aeabi_i2d>
 8006040:	4632      	mov	r2, r6
 8006042:	463b      	mov	r3, r7
 8006044:	f7fa fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8006048:	b908      	cbnz	r0, 800604e <_dtoa_r+0x17e>
 800604a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800604e:	f1bb 0f16 	cmp.w	fp, #22
 8006052:	d857      	bhi.n	8006104 <_dtoa_r+0x234>
 8006054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006058:	4b5a      	ldr	r3, [pc, #360]	; (80061c4 <_dtoa_r+0x2f4>)
 800605a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa fcab 	bl	80009bc <__aeabi_dcmplt>
 8006066:	2800      	cmp	r0, #0
 8006068:	d04e      	beq.n	8006108 <_dtoa_r+0x238>
 800606a:	2300      	movs	r3, #0
 800606c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006070:	930f      	str	r3, [sp, #60]	; 0x3c
 8006072:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006074:	1b1b      	subs	r3, r3, r4
 8006076:	1e5a      	subs	r2, r3, #1
 8006078:	bf46      	itte	mi
 800607a:	f1c3 0901 	rsbmi	r9, r3, #1
 800607e:	2300      	movmi	r3, #0
 8006080:	f04f 0900 	movpl.w	r9, #0
 8006084:	9209      	str	r2, [sp, #36]	; 0x24
 8006086:	bf48      	it	mi
 8006088:	9309      	strmi	r3, [sp, #36]	; 0x24
 800608a:	f1bb 0f00 	cmp.w	fp, #0
 800608e:	db3d      	blt.n	800610c <_dtoa_r+0x23c>
 8006090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006092:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006096:	445b      	add	r3, fp
 8006098:	9309      	str	r3, [sp, #36]	; 0x24
 800609a:	2300      	movs	r3, #0
 800609c:	930a      	str	r3, [sp, #40]	; 0x28
 800609e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060a0:	2b09      	cmp	r3, #9
 80060a2:	d867      	bhi.n	8006174 <_dtoa_r+0x2a4>
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	bfc4      	itt	gt
 80060a8:	3b04      	subgt	r3, #4
 80060aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80060ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ae:	bfc8      	it	gt
 80060b0:	2400      	movgt	r4, #0
 80060b2:	f1a3 0302 	sub.w	r3, r3, #2
 80060b6:	bfd8      	it	le
 80060b8:	2401      	movle	r4, #1
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	f200 8086 	bhi.w	80061cc <_dtoa_r+0x2fc>
 80060c0:	e8df f003 	tbb	[pc, r3]
 80060c4:	5637392c 	.word	0x5637392c
 80060c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80060cc:	441c      	add	r4, r3
 80060ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	bfc1      	itttt	gt
 80060d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060da:	fa09 f903 	lslgt.w	r9, r9, r3
 80060de:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80060e2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80060e6:	bfd6      	itet	le
 80060e8:	f1c3 0320 	rsble	r3, r3, #32
 80060ec:	ea49 0003 	orrgt.w	r0, r9, r3
 80060f0:	fa06 f003 	lslle.w	r0, r6, r3
 80060f4:	f7fa f976 	bl	80003e4 <__aeabi_ui2d>
 80060f8:	2201      	movs	r2, #1
 80060fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80060fe:	3c01      	subs	r4, #1
 8006100:	9213      	str	r2, [sp, #76]	; 0x4c
 8006102:	e76f      	b.n	8005fe4 <_dtoa_r+0x114>
 8006104:	2301      	movs	r3, #1
 8006106:	e7b3      	b.n	8006070 <_dtoa_r+0x1a0>
 8006108:	900f      	str	r0, [sp, #60]	; 0x3c
 800610a:	e7b2      	b.n	8006072 <_dtoa_r+0x1a2>
 800610c:	f1cb 0300 	rsb	r3, fp, #0
 8006110:	930a      	str	r3, [sp, #40]	; 0x28
 8006112:	2300      	movs	r3, #0
 8006114:	eba9 090b 	sub.w	r9, r9, fp
 8006118:	930e      	str	r3, [sp, #56]	; 0x38
 800611a:	e7c0      	b.n	800609e <_dtoa_r+0x1ce>
 800611c:	2300      	movs	r3, #0
 800611e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006120:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006122:	2b00      	cmp	r3, #0
 8006124:	dc55      	bgt.n	80061d2 <_dtoa_r+0x302>
 8006126:	2301      	movs	r3, #1
 8006128:	461a      	mov	r2, r3
 800612a:	9306      	str	r3, [sp, #24]
 800612c:	9308      	str	r3, [sp, #32]
 800612e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006130:	e00b      	b.n	800614a <_dtoa_r+0x27a>
 8006132:	2301      	movs	r3, #1
 8006134:	e7f3      	b.n	800611e <_dtoa_r+0x24e>
 8006136:	2300      	movs	r3, #0
 8006138:	930b      	str	r3, [sp, #44]	; 0x2c
 800613a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800613c:	445b      	add	r3, fp
 800613e:	9306      	str	r3, [sp, #24]
 8006140:	3301      	adds	r3, #1
 8006142:	2b01      	cmp	r3, #1
 8006144:	9308      	str	r3, [sp, #32]
 8006146:	bfb8      	it	lt
 8006148:	2301      	movlt	r3, #1
 800614a:	2100      	movs	r1, #0
 800614c:	2204      	movs	r2, #4
 800614e:	69e8      	ldr	r0, [r5, #28]
 8006150:	f102 0614 	add.w	r6, r2, #20
 8006154:	429e      	cmp	r6, r3
 8006156:	d940      	bls.n	80061da <_dtoa_r+0x30a>
 8006158:	6041      	str	r1, [r0, #4]
 800615a:	4628      	mov	r0, r5
 800615c:	f000 fd98 	bl	8006c90 <_Balloc>
 8006160:	9003      	str	r0, [sp, #12]
 8006162:	2800      	cmp	r0, #0
 8006164:	d13c      	bne.n	80061e0 <_dtoa_r+0x310>
 8006166:	4602      	mov	r2, r0
 8006168:	f240 11af 	movw	r1, #431	; 0x1af
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <_dtoa_r+0x2f8>)
 800616e:	e6c3      	b.n	8005ef8 <_dtoa_r+0x28>
 8006170:	2301      	movs	r3, #1
 8006172:	e7e1      	b.n	8006138 <_dtoa_r+0x268>
 8006174:	2401      	movs	r4, #1
 8006176:	2300      	movs	r3, #0
 8006178:	940b      	str	r4, [sp, #44]	; 0x2c
 800617a:	9322      	str	r3, [sp, #136]	; 0x88
 800617c:	f04f 33ff 	mov.w	r3, #4294967295
 8006180:	2200      	movs	r2, #0
 8006182:	9306      	str	r3, [sp, #24]
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	2312      	movs	r3, #18
 8006188:	e7d1      	b.n	800612e <_dtoa_r+0x25e>
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w
 8006190:	636f4361 	.word	0x636f4361
 8006194:	3fd287a7 	.word	0x3fd287a7
 8006198:	8b60c8b3 	.word	0x8b60c8b3
 800619c:	3fc68a28 	.word	0x3fc68a28
 80061a0:	509f79fb 	.word	0x509f79fb
 80061a4:	3fd34413 	.word	0x3fd34413
 80061a8:	0800a411 	.word	0x0800a411
 80061ac:	0800a428 	.word	0x0800a428
 80061b0:	7ff00000 	.word	0x7ff00000
 80061b4:	0800a40d 	.word	0x0800a40d
 80061b8:	0800a404 	.word	0x0800a404
 80061bc:	0800a3dc 	.word	0x0800a3dc
 80061c0:	3ff80000 	.word	0x3ff80000
 80061c4:	0800a518 	.word	0x0800a518
 80061c8:	0800a480 	.word	0x0800a480
 80061cc:	2301      	movs	r3, #1
 80061ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d0:	e7d4      	b.n	800617c <_dtoa_r+0x2ac>
 80061d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061d4:	9306      	str	r3, [sp, #24]
 80061d6:	9308      	str	r3, [sp, #32]
 80061d8:	e7b7      	b.n	800614a <_dtoa_r+0x27a>
 80061da:	3101      	adds	r1, #1
 80061dc:	0052      	lsls	r2, r2, #1
 80061de:	e7b7      	b.n	8006150 <_dtoa_r+0x280>
 80061e0:	69eb      	ldr	r3, [r5, #28]
 80061e2:	9a03      	ldr	r2, [sp, #12]
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	9b08      	ldr	r3, [sp, #32]
 80061e8:	2b0e      	cmp	r3, #14
 80061ea:	f200 80a8 	bhi.w	800633e <_dtoa_r+0x46e>
 80061ee:	2c00      	cmp	r4, #0
 80061f0:	f000 80a5 	beq.w	800633e <_dtoa_r+0x46e>
 80061f4:	f1bb 0f00 	cmp.w	fp, #0
 80061f8:	dd34      	ble.n	8006264 <_dtoa_r+0x394>
 80061fa:	4b9a      	ldr	r3, [pc, #616]	; (8006464 <_dtoa_r+0x594>)
 80061fc:	f00b 020f 	and.w	r2, fp, #15
 8006200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006204:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800620c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006210:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006214:	d016      	beq.n	8006244 <_dtoa_r+0x374>
 8006216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800621a:	4b93      	ldr	r3, [pc, #588]	; (8006468 <_dtoa_r+0x598>)
 800621c:	2703      	movs	r7, #3
 800621e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006222:	f7fa fa83 	bl	800072c <__aeabi_ddiv>
 8006226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800622a:	f004 040f 	and.w	r4, r4, #15
 800622e:	4e8e      	ldr	r6, [pc, #568]	; (8006468 <_dtoa_r+0x598>)
 8006230:	b954      	cbnz	r4, 8006248 <_dtoa_r+0x378>
 8006232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800623a:	f7fa fa77 	bl	800072c <__aeabi_ddiv>
 800623e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006242:	e029      	b.n	8006298 <_dtoa_r+0x3c8>
 8006244:	2702      	movs	r7, #2
 8006246:	e7f2      	b.n	800622e <_dtoa_r+0x35e>
 8006248:	07e1      	lsls	r1, r4, #31
 800624a:	d508      	bpl.n	800625e <_dtoa_r+0x38e>
 800624c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006250:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006254:	f7fa f940 	bl	80004d8 <__aeabi_dmul>
 8006258:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800625c:	3701      	adds	r7, #1
 800625e:	1064      	asrs	r4, r4, #1
 8006260:	3608      	adds	r6, #8
 8006262:	e7e5      	b.n	8006230 <_dtoa_r+0x360>
 8006264:	f000 80a5 	beq.w	80063b2 <_dtoa_r+0x4e2>
 8006268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800626c:	f1cb 0400 	rsb	r4, fp, #0
 8006270:	4b7c      	ldr	r3, [pc, #496]	; (8006464 <_dtoa_r+0x594>)
 8006272:	f004 020f 	and.w	r2, r4, #15
 8006276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f7fa f92b 	bl	80004d8 <__aeabi_dmul>
 8006282:	2702      	movs	r7, #2
 8006284:	2300      	movs	r3, #0
 8006286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800628a:	4e77      	ldr	r6, [pc, #476]	; (8006468 <_dtoa_r+0x598>)
 800628c:	1124      	asrs	r4, r4, #4
 800628e:	2c00      	cmp	r4, #0
 8006290:	f040 8084 	bne.w	800639c <_dtoa_r+0x4cc>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1d2      	bne.n	800623e <_dtoa_r+0x36e>
 8006298:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800629c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8087 	beq.w	80063b6 <_dtoa_r+0x4e6>
 80062a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062ac:	2200      	movs	r2, #0
 80062ae:	4b6f      	ldr	r3, [pc, #444]	; (800646c <_dtoa_r+0x59c>)
 80062b0:	f7fa fb84 	bl	80009bc <__aeabi_dcmplt>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d07e      	beq.n	80063b6 <_dtoa_r+0x4e6>
 80062b8:	9b08      	ldr	r3, [sp, #32]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d07b      	beq.n	80063b6 <_dtoa_r+0x4e6>
 80062be:	9b06      	ldr	r3, [sp, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dd38      	ble.n	8006336 <_dtoa_r+0x466>
 80062c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062c8:	2200      	movs	r2, #0
 80062ca:	4b69      	ldr	r3, [pc, #420]	; (8006470 <_dtoa_r+0x5a0>)
 80062cc:	f7fa f904 	bl	80004d8 <__aeabi_dmul>
 80062d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062d4:	9c06      	ldr	r4, [sp, #24]
 80062d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80062da:	3701      	adds	r7, #1
 80062dc:	4638      	mov	r0, r7
 80062de:	f7fa f891 	bl	8000404 <__aeabi_i2d>
 80062e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e6:	f7fa f8f7 	bl	80004d8 <__aeabi_dmul>
 80062ea:	2200      	movs	r2, #0
 80062ec:	4b61      	ldr	r3, [pc, #388]	; (8006474 <_dtoa_r+0x5a4>)
 80062ee:	f7f9 ff3d 	bl	800016c <__adddf3>
 80062f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80062f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062fa:	9611      	str	r6, [sp, #68]	; 0x44
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	d15d      	bne.n	80063bc <_dtoa_r+0x4ec>
 8006300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006304:	2200      	movs	r2, #0
 8006306:	4b5c      	ldr	r3, [pc, #368]	; (8006478 <_dtoa_r+0x5a8>)
 8006308:	f7f9 ff2e 	bl	8000168 <__aeabi_dsub>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006314:	4633      	mov	r3, r6
 8006316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006318:	f7fa fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800631c:	2800      	cmp	r0, #0
 800631e:	f040 8295 	bne.w	800684c <_dtoa_r+0x97c>
 8006322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006326:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006328:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800632c:	f7fa fb46 	bl	80009bc <__aeabi_dcmplt>
 8006330:	2800      	cmp	r0, #0
 8006332:	f040 8289 	bne.w	8006848 <_dtoa_r+0x978>
 8006336:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800633a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800633e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006340:	2b00      	cmp	r3, #0
 8006342:	f2c0 8151 	blt.w	80065e8 <_dtoa_r+0x718>
 8006346:	f1bb 0f0e 	cmp.w	fp, #14
 800634a:	f300 814d 	bgt.w	80065e8 <_dtoa_r+0x718>
 800634e:	4b45      	ldr	r3, [pc, #276]	; (8006464 <_dtoa_r+0x594>)
 8006350:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006358:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800635c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800635e:	2b00      	cmp	r3, #0
 8006360:	f280 80da 	bge.w	8006518 <_dtoa_r+0x648>
 8006364:	9b08      	ldr	r3, [sp, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f300 80d6 	bgt.w	8006518 <_dtoa_r+0x648>
 800636c:	f040 826b 	bne.w	8006846 <_dtoa_r+0x976>
 8006370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006374:	2200      	movs	r2, #0
 8006376:	4b40      	ldr	r3, [pc, #256]	; (8006478 <_dtoa_r+0x5a8>)
 8006378:	f7fa f8ae 	bl	80004d8 <__aeabi_dmul>
 800637c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006380:	f7fa fb30 	bl	80009e4 <__aeabi_dcmpge>
 8006384:	9c08      	ldr	r4, [sp, #32]
 8006386:	4626      	mov	r6, r4
 8006388:	2800      	cmp	r0, #0
 800638a:	f040 8241 	bne.w	8006810 <_dtoa_r+0x940>
 800638e:	2331      	movs	r3, #49	; 0x31
 8006390:	9f03      	ldr	r7, [sp, #12]
 8006392:	f10b 0b01 	add.w	fp, fp, #1
 8006396:	f807 3b01 	strb.w	r3, [r7], #1
 800639a:	e23d      	b.n	8006818 <_dtoa_r+0x948>
 800639c:	07e2      	lsls	r2, r4, #31
 800639e:	d505      	bpl.n	80063ac <_dtoa_r+0x4dc>
 80063a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063a4:	f7fa f898 	bl	80004d8 <__aeabi_dmul>
 80063a8:	2301      	movs	r3, #1
 80063aa:	3701      	adds	r7, #1
 80063ac:	1064      	asrs	r4, r4, #1
 80063ae:	3608      	adds	r6, #8
 80063b0:	e76d      	b.n	800628e <_dtoa_r+0x3be>
 80063b2:	2702      	movs	r7, #2
 80063b4:	e770      	b.n	8006298 <_dtoa_r+0x3c8>
 80063b6:	46d8      	mov	r8, fp
 80063b8:	9c08      	ldr	r4, [sp, #32]
 80063ba:	e78f      	b.n	80062dc <_dtoa_r+0x40c>
 80063bc:	9903      	ldr	r1, [sp, #12]
 80063be:	4b29      	ldr	r3, [pc, #164]	; (8006464 <_dtoa_r+0x594>)
 80063c0:	4421      	add	r1, r4
 80063c2:	9112      	str	r1, [sp, #72]	; 0x48
 80063c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80063ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d054      	beq.n	8006480 <_dtoa_r+0x5b0>
 80063d6:	2000      	movs	r0, #0
 80063d8:	4928      	ldr	r1, [pc, #160]	; (800647c <_dtoa_r+0x5ac>)
 80063da:	f7fa f9a7 	bl	800072c <__aeabi_ddiv>
 80063de:	463b      	mov	r3, r7
 80063e0:	4632      	mov	r2, r6
 80063e2:	f7f9 fec1 	bl	8000168 <__aeabi_dsub>
 80063e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063ea:	9f03      	ldr	r7, [sp, #12]
 80063ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f0:	f7fa fb22 	bl	8000a38 <__aeabi_d2iz>
 80063f4:	4604      	mov	r4, r0
 80063f6:	f7fa f805 	bl	8000404 <__aeabi_i2d>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006402:	f7f9 feb1 	bl	8000168 <__aeabi_dsub>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	3430      	adds	r4, #48	; 0x30
 800640c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006414:	f807 4b01 	strb.w	r4, [r7], #1
 8006418:	f7fa fad0 	bl	80009bc <__aeabi_dcmplt>
 800641c:	2800      	cmp	r0, #0
 800641e:	d173      	bne.n	8006508 <_dtoa_r+0x638>
 8006420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006424:	2000      	movs	r0, #0
 8006426:	4911      	ldr	r1, [pc, #68]	; (800646c <_dtoa_r+0x59c>)
 8006428:	f7f9 fe9e 	bl	8000168 <__aeabi_dsub>
 800642c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006430:	f7fa fac4 	bl	80009bc <__aeabi_dcmplt>
 8006434:	2800      	cmp	r0, #0
 8006436:	f040 80b6 	bne.w	80065a6 <_dtoa_r+0x6d6>
 800643a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800643c:	429f      	cmp	r7, r3
 800643e:	f43f af7a 	beq.w	8006336 <_dtoa_r+0x466>
 8006442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006446:	2200      	movs	r2, #0
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <_dtoa_r+0x5a0>)
 800644a:	f7fa f845 	bl	80004d8 <__aeabi_dmul>
 800644e:	2200      	movs	r2, #0
 8006450:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <_dtoa_r+0x5a0>)
 800645a:	f7fa f83d 	bl	80004d8 <__aeabi_dmul>
 800645e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006462:	e7c3      	b.n	80063ec <_dtoa_r+0x51c>
 8006464:	0800a518 	.word	0x0800a518
 8006468:	0800a4f0 	.word	0x0800a4f0
 800646c:	3ff00000 	.word	0x3ff00000
 8006470:	40240000 	.word	0x40240000
 8006474:	401c0000 	.word	0x401c0000
 8006478:	40140000 	.word	0x40140000
 800647c:	3fe00000 	.word	0x3fe00000
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7fa f828 	bl	80004d8 <__aeabi_dmul>
 8006488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800648e:	9c03      	ldr	r4, [sp, #12]
 8006490:	9314      	str	r3, [sp, #80]	; 0x50
 8006492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006496:	f7fa facf 	bl	8000a38 <__aeabi_d2iz>
 800649a:	9015      	str	r0, [sp, #84]	; 0x54
 800649c:	f7f9 ffb2 	bl	8000404 <__aeabi_i2d>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a8:	f7f9 fe5e 	bl	8000168 <__aeabi_dsub>
 80064ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064ae:	4606      	mov	r6, r0
 80064b0:	3330      	adds	r3, #48	; 0x30
 80064b2:	f804 3b01 	strb.w	r3, [r4], #1
 80064b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064b8:	460f      	mov	r7, r1
 80064ba:	429c      	cmp	r4, r3
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	d124      	bne.n	800650c <_dtoa_r+0x63c>
 80064c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064c6:	4baf      	ldr	r3, [pc, #700]	; (8006784 <_dtoa_r+0x8b4>)
 80064c8:	f7f9 fe50 	bl	800016c <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa fa90 	bl	80009f8 <__aeabi_dcmpgt>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d163      	bne.n	80065a4 <_dtoa_r+0x6d4>
 80064dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064e0:	2000      	movs	r0, #0
 80064e2:	49a8      	ldr	r1, [pc, #672]	; (8006784 <_dtoa_r+0x8b4>)
 80064e4:	f7f9 fe40 	bl	8000168 <__aeabi_dsub>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4630      	mov	r0, r6
 80064ee:	4639      	mov	r1, r7
 80064f0:	f7fa fa64 	bl	80009bc <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f43f af1e 	beq.w	8006336 <_dtoa_r+0x466>
 80064fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80064fc:	1e7b      	subs	r3, r7, #1
 80064fe:	9314      	str	r3, [sp, #80]	; 0x50
 8006500:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006504:	2b30      	cmp	r3, #48	; 0x30
 8006506:	d0f8      	beq.n	80064fa <_dtoa_r+0x62a>
 8006508:	46c3      	mov	fp, r8
 800650a:	e03b      	b.n	8006584 <_dtoa_r+0x6b4>
 800650c:	4b9e      	ldr	r3, [pc, #632]	; (8006788 <_dtoa_r+0x8b8>)
 800650e:	f7f9 ffe3 	bl	80004d8 <__aeabi_dmul>
 8006512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006516:	e7bc      	b.n	8006492 <_dtoa_r+0x5c2>
 8006518:	9f03      	ldr	r7, [sp, #12]
 800651a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800651e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7fa f901 	bl	800072c <__aeabi_ddiv>
 800652a:	f7fa fa85 	bl	8000a38 <__aeabi_d2iz>
 800652e:	4604      	mov	r4, r0
 8006530:	f7f9 ff68 	bl	8000404 <__aeabi_i2d>
 8006534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006538:	f7f9 ffce 	bl	80004d8 <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4640      	mov	r0, r8
 8006542:	4649      	mov	r1, r9
 8006544:	f7f9 fe10 	bl	8000168 <__aeabi_dsub>
 8006548:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800654c:	f807 6b01 	strb.w	r6, [r7], #1
 8006550:	9e03      	ldr	r6, [sp, #12]
 8006552:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006556:	1bbe      	subs	r6, r7, r6
 8006558:	45b4      	cmp	ip, r6
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	d136      	bne.n	80065ce <_dtoa_r+0x6fe>
 8006560:	f7f9 fe04 	bl	800016c <__adddf3>
 8006564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006568:	4680      	mov	r8, r0
 800656a:	4689      	mov	r9, r1
 800656c:	f7fa fa44 	bl	80009f8 <__aeabi_dcmpgt>
 8006570:	bb58      	cbnz	r0, 80065ca <_dtoa_r+0x6fa>
 8006572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006576:	4640      	mov	r0, r8
 8006578:	4649      	mov	r1, r9
 800657a:	f7fa fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800657e:	b108      	cbz	r0, 8006584 <_dtoa_r+0x6b4>
 8006580:	07e3      	lsls	r3, r4, #31
 8006582:	d422      	bmi.n	80065ca <_dtoa_r+0x6fa>
 8006584:	4651      	mov	r1, sl
 8006586:	4628      	mov	r0, r5
 8006588:	f000 fbc2 	bl	8006d10 <_Bfree>
 800658c:	2300      	movs	r3, #0
 800658e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006590:	703b      	strb	r3, [r7, #0]
 8006592:	f10b 0301 	add.w	r3, fp, #1
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800659a:	2b00      	cmp	r3, #0
 800659c:	f43f ace6 	beq.w	8005f6c <_dtoa_r+0x9c>
 80065a0:	601f      	str	r7, [r3, #0]
 80065a2:	e4e3      	b.n	8005f6c <_dtoa_r+0x9c>
 80065a4:	4627      	mov	r7, r4
 80065a6:	463b      	mov	r3, r7
 80065a8:	461f      	mov	r7, r3
 80065aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ae:	2a39      	cmp	r2, #57	; 0x39
 80065b0:	d107      	bne.n	80065c2 <_dtoa_r+0x6f2>
 80065b2:	9a03      	ldr	r2, [sp, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d1f7      	bne.n	80065a8 <_dtoa_r+0x6d8>
 80065b8:	2230      	movs	r2, #48	; 0x30
 80065ba:	9903      	ldr	r1, [sp, #12]
 80065bc:	f108 0801 	add.w	r8, r8, #1
 80065c0:	700a      	strb	r2, [r1, #0]
 80065c2:	781a      	ldrb	r2, [r3, #0]
 80065c4:	3201      	adds	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e79e      	b.n	8006508 <_dtoa_r+0x638>
 80065ca:	46d8      	mov	r8, fp
 80065cc:	e7eb      	b.n	80065a6 <_dtoa_r+0x6d6>
 80065ce:	2200      	movs	r2, #0
 80065d0:	4b6d      	ldr	r3, [pc, #436]	; (8006788 <_dtoa_r+0x8b8>)
 80065d2:	f7f9 ff81 	bl	80004d8 <__aeabi_dmul>
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4680      	mov	r8, r0
 80065dc:	4689      	mov	r9, r1
 80065de:	f7fa f9e3 	bl	80009a8 <__aeabi_dcmpeq>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d09b      	beq.n	800651e <_dtoa_r+0x64e>
 80065e6:	e7cd      	b.n	8006584 <_dtoa_r+0x6b4>
 80065e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	f000 80c4 	beq.w	8006778 <_dtoa_r+0x8a8>
 80065f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80065f2:	2a01      	cmp	r2, #1
 80065f4:	f300 80a8 	bgt.w	8006748 <_dtoa_r+0x878>
 80065f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	f000 80a0 	beq.w	8006740 <_dtoa_r+0x870>
 8006600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006604:	464f      	mov	r7, r9
 8006606:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660a:	2101      	movs	r1, #1
 800660c:	441a      	add	r2, r3
 800660e:	4628      	mov	r0, r5
 8006610:	4499      	add	r9, r3
 8006612:	9209      	str	r2, [sp, #36]	; 0x24
 8006614:	f000 fc7c 	bl	8006f10 <__i2b>
 8006618:	4606      	mov	r6, r0
 800661a:	b15f      	cbz	r7, 8006634 <_dtoa_r+0x764>
 800661c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	dd08      	ble.n	8006634 <_dtoa_r+0x764>
 8006622:	42bb      	cmp	r3, r7
 8006624:	bfa8      	it	ge
 8006626:	463b      	movge	r3, r7
 8006628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800662a:	eba9 0903 	sub.w	r9, r9, r3
 800662e:	1aff      	subs	r7, r7, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	9309      	str	r3, [sp, #36]	; 0x24
 8006634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006636:	b1f3      	cbz	r3, 8006676 <_dtoa_r+0x7a6>
 8006638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80a0 	beq.w	8006780 <_dtoa_r+0x8b0>
 8006640:	2c00      	cmp	r4, #0
 8006642:	dd10      	ble.n	8006666 <_dtoa_r+0x796>
 8006644:	4631      	mov	r1, r6
 8006646:	4622      	mov	r2, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f000 fd1f 	bl	800708c <__pow5mult>
 800664e:	4652      	mov	r2, sl
 8006650:	4601      	mov	r1, r0
 8006652:	4606      	mov	r6, r0
 8006654:	4628      	mov	r0, r5
 8006656:	f000 fc71 	bl	8006f3c <__multiply>
 800665a:	4680      	mov	r8, r0
 800665c:	4651      	mov	r1, sl
 800665e:	4628      	mov	r0, r5
 8006660:	f000 fb56 	bl	8006d10 <_Bfree>
 8006664:	46c2      	mov	sl, r8
 8006666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006668:	1b1a      	subs	r2, r3, r4
 800666a:	d004      	beq.n	8006676 <_dtoa_r+0x7a6>
 800666c:	4651      	mov	r1, sl
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fd0c 	bl	800708c <__pow5mult>
 8006674:	4682      	mov	sl, r0
 8006676:	2101      	movs	r1, #1
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fc49 	bl	8006f10 <__i2b>
 800667e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006680:	4604      	mov	r4, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	f340 8082 	ble.w	800678c <_dtoa_r+0x8bc>
 8006688:	461a      	mov	r2, r3
 800668a:	4601      	mov	r1, r0
 800668c:	4628      	mov	r0, r5
 800668e:	f000 fcfd 	bl	800708c <__pow5mult>
 8006692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006694:	4604      	mov	r4, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	dd7b      	ble.n	8006792 <_dtoa_r+0x8c2>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066a4:	6918      	ldr	r0, [r3, #16]
 80066a6:	f000 fbe5 	bl	8006e74 <__hi0bits>
 80066aa:	f1c0 0020 	rsb	r0, r0, #32
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	4418      	add	r0, r3
 80066b2:	f010 001f 	ands.w	r0, r0, #31
 80066b6:	f000 8092 	beq.w	80067de <_dtoa_r+0x90e>
 80066ba:	f1c0 0320 	rsb	r3, r0, #32
 80066be:	2b04      	cmp	r3, #4
 80066c0:	f340 8085 	ble.w	80067ce <_dtoa_r+0x8fe>
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	f1c0 001c 	rsb	r0, r0, #28
 80066ca:	4403      	add	r3, r0
 80066cc:	4481      	add	r9, r0
 80066ce:	4407      	add	r7, r0
 80066d0:	9309      	str	r3, [sp, #36]	; 0x24
 80066d2:	f1b9 0f00 	cmp.w	r9, #0
 80066d6:	dd05      	ble.n	80066e4 <_dtoa_r+0x814>
 80066d8:	4651      	mov	r1, sl
 80066da:	464a      	mov	r2, r9
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 fd2f 	bl	8007140 <__lshift>
 80066e2:	4682      	mov	sl, r0
 80066e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd05      	ble.n	80066f6 <_dtoa_r+0x826>
 80066ea:	4621      	mov	r1, r4
 80066ec:	461a      	mov	r2, r3
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 fd26 	bl	8007140 <__lshift>
 80066f4:	4604      	mov	r4, r0
 80066f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d072      	beq.n	80067e2 <_dtoa_r+0x912>
 80066fc:	4621      	mov	r1, r4
 80066fe:	4650      	mov	r0, sl
 8006700:	f000 fd8a 	bl	8007218 <__mcmp>
 8006704:	2800      	cmp	r0, #0
 8006706:	da6c      	bge.n	80067e2 <_dtoa_r+0x912>
 8006708:	2300      	movs	r3, #0
 800670a:	4651      	mov	r1, sl
 800670c:	220a      	movs	r2, #10
 800670e:	4628      	mov	r0, r5
 8006710:	f000 fb20 	bl	8006d54 <__multadd>
 8006714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006716:	4682      	mov	sl, r0
 8006718:	f10b 3bff 	add.w	fp, fp, #4294967295
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 81ac 	beq.w	8006a7a <_dtoa_r+0xbaa>
 8006722:	2300      	movs	r3, #0
 8006724:	4631      	mov	r1, r6
 8006726:	220a      	movs	r2, #10
 8006728:	4628      	mov	r0, r5
 800672a:	f000 fb13 	bl	8006d54 <__multadd>
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	4606      	mov	r6, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f300 8093 	bgt.w	800685e <_dtoa_r+0x98e>
 8006738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800673a:	2b02      	cmp	r3, #2
 800673c:	dc59      	bgt.n	80067f2 <_dtoa_r+0x922>
 800673e:	e08e      	b.n	800685e <_dtoa_r+0x98e>
 8006740:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006742:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006746:	e75d      	b.n	8006604 <_dtoa_r+0x734>
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	1e5c      	subs	r4, r3, #1
 800674c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674e:	42a3      	cmp	r3, r4
 8006750:	bfbf      	itttt	lt
 8006752:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006754:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006756:	1ae3      	sublt	r3, r4, r3
 8006758:	18d2      	addlt	r2, r2, r3
 800675a:	bfa8      	it	ge
 800675c:	1b1c      	subge	r4, r3, r4
 800675e:	9b08      	ldr	r3, [sp, #32]
 8006760:	bfbe      	ittt	lt
 8006762:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006764:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006766:	2400      	movlt	r4, #0
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfb5      	itete	lt
 800676c:	eba9 0703 	sublt.w	r7, r9, r3
 8006770:	464f      	movge	r7, r9
 8006772:	2300      	movlt	r3, #0
 8006774:	9b08      	ldrge	r3, [sp, #32]
 8006776:	e747      	b.n	8006608 <_dtoa_r+0x738>
 8006778:	464f      	mov	r7, r9
 800677a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800677c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800677e:	e74c      	b.n	800661a <_dtoa_r+0x74a>
 8006780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006782:	e773      	b.n	800666c <_dtoa_r+0x79c>
 8006784:	3fe00000 	.word	0x3fe00000
 8006788:	40240000 	.word	0x40240000
 800678c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678e:	2b01      	cmp	r3, #1
 8006790:	dc18      	bgt.n	80067c4 <_dtoa_r+0x8f4>
 8006792:	9b04      	ldr	r3, [sp, #16]
 8006794:	b9b3      	cbnz	r3, 80067c4 <_dtoa_r+0x8f4>
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800679c:	b993      	cbnz	r3, 80067c4 <_dtoa_r+0x8f4>
 800679e:	9b05      	ldr	r3, [sp, #20]
 80067a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a4:	0d1b      	lsrs	r3, r3, #20
 80067a6:	051b      	lsls	r3, r3, #20
 80067a8:	b17b      	cbz	r3, 80067ca <_dtoa_r+0x8fa>
 80067aa:	f04f 0801 	mov.w	r8, #1
 80067ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b0:	f109 0901 	add.w	r9, r9, #1
 80067b4:	3301      	adds	r3, #1
 80067b6:	9309      	str	r3, [sp, #36]	; 0x24
 80067b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f47f af6f 	bne.w	800669e <_dtoa_r+0x7ce>
 80067c0:	2001      	movs	r0, #1
 80067c2:	e774      	b.n	80066ae <_dtoa_r+0x7de>
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	e7f6      	b.n	80067b8 <_dtoa_r+0x8e8>
 80067ca:	4698      	mov	r8, r3
 80067cc:	e7f4      	b.n	80067b8 <_dtoa_r+0x8e8>
 80067ce:	d080      	beq.n	80066d2 <_dtoa_r+0x802>
 80067d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067d2:	331c      	adds	r3, #28
 80067d4:	441a      	add	r2, r3
 80067d6:	4499      	add	r9, r3
 80067d8:	441f      	add	r7, r3
 80067da:	9209      	str	r2, [sp, #36]	; 0x24
 80067dc:	e779      	b.n	80066d2 <_dtoa_r+0x802>
 80067de:	4603      	mov	r3, r0
 80067e0:	e7f6      	b.n	80067d0 <_dtoa_r+0x900>
 80067e2:	9b08      	ldr	r3, [sp, #32]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc34      	bgt.n	8006852 <_dtoa_r+0x982>
 80067e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	dd31      	ble.n	8006852 <_dtoa_r+0x982>
 80067ee:	9b08      	ldr	r3, [sp, #32]
 80067f0:	9306      	str	r3, [sp, #24]
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	b963      	cbnz	r3, 8006810 <_dtoa_r+0x940>
 80067f6:	4621      	mov	r1, r4
 80067f8:	2205      	movs	r2, #5
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 faaa 	bl	8006d54 <__multadd>
 8006800:	4601      	mov	r1, r0
 8006802:	4604      	mov	r4, r0
 8006804:	4650      	mov	r0, sl
 8006806:	f000 fd07 	bl	8007218 <__mcmp>
 800680a:	2800      	cmp	r0, #0
 800680c:	f73f adbf 	bgt.w	800638e <_dtoa_r+0x4be>
 8006810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006812:	9f03      	ldr	r7, [sp, #12]
 8006814:	ea6f 0b03 	mvn.w	fp, r3
 8006818:	f04f 0800 	mov.w	r8, #0
 800681c:	4621      	mov	r1, r4
 800681e:	4628      	mov	r0, r5
 8006820:	f000 fa76 	bl	8006d10 <_Bfree>
 8006824:	2e00      	cmp	r6, #0
 8006826:	f43f aead 	beq.w	8006584 <_dtoa_r+0x6b4>
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	d005      	beq.n	800683c <_dtoa_r+0x96c>
 8006830:	45b0      	cmp	r8, r6
 8006832:	d003      	beq.n	800683c <_dtoa_r+0x96c>
 8006834:	4641      	mov	r1, r8
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fa6a 	bl	8006d10 <_Bfree>
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	f000 fa66 	bl	8006d10 <_Bfree>
 8006844:	e69e      	b.n	8006584 <_dtoa_r+0x6b4>
 8006846:	2400      	movs	r4, #0
 8006848:	4626      	mov	r6, r4
 800684a:	e7e1      	b.n	8006810 <_dtoa_r+0x940>
 800684c:	46c3      	mov	fp, r8
 800684e:	4626      	mov	r6, r4
 8006850:	e59d      	b.n	800638e <_dtoa_r+0x4be>
 8006852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80c8 	beq.w	80069ea <_dtoa_r+0xb1a>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	9306      	str	r3, [sp, #24]
 800685e:	2f00      	cmp	r7, #0
 8006860:	dd05      	ble.n	800686e <_dtoa_r+0x99e>
 8006862:	4631      	mov	r1, r6
 8006864:	463a      	mov	r2, r7
 8006866:	4628      	mov	r0, r5
 8006868:	f000 fc6a 	bl	8007140 <__lshift>
 800686c:	4606      	mov	r6, r0
 800686e:	f1b8 0f00 	cmp.w	r8, #0
 8006872:	d05b      	beq.n	800692c <_dtoa_r+0xa5c>
 8006874:	4628      	mov	r0, r5
 8006876:	6871      	ldr	r1, [r6, #4]
 8006878:	f000 fa0a 	bl	8006c90 <_Balloc>
 800687c:	4607      	mov	r7, r0
 800687e:	b928      	cbnz	r0, 800688c <_dtoa_r+0x9bc>
 8006880:	4602      	mov	r2, r0
 8006882:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006886:	4b81      	ldr	r3, [pc, #516]	; (8006a8c <_dtoa_r+0xbbc>)
 8006888:	f7ff bb36 	b.w	8005ef8 <_dtoa_r+0x28>
 800688c:	6932      	ldr	r2, [r6, #16]
 800688e:	f106 010c 	add.w	r1, r6, #12
 8006892:	3202      	adds	r2, #2
 8006894:	0092      	lsls	r2, r2, #2
 8006896:	300c      	adds	r0, #12
 8006898:	f001 fef2 	bl	8008680 <memcpy>
 800689c:	2201      	movs	r2, #1
 800689e:	4639      	mov	r1, r7
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 fc4d 	bl	8007140 <__lshift>
 80068a6:	46b0      	mov	r8, r6
 80068a8:	4606      	mov	r6, r0
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	9a03      	ldr	r2, [sp, #12]
 80068ae:	3301      	adds	r3, #1
 80068b0:	9308      	str	r3, [sp, #32]
 80068b2:	9b06      	ldr	r3, [sp, #24]
 80068b4:	4413      	add	r3, r2
 80068b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	930a      	str	r3, [sp, #40]	; 0x28
 80068c0:	9b08      	ldr	r3, [sp, #32]
 80068c2:	4621      	mov	r1, r4
 80068c4:	3b01      	subs	r3, #1
 80068c6:	4650      	mov	r0, sl
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	f7ff fa77 	bl	8005dbc <quorem>
 80068ce:	4641      	mov	r1, r8
 80068d0:	9006      	str	r0, [sp, #24]
 80068d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068d6:	4650      	mov	r0, sl
 80068d8:	f000 fc9e 	bl	8007218 <__mcmp>
 80068dc:	4632      	mov	r2, r6
 80068de:	9009      	str	r0, [sp, #36]	; 0x24
 80068e0:	4621      	mov	r1, r4
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 fcb4 	bl	8007250 <__mdiff>
 80068e8:	68c2      	ldr	r2, [r0, #12]
 80068ea:	4607      	mov	r7, r0
 80068ec:	bb02      	cbnz	r2, 8006930 <_dtoa_r+0xa60>
 80068ee:	4601      	mov	r1, r0
 80068f0:	4650      	mov	r0, sl
 80068f2:	f000 fc91 	bl	8007218 <__mcmp>
 80068f6:	4602      	mov	r2, r0
 80068f8:	4639      	mov	r1, r7
 80068fa:	4628      	mov	r0, r5
 80068fc:	920c      	str	r2, [sp, #48]	; 0x30
 80068fe:	f000 fa07 	bl	8006d10 <_Bfree>
 8006902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006906:	9f08      	ldr	r7, [sp, #32]
 8006908:	ea43 0102 	orr.w	r1, r3, r2
 800690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690e:	4319      	orrs	r1, r3
 8006910:	d110      	bne.n	8006934 <_dtoa_r+0xa64>
 8006912:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006916:	d029      	beq.n	800696c <_dtoa_r+0xa9c>
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	dd02      	ble.n	8006924 <_dtoa_r+0xa54>
 800691e:	9b06      	ldr	r3, [sp, #24]
 8006920:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	f883 9000 	strb.w	r9, [r3]
 800692a:	e777      	b.n	800681c <_dtoa_r+0x94c>
 800692c:	4630      	mov	r0, r6
 800692e:	e7ba      	b.n	80068a6 <_dtoa_r+0x9d6>
 8006930:	2201      	movs	r2, #1
 8006932:	e7e1      	b.n	80068f8 <_dtoa_r+0xa28>
 8006934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	db04      	blt.n	8006944 <_dtoa_r+0xa74>
 800693a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800693c:	430b      	orrs	r3, r1
 800693e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006940:	430b      	orrs	r3, r1
 8006942:	d120      	bne.n	8006986 <_dtoa_r+0xab6>
 8006944:	2a00      	cmp	r2, #0
 8006946:	dded      	ble.n	8006924 <_dtoa_r+0xa54>
 8006948:	4651      	mov	r1, sl
 800694a:	2201      	movs	r2, #1
 800694c:	4628      	mov	r0, r5
 800694e:	f000 fbf7 	bl	8007140 <__lshift>
 8006952:	4621      	mov	r1, r4
 8006954:	4682      	mov	sl, r0
 8006956:	f000 fc5f 	bl	8007218 <__mcmp>
 800695a:	2800      	cmp	r0, #0
 800695c:	dc03      	bgt.n	8006966 <_dtoa_r+0xa96>
 800695e:	d1e1      	bne.n	8006924 <_dtoa_r+0xa54>
 8006960:	f019 0f01 	tst.w	r9, #1
 8006964:	d0de      	beq.n	8006924 <_dtoa_r+0xa54>
 8006966:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800696a:	d1d8      	bne.n	800691e <_dtoa_r+0xa4e>
 800696c:	2339      	movs	r3, #57	; 0x39
 800696e:	9a04      	ldr	r2, [sp, #16]
 8006970:	7013      	strb	r3, [r2, #0]
 8006972:	463b      	mov	r3, r7
 8006974:	461f      	mov	r7, r3
 8006976:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800697a:	3b01      	subs	r3, #1
 800697c:	2a39      	cmp	r2, #57	; 0x39
 800697e:	d06b      	beq.n	8006a58 <_dtoa_r+0xb88>
 8006980:	3201      	adds	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	e74a      	b.n	800681c <_dtoa_r+0x94c>
 8006986:	2a00      	cmp	r2, #0
 8006988:	dd07      	ble.n	800699a <_dtoa_r+0xaca>
 800698a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800698e:	d0ed      	beq.n	800696c <_dtoa_r+0xa9c>
 8006990:	9a04      	ldr	r2, [sp, #16]
 8006992:	f109 0301 	add.w	r3, r9, #1
 8006996:	7013      	strb	r3, [r2, #0]
 8006998:	e740      	b.n	800681c <_dtoa_r+0x94c>
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800699e:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d042      	beq.n	8006a2c <_dtoa_r+0xb5c>
 80069a6:	4651      	mov	r1, sl
 80069a8:	2300      	movs	r3, #0
 80069aa:	220a      	movs	r2, #10
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 f9d1 	bl	8006d54 <__multadd>
 80069b2:	45b0      	cmp	r8, r6
 80069b4:	4682      	mov	sl, r0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	f04f 020a 	mov.w	r2, #10
 80069be:	4641      	mov	r1, r8
 80069c0:	4628      	mov	r0, r5
 80069c2:	d107      	bne.n	80069d4 <_dtoa_r+0xb04>
 80069c4:	f000 f9c6 	bl	8006d54 <__multadd>
 80069c8:	4680      	mov	r8, r0
 80069ca:	4606      	mov	r6, r0
 80069cc:	9b08      	ldr	r3, [sp, #32]
 80069ce:	3301      	adds	r3, #1
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	e775      	b.n	80068c0 <_dtoa_r+0x9f0>
 80069d4:	f000 f9be 	bl	8006d54 <__multadd>
 80069d8:	4631      	mov	r1, r6
 80069da:	4680      	mov	r8, r0
 80069dc:	2300      	movs	r3, #0
 80069de:	220a      	movs	r2, #10
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 f9b7 	bl	8006d54 <__multadd>
 80069e6:	4606      	mov	r6, r0
 80069e8:	e7f0      	b.n	80069cc <_dtoa_r+0xafc>
 80069ea:	9b08      	ldr	r3, [sp, #32]
 80069ec:	9306      	str	r3, [sp, #24]
 80069ee:	9f03      	ldr	r7, [sp, #12]
 80069f0:	4621      	mov	r1, r4
 80069f2:	4650      	mov	r0, sl
 80069f4:	f7ff f9e2 	bl	8005dbc <quorem>
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069fe:	f807 9b01 	strb.w	r9, [r7], #1
 8006a02:	1afa      	subs	r2, r7, r3
 8006a04:	9b06      	ldr	r3, [sp, #24]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	dd07      	ble.n	8006a1a <_dtoa_r+0xb4a>
 8006a0a:	4651      	mov	r1, sl
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	220a      	movs	r2, #10
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 f99f 	bl	8006d54 <__multadd>
 8006a16:	4682      	mov	sl, r0
 8006a18:	e7ea      	b.n	80069f0 <_dtoa_r+0xb20>
 8006a1a:	9b06      	ldr	r3, [sp, #24]
 8006a1c:	f04f 0800 	mov.w	r8, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bfcc      	ite	gt
 8006a24:	461f      	movgt	r7, r3
 8006a26:	2701      	movle	r7, #1
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	441f      	add	r7, r3
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4628      	mov	r0, r5
 8006a32:	f000 fb85 	bl	8007140 <__lshift>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4682      	mov	sl, r0
 8006a3a:	f000 fbed 	bl	8007218 <__mcmp>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	dc97      	bgt.n	8006972 <_dtoa_r+0xaa2>
 8006a42:	d102      	bne.n	8006a4a <_dtoa_r+0xb7a>
 8006a44:	f019 0f01 	tst.w	r9, #1
 8006a48:	d193      	bne.n	8006972 <_dtoa_r+0xaa2>
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	461f      	mov	r7, r3
 8006a4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a52:	2a30      	cmp	r2, #48	; 0x30
 8006a54:	d0fa      	beq.n	8006a4c <_dtoa_r+0xb7c>
 8006a56:	e6e1      	b.n	800681c <_dtoa_r+0x94c>
 8006a58:	9a03      	ldr	r2, [sp, #12]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d18a      	bne.n	8006974 <_dtoa_r+0xaa4>
 8006a5e:	2331      	movs	r3, #49	; 0x31
 8006a60:	f10b 0b01 	add.w	fp, fp, #1
 8006a64:	e797      	b.n	8006996 <_dtoa_r+0xac6>
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <_dtoa_r+0xbc0>)
 8006a68:	f7ff ba9f 	b.w	8005faa <_dtoa_r+0xda>
 8006a6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f47f aa77 	bne.w	8005f62 <_dtoa_r+0x92>
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <_dtoa_r+0xbc4>)
 8006a76:	f7ff ba98 	b.w	8005faa <_dtoa_r+0xda>
 8006a7a:	9b06      	ldr	r3, [sp, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dcb6      	bgt.n	80069ee <_dtoa_r+0xb1e>
 8006a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	f73f aeb5 	bgt.w	80067f2 <_dtoa_r+0x922>
 8006a88:	e7b1      	b.n	80069ee <_dtoa_r+0xb1e>
 8006a8a:	bf00      	nop
 8006a8c:	0800a480 	.word	0x0800a480
 8006a90:	0800a3db 	.word	0x0800a3db
 8006a94:	0800a404 	.word	0x0800a404

08006a98 <_free_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4605      	mov	r5, r0
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	d040      	beq.n	8006b22 <_free_r+0x8a>
 8006aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa4:	1f0c      	subs	r4, r1, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bfb8      	it	lt
 8006aaa:	18e4      	addlt	r4, r4, r3
 8006aac:	f000 f8e4 	bl	8006c78 <__malloc_lock>
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <_free_r+0x8c>)
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	b933      	cbnz	r3, 8006ac4 <_free_r+0x2c>
 8006ab6:	6063      	str	r3, [r4, #4]
 8006ab8:	6014      	str	r4, [r2, #0]
 8006aba:	4628      	mov	r0, r5
 8006abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ac0:	f000 b8e0 	b.w	8006c84 <__malloc_unlock>
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	d908      	bls.n	8006ada <_free_r+0x42>
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	1821      	adds	r1, r4, r0
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf01      	itttt	eq
 8006ad0:	6819      	ldreq	r1, [r3, #0]
 8006ad2:	685b      	ldreq	r3, [r3, #4]
 8006ad4:	1809      	addeq	r1, r1, r0
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	e7ed      	b.n	8006ab6 <_free_r+0x1e>
 8006ada:	461a      	mov	r2, r3
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b10b      	cbz	r3, 8006ae4 <_free_r+0x4c>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d9fa      	bls.n	8006ada <_free_r+0x42>
 8006ae4:	6811      	ldr	r1, [r2, #0]
 8006ae6:	1850      	adds	r0, r2, r1
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d10b      	bne.n	8006b04 <_free_r+0x6c>
 8006aec:	6820      	ldr	r0, [r4, #0]
 8006aee:	4401      	add	r1, r0
 8006af0:	1850      	adds	r0, r2, r1
 8006af2:	4283      	cmp	r3, r0
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	d1e0      	bne.n	8006aba <_free_r+0x22>
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	4408      	add	r0, r1
 8006afe:	6010      	str	r0, [r2, #0]
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	e7da      	b.n	8006aba <_free_r+0x22>
 8006b04:	d902      	bls.n	8006b0c <_free_r+0x74>
 8006b06:	230c      	movs	r3, #12
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	e7d6      	b.n	8006aba <_free_r+0x22>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	1821      	adds	r1, r4, r0
 8006b10:	428b      	cmp	r3, r1
 8006b12:	bf01      	itttt	eq
 8006b14:	6819      	ldreq	r1, [r3, #0]
 8006b16:	685b      	ldreq	r3, [r3, #4]
 8006b18:	1809      	addeq	r1, r1, r0
 8006b1a:	6021      	streq	r1, [r4, #0]
 8006b1c:	6063      	str	r3, [r4, #4]
 8006b1e:	6054      	str	r4, [r2, #4]
 8006b20:	e7cb      	b.n	8006aba <_free_r+0x22>
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	200009f0 	.word	0x200009f0

08006b28 <malloc>:
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <malloc+0xc>)
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f000 b823 	b.w	8006b78 <_malloc_r>
 8006b32:	bf00      	nop
 8006b34:	2000006c 	.word	0x2000006c

08006b38 <sbrk_aligned>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4e0e      	ldr	r6, [pc, #56]	; (8006b74 <sbrk_aligned+0x3c>)
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	6831      	ldr	r1, [r6, #0]
 8006b40:	4605      	mov	r5, r0
 8006b42:	b911      	cbnz	r1, 8006b4a <sbrk_aligned+0x12>
 8006b44:	f001 fd8c 	bl	8008660 <_sbrk_r>
 8006b48:	6030      	str	r0, [r6, #0]
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f001 fd87 	bl	8008660 <_sbrk_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d00a      	beq.n	8006b6c <sbrk_aligned+0x34>
 8006b56:	1cc4      	adds	r4, r0, #3
 8006b58:	f024 0403 	bic.w	r4, r4, #3
 8006b5c:	42a0      	cmp	r0, r4
 8006b5e:	d007      	beq.n	8006b70 <sbrk_aligned+0x38>
 8006b60:	1a21      	subs	r1, r4, r0
 8006b62:	4628      	mov	r0, r5
 8006b64:	f001 fd7c 	bl	8008660 <_sbrk_r>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d101      	bne.n	8006b70 <sbrk_aligned+0x38>
 8006b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b70:	4620      	mov	r0, r4
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	200009f4 	.word	0x200009f4

08006b78 <_malloc_r>:
 8006b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b7c:	1ccd      	adds	r5, r1, #3
 8006b7e:	f025 0503 	bic.w	r5, r5, #3
 8006b82:	3508      	adds	r5, #8
 8006b84:	2d0c      	cmp	r5, #12
 8006b86:	bf38      	it	cc
 8006b88:	250c      	movcc	r5, #12
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	db01      	blt.n	8006b94 <_malloc_r+0x1c>
 8006b90:	42a9      	cmp	r1, r5
 8006b92:	d905      	bls.n	8006ba0 <_malloc_r+0x28>
 8006b94:	230c      	movs	r3, #12
 8006b96:	2600      	movs	r6, #0
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c74 <_malloc_r+0xfc>
 8006ba4:	f000 f868 	bl	8006c78 <__malloc_lock>
 8006ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bac:	461c      	mov	r4, r3
 8006bae:	bb5c      	cbnz	r4, 8006c08 <_malloc_r+0x90>
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f7ff ffc0 	bl	8006b38 <sbrk_aligned>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	4604      	mov	r4, r0
 8006bbc:	d155      	bne.n	8006c6a <_malloc_r+0xf2>
 8006bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8006bc2:	4626      	mov	r6, r4
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	d145      	bne.n	8006c54 <_malloc_r+0xdc>
 8006bc8:	2c00      	cmp	r4, #0
 8006bca:	d048      	beq.n	8006c5e <_malloc_r+0xe6>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	eb04 0903 	add.w	r9, r4, r3
 8006bd6:	f001 fd43 	bl	8008660 <_sbrk_r>
 8006bda:	4581      	cmp	r9, r0
 8006bdc:	d13f      	bne.n	8006c5e <_malloc_r+0xe6>
 8006bde:	6821      	ldr	r1, [r4, #0]
 8006be0:	4638      	mov	r0, r7
 8006be2:	1a6d      	subs	r5, r5, r1
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7ff ffa7 	bl	8006b38 <sbrk_aligned>
 8006bea:	3001      	adds	r0, #1
 8006bec:	d037      	beq.n	8006c5e <_malloc_r+0xe6>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	442b      	add	r3, r5
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d038      	beq.n	8006c6e <_malloc_r+0xf6>
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	42a2      	cmp	r2, r4
 8006c00:	d12b      	bne.n	8006c5a <_malloc_r+0xe2>
 8006c02:	2200      	movs	r2, #0
 8006c04:	605a      	str	r2, [r3, #4]
 8006c06:	e00f      	b.n	8006c28 <_malloc_r+0xb0>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	1b52      	subs	r2, r2, r5
 8006c0c:	d41f      	bmi.n	8006c4e <_malloc_r+0xd6>
 8006c0e:	2a0b      	cmp	r2, #11
 8006c10:	d917      	bls.n	8006c42 <_malloc_r+0xca>
 8006c12:	1961      	adds	r1, r4, r5
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	6025      	str	r5, [r4, #0]
 8006c18:	bf18      	it	ne
 8006c1a:	6059      	strne	r1, [r3, #4]
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	bf08      	it	eq
 8006c20:	f8c8 1000 	streq.w	r1, [r8]
 8006c24:	5162      	str	r2, [r4, r5]
 8006c26:	604b      	str	r3, [r1, #4]
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f104 060b 	add.w	r6, r4, #11
 8006c2e:	f000 f829 	bl	8006c84 <__malloc_unlock>
 8006c32:	f026 0607 	bic.w	r6, r6, #7
 8006c36:	1d23      	adds	r3, r4, #4
 8006c38:	1af2      	subs	r2, r6, r3
 8006c3a:	d0ae      	beq.n	8006b9a <_malloc_r+0x22>
 8006c3c:	1b9b      	subs	r3, r3, r6
 8006c3e:	50a3      	str	r3, [r4, r2]
 8006c40:	e7ab      	b.n	8006b9a <_malloc_r+0x22>
 8006c42:	42a3      	cmp	r3, r4
 8006c44:	6862      	ldr	r2, [r4, #4]
 8006c46:	d1dd      	bne.n	8006c04 <_malloc_r+0x8c>
 8006c48:	f8c8 2000 	str.w	r2, [r8]
 8006c4c:	e7ec      	b.n	8006c28 <_malloc_r+0xb0>
 8006c4e:	4623      	mov	r3, r4
 8006c50:	6864      	ldr	r4, [r4, #4]
 8006c52:	e7ac      	b.n	8006bae <_malloc_r+0x36>
 8006c54:	4634      	mov	r4, r6
 8006c56:	6876      	ldr	r6, [r6, #4]
 8006c58:	e7b4      	b.n	8006bc4 <_malloc_r+0x4c>
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	e7cc      	b.n	8006bf8 <_malloc_r+0x80>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	4638      	mov	r0, r7
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	f000 f80e 	bl	8006c84 <__malloc_unlock>
 8006c68:	e797      	b.n	8006b9a <_malloc_r+0x22>
 8006c6a:	6025      	str	r5, [r4, #0]
 8006c6c:	e7dc      	b.n	8006c28 <_malloc_r+0xb0>
 8006c6e:	605b      	str	r3, [r3, #4]
 8006c70:	deff      	udf	#255	; 0xff
 8006c72:	bf00      	nop
 8006c74:	200009f0 	.word	0x200009f0

08006c78 <__malloc_lock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__malloc_lock+0x8>)
 8006c7a:	f7ff b882 	b.w	8005d82 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	200009ec 	.word	0x200009ec

08006c84 <__malloc_unlock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__malloc_unlock+0x8>)
 8006c86:	f7ff b87d 	b.w	8005d84 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	200009ec 	.word	0x200009ec

08006c90 <_Balloc>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	69c6      	ldr	r6, [r0, #28]
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	b976      	cbnz	r6, 8006cb8 <_Balloc+0x28>
 8006c9a:	2010      	movs	r0, #16
 8006c9c:	f7ff ff44 	bl	8006b28 <malloc>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	61e0      	str	r0, [r4, #28]
 8006ca4:	b920      	cbnz	r0, 8006cb0 <_Balloc+0x20>
 8006ca6:	216b      	movs	r1, #107	; 0x6b
 8006ca8:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <_Balloc+0x78>)
 8006caa:	4818      	ldr	r0, [pc, #96]	; (8006d0c <_Balloc+0x7c>)
 8006cac:	f001 fcfc 	bl	80086a8 <__assert_func>
 8006cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb4:	6006      	str	r6, [r0, #0]
 8006cb6:	60c6      	str	r6, [r0, #12]
 8006cb8:	69e6      	ldr	r6, [r4, #28]
 8006cba:	68f3      	ldr	r3, [r6, #12]
 8006cbc:	b183      	cbz	r3, 8006ce0 <_Balloc+0x50>
 8006cbe:	69e3      	ldr	r3, [r4, #28]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cc6:	b9b8      	cbnz	r0, 8006cf8 <_Balloc+0x68>
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f605 	lsl.w	r6, r1, r5
 8006cce:	1d72      	adds	r2, r6, #5
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	0092      	lsls	r2, r2, #2
 8006cd4:	f001 fd06 	bl	80086e4 <_calloc_r>
 8006cd8:	b160      	cbz	r0, 8006cf4 <_Balloc+0x64>
 8006cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cde:	e00e      	b.n	8006cfe <_Balloc+0x6e>
 8006ce0:	2221      	movs	r2, #33	; 0x21
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f001 fcfd 	bl	80086e4 <_calloc_r>
 8006cea:	69e3      	ldr	r3, [r4, #28]
 8006cec:	60f0      	str	r0, [r6, #12]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e4      	bne.n	8006cbe <_Balloc+0x2e>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	6802      	ldr	r2, [r0, #0]
 8006cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d04:	e7f7      	b.n	8006cf6 <_Balloc+0x66>
 8006d06:	bf00      	nop
 8006d08:	0800a411 	.word	0x0800a411
 8006d0c:	0800a491 	.word	0x0800a491

08006d10 <_Bfree>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	69c6      	ldr	r6, [r0, #28]
 8006d14:	4605      	mov	r5, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	b976      	cbnz	r6, 8006d38 <_Bfree+0x28>
 8006d1a:	2010      	movs	r0, #16
 8006d1c:	f7ff ff04 	bl	8006b28 <malloc>
 8006d20:	4602      	mov	r2, r0
 8006d22:	61e8      	str	r0, [r5, #28]
 8006d24:	b920      	cbnz	r0, 8006d30 <_Bfree+0x20>
 8006d26:	218f      	movs	r1, #143	; 0x8f
 8006d28:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <_Bfree+0x3c>)
 8006d2a:	4809      	ldr	r0, [pc, #36]	; (8006d50 <_Bfree+0x40>)
 8006d2c:	f001 fcbc 	bl	80086a8 <__assert_func>
 8006d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d34:	6006      	str	r6, [r0, #0]
 8006d36:	60c6      	str	r6, [r0, #12]
 8006d38:	b13c      	cbz	r4, 8006d4a <_Bfree+0x3a>
 8006d3a:	69eb      	ldr	r3, [r5, #28]
 8006d3c:	6862      	ldr	r2, [r4, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d44:	6021      	str	r1, [r4, #0]
 8006d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	0800a411 	.word	0x0800a411
 8006d50:	0800a491 	.word	0x0800a491

08006d54 <__multadd>:
 8006d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	461e      	mov	r6, r3
 8006d5e:	2000      	movs	r0, #0
 8006d60:	690d      	ldr	r5, [r1, #16]
 8006d62:	f101 0c14 	add.w	ip, r1, #20
 8006d66:	f8dc 3000 	ldr.w	r3, [ip]
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	b299      	uxth	r1, r3
 8006d6e:	fb02 6101 	mla	r1, r2, r1, r6
 8006d72:	0c1e      	lsrs	r6, r3, #16
 8006d74:	0c0b      	lsrs	r3, r1, #16
 8006d76:	fb02 3306 	mla	r3, r2, r6, r3
 8006d7a:	b289      	uxth	r1, r1
 8006d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d80:	4285      	cmp	r5, r0
 8006d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d86:	f84c 1b04 	str.w	r1, [ip], #4
 8006d8a:	dcec      	bgt.n	8006d66 <__multadd+0x12>
 8006d8c:	b30e      	cbz	r6, 8006dd2 <__multadd+0x7e>
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	dc19      	bgt.n	8006dc8 <__multadd+0x74>
 8006d94:	6861      	ldr	r1, [r4, #4]
 8006d96:	4638      	mov	r0, r7
 8006d98:	3101      	adds	r1, #1
 8006d9a:	f7ff ff79 	bl	8006c90 <_Balloc>
 8006d9e:	4680      	mov	r8, r0
 8006da0:	b928      	cbnz	r0, 8006dae <__multadd+0x5a>
 8006da2:	4602      	mov	r2, r0
 8006da4:	21ba      	movs	r1, #186	; 0xba
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <__multadd+0x84>)
 8006da8:	480c      	ldr	r0, [pc, #48]	; (8006ddc <__multadd+0x88>)
 8006daa:	f001 fc7d 	bl	80086a8 <__assert_func>
 8006dae:	6922      	ldr	r2, [r4, #16]
 8006db0:	f104 010c 	add.w	r1, r4, #12
 8006db4:	3202      	adds	r2, #2
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	300c      	adds	r0, #12
 8006dba:	f001 fc61 	bl	8008680 <memcpy>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ffa5 	bl	8006d10 <_Bfree>
 8006dc6:	4644      	mov	r4, r8
 8006dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dcc:	3501      	adds	r5, #1
 8006dce:	615e      	str	r6, [r3, #20]
 8006dd0:	6125      	str	r5, [r4, #16]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	0800a480 	.word	0x0800a480
 8006ddc:	0800a491 	.word	0x0800a491

08006de0 <__s2b>:
 8006de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de4:	4615      	mov	r5, r2
 8006de6:	2209      	movs	r2, #9
 8006de8:	461f      	mov	r7, r3
 8006dea:	3308      	adds	r3, #8
 8006dec:	460c      	mov	r4, r1
 8006dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df2:	4606      	mov	r6, r0
 8006df4:	2201      	movs	r2, #1
 8006df6:	2100      	movs	r1, #0
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	db09      	blt.n	8006e10 <__s2b+0x30>
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff ff47 	bl	8006c90 <_Balloc>
 8006e02:	b940      	cbnz	r0, 8006e16 <__s2b+0x36>
 8006e04:	4602      	mov	r2, r0
 8006e06:	21d3      	movs	r1, #211	; 0xd3
 8006e08:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <__s2b+0x8c>)
 8006e0a:	4819      	ldr	r0, [pc, #100]	; (8006e70 <__s2b+0x90>)
 8006e0c:	f001 fc4c 	bl	80086a8 <__assert_func>
 8006e10:	0052      	lsls	r2, r2, #1
 8006e12:	3101      	adds	r1, #1
 8006e14:	e7f0      	b.n	8006df8 <__s2b+0x18>
 8006e16:	9b08      	ldr	r3, [sp, #32]
 8006e18:	2d09      	cmp	r5, #9
 8006e1a:	6143      	str	r3, [r0, #20]
 8006e1c:	f04f 0301 	mov.w	r3, #1
 8006e20:	6103      	str	r3, [r0, #16]
 8006e22:	dd16      	ble.n	8006e52 <__s2b+0x72>
 8006e24:	f104 0909 	add.w	r9, r4, #9
 8006e28:	46c8      	mov	r8, r9
 8006e2a:	442c      	add	r4, r5
 8006e2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e30:	4601      	mov	r1, r0
 8006e32:	220a      	movs	r2, #10
 8006e34:	4630      	mov	r0, r6
 8006e36:	3b30      	subs	r3, #48	; 0x30
 8006e38:	f7ff ff8c 	bl	8006d54 <__multadd>
 8006e3c:	45a0      	cmp	r8, r4
 8006e3e:	d1f5      	bne.n	8006e2c <__s2b+0x4c>
 8006e40:	f1a5 0408 	sub.w	r4, r5, #8
 8006e44:	444c      	add	r4, r9
 8006e46:	1b2d      	subs	r5, r5, r4
 8006e48:	1963      	adds	r3, r4, r5
 8006e4a:	42bb      	cmp	r3, r7
 8006e4c:	db04      	blt.n	8006e58 <__s2b+0x78>
 8006e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e52:	2509      	movs	r5, #9
 8006e54:	340a      	adds	r4, #10
 8006e56:	e7f6      	b.n	8006e46 <__s2b+0x66>
 8006e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	220a      	movs	r2, #10
 8006e60:	4630      	mov	r0, r6
 8006e62:	3b30      	subs	r3, #48	; 0x30
 8006e64:	f7ff ff76 	bl	8006d54 <__multadd>
 8006e68:	e7ee      	b.n	8006e48 <__s2b+0x68>
 8006e6a:	bf00      	nop
 8006e6c:	0800a480 	.word	0x0800a480
 8006e70:	0800a491 	.word	0x0800a491

08006e74 <__hi0bits>:
 8006e74:	0c02      	lsrs	r2, r0, #16
 8006e76:	0412      	lsls	r2, r2, #16
 8006e78:	4603      	mov	r3, r0
 8006e7a:	b9ca      	cbnz	r2, 8006eb0 <__hi0bits+0x3c>
 8006e7c:	0403      	lsls	r3, r0, #16
 8006e7e:	2010      	movs	r0, #16
 8006e80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e84:	bf04      	itt	eq
 8006e86:	021b      	lsleq	r3, r3, #8
 8006e88:	3008      	addeq	r0, #8
 8006e8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e8e:	bf04      	itt	eq
 8006e90:	011b      	lsleq	r3, r3, #4
 8006e92:	3004      	addeq	r0, #4
 8006e94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e98:	bf04      	itt	eq
 8006e9a:	009b      	lsleq	r3, r3, #2
 8006e9c:	3002      	addeq	r0, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	db05      	blt.n	8006eae <__hi0bits+0x3a>
 8006ea2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ea6:	f100 0001 	add.w	r0, r0, #1
 8006eaa:	bf08      	it	eq
 8006eac:	2020      	moveq	r0, #32
 8006eae:	4770      	bx	lr
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e7e5      	b.n	8006e80 <__hi0bits+0xc>

08006eb4 <__lo0bits>:
 8006eb4:	6803      	ldr	r3, [r0, #0]
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f013 0007 	ands.w	r0, r3, #7
 8006ebc:	d00b      	beq.n	8006ed6 <__lo0bits+0x22>
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d421      	bmi.n	8006f06 <__lo0bits+0x52>
 8006ec2:	0798      	lsls	r0, r3, #30
 8006ec4:	bf49      	itett	mi
 8006ec6:	085b      	lsrmi	r3, r3, #1
 8006ec8:	089b      	lsrpl	r3, r3, #2
 8006eca:	2001      	movmi	r0, #1
 8006ecc:	6013      	strmi	r3, [r2, #0]
 8006ece:	bf5c      	itt	pl
 8006ed0:	2002      	movpl	r0, #2
 8006ed2:	6013      	strpl	r3, [r2, #0]
 8006ed4:	4770      	bx	lr
 8006ed6:	b299      	uxth	r1, r3
 8006ed8:	b909      	cbnz	r1, 8006ede <__lo0bits+0x2a>
 8006eda:	2010      	movs	r0, #16
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	b2d9      	uxtb	r1, r3
 8006ee0:	b909      	cbnz	r1, 8006ee6 <__lo0bits+0x32>
 8006ee2:	3008      	adds	r0, #8
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	0719      	lsls	r1, r3, #28
 8006ee8:	bf04      	itt	eq
 8006eea:	091b      	lsreq	r3, r3, #4
 8006eec:	3004      	addeq	r0, #4
 8006eee:	0799      	lsls	r1, r3, #30
 8006ef0:	bf04      	itt	eq
 8006ef2:	089b      	lsreq	r3, r3, #2
 8006ef4:	3002      	addeq	r0, #2
 8006ef6:	07d9      	lsls	r1, r3, #31
 8006ef8:	d403      	bmi.n	8006f02 <__lo0bits+0x4e>
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	f100 0001 	add.w	r0, r0, #1
 8006f00:	d003      	beq.n	8006f0a <__lo0bits+0x56>
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4770      	bx	lr
 8006f06:	2000      	movs	r0, #0
 8006f08:	4770      	bx	lr
 8006f0a:	2020      	movs	r0, #32
 8006f0c:	4770      	bx	lr
	...

08006f10 <__i2b>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	460c      	mov	r4, r1
 8006f14:	2101      	movs	r1, #1
 8006f16:	f7ff febb 	bl	8006c90 <_Balloc>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	b928      	cbnz	r0, 8006f2a <__i2b+0x1a>
 8006f1e:	f240 1145 	movw	r1, #325	; 0x145
 8006f22:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <__i2b+0x24>)
 8006f24:	4804      	ldr	r0, [pc, #16]	; (8006f38 <__i2b+0x28>)
 8006f26:	f001 fbbf 	bl	80086a8 <__assert_func>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	6144      	str	r4, [r0, #20]
 8006f2e:	6103      	str	r3, [r0, #16]
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop
 8006f34:	0800a480 	.word	0x0800a480
 8006f38:	0800a491 	.word	0x0800a491

08006f3c <__multiply>:
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	4691      	mov	r9, r2
 8006f42:	690a      	ldr	r2, [r1, #16]
 8006f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f48:	460c      	mov	r4, r1
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	bfbe      	ittt	lt
 8006f4e:	460b      	movlt	r3, r1
 8006f50:	464c      	movlt	r4, r9
 8006f52:	4699      	movlt	r9, r3
 8006f54:	6927      	ldr	r7, [r4, #16]
 8006f56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f5a:	68a3      	ldr	r3, [r4, #8]
 8006f5c:	6861      	ldr	r1, [r4, #4]
 8006f5e:	eb07 060a 	add.w	r6, r7, sl
 8006f62:	42b3      	cmp	r3, r6
 8006f64:	b085      	sub	sp, #20
 8006f66:	bfb8      	it	lt
 8006f68:	3101      	addlt	r1, #1
 8006f6a:	f7ff fe91 	bl	8006c90 <_Balloc>
 8006f6e:	b930      	cbnz	r0, 8006f7e <__multiply+0x42>
 8006f70:	4602      	mov	r2, r0
 8006f72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f76:	4b43      	ldr	r3, [pc, #268]	; (8007084 <__multiply+0x148>)
 8006f78:	4843      	ldr	r0, [pc, #268]	; (8007088 <__multiply+0x14c>)
 8006f7a:	f001 fb95 	bl	80086a8 <__assert_func>
 8006f7e:	f100 0514 	add.w	r5, r0, #20
 8006f82:	462b      	mov	r3, r5
 8006f84:	2200      	movs	r2, #0
 8006f86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f8a:	4543      	cmp	r3, r8
 8006f8c:	d321      	bcc.n	8006fd2 <__multiply+0x96>
 8006f8e:	f104 0314 	add.w	r3, r4, #20
 8006f92:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f96:	f109 0314 	add.w	r3, r9, #20
 8006f9a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f9e:	9202      	str	r2, [sp, #8]
 8006fa0:	1b3a      	subs	r2, r7, r4
 8006fa2:	3a15      	subs	r2, #21
 8006fa4:	f022 0203 	bic.w	r2, r2, #3
 8006fa8:	3204      	adds	r2, #4
 8006faa:	f104 0115 	add.w	r1, r4, #21
 8006fae:	428f      	cmp	r7, r1
 8006fb0:	bf38      	it	cc
 8006fb2:	2204      	movcc	r2, #4
 8006fb4:	9201      	str	r2, [sp, #4]
 8006fb6:	9a02      	ldr	r2, [sp, #8]
 8006fb8:	9303      	str	r3, [sp, #12]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d80c      	bhi.n	8006fd8 <__multiply+0x9c>
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	dd03      	ble.n	8006fca <__multiply+0x8e>
 8006fc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d05a      	beq.n	8007080 <__multiply+0x144>
 8006fca:	6106      	str	r6, [r0, #16]
 8006fcc:	b005      	add	sp, #20
 8006fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd2:	f843 2b04 	str.w	r2, [r3], #4
 8006fd6:	e7d8      	b.n	8006f8a <__multiply+0x4e>
 8006fd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fdc:	f1ba 0f00 	cmp.w	sl, #0
 8006fe0:	d023      	beq.n	800702a <__multiply+0xee>
 8006fe2:	46a9      	mov	r9, r5
 8006fe4:	f04f 0c00 	mov.w	ip, #0
 8006fe8:	f104 0e14 	add.w	lr, r4, #20
 8006fec:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ff0:	f8d9 1000 	ldr.w	r1, [r9]
 8006ff4:	fa1f fb82 	uxth.w	fp, r2
 8006ff8:	b289      	uxth	r1, r1
 8006ffa:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ffe:	4461      	add	r1, ip
 8007000:	f8d9 c000 	ldr.w	ip, [r9]
 8007004:	0c12      	lsrs	r2, r2, #16
 8007006:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800700a:	fb0a c202 	mla	r2, sl, r2, ip
 800700e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007012:	b289      	uxth	r1, r1
 8007014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007018:	4577      	cmp	r7, lr
 800701a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800701e:	f849 1b04 	str.w	r1, [r9], #4
 8007022:	d8e3      	bhi.n	8006fec <__multiply+0xb0>
 8007024:	9a01      	ldr	r2, [sp, #4]
 8007026:	f845 c002 	str.w	ip, [r5, r2]
 800702a:	9a03      	ldr	r2, [sp, #12]
 800702c:	3304      	adds	r3, #4
 800702e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007032:	f1b9 0f00 	cmp.w	r9, #0
 8007036:	d021      	beq.n	800707c <__multiply+0x140>
 8007038:	46ae      	mov	lr, r5
 800703a:	f04f 0a00 	mov.w	sl, #0
 800703e:	6829      	ldr	r1, [r5, #0]
 8007040:	f104 0c14 	add.w	ip, r4, #20
 8007044:	f8bc b000 	ldrh.w	fp, [ip]
 8007048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800704c:	b289      	uxth	r1, r1
 800704e:	fb09 220b 	mla	r2, r9, fp, r2
 8007052:	4452      	add	r2, sl
 8007054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007058:	f84e 1b04 	str.w	r1, [lr], #4
 800705c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007064:	f8be 1000 	ldrh.w	r1, [lr]
 8007068:	4567      	cmp	r7, ip
 800706a:	fb09 110a 	mla	r1, r9, sl, r1
 800706e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007072:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007076:	d8e5      	bhi.n	8007044 <__multiply+0x108>
 8007078:	9a01      	ldr	r2, [sp, #4]
 800707a:	50a9      	str	r1, [r5, r2]
 800707c:	3504      	adds	r5, #4
 800707e:	e79a      	b.n	8006fb6 <__multiply+0x7a>
 8007080:	3e01      	subs	r6, #1
 8007082:	e79c      	b.n	8006fbe <__multiply+0x82>
 8007084:	0800a480 	.word	0x0800a480
 8007088:	0800a491 	.word	0x0800a491

0800708c <__pow5mult>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	4615      	mov	r5, r2
 8007092:	f012 0203 	ands.w	r2, r2, #3
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	d007      	beq.n	80070ac <__pow5mult+0x20>
 800709c:	4c25      	ldr	r4, [pc, #148]	; (8007134 <__pow5mult+0xa8>)
 800709e:	3a01      	subs	r2, #1
 80070a0:	2300      	movs	r3, #0
 80070a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070a6:	f7ff fe55 	bl	8006d54 <__multadd>
 80070aa:	4607      	mov	r7, r0
 80070ac:	10ad      	asrs	r5, r5, #2
 80070ae:	d03d      	beq.n	800712c <__pow5mult+0xa0>
 80070b0:	69f4      	ldr	r4, [r6, #28]
 80070b2:	b97c      	cbnz	r4, 80070d4 <__pow5mult+0x48>
 80070b4:	2010      	movs	r0, #16
 80070b6:	f7ff fd37 	bl	8006b28 <malloc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	61f0      	str	r0, [r6, #28]
 80070be:	b928      	cbnz	r0, 80070cc <__pow5mult+0x40>
 80070c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070c4:	4b1c      	ldr	r3, [pc, #112]	; (8007138 <__pow5mult+0xac>)
 80070c6:	481d      	ldr	r0, [pc, #116]	; (800713c <__pow5mult+0xb0>)
 80070c8:	f001 faee 	bl	80086a8 <__assert_func>
 80070cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d0:	6004      	str	r4, [r0, #0]
 80070d2:	60c4      	str	r4, [r0, #12]
 80070d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070dc:	b94c      	cbnz	r4, 80070f2 <__pow5mult+0x66>
 80070de:	f240 2171 	movw	r1, #625	; 0x271
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ff14 	bl	8006f10 <__i2b>
 80070e8:	2300      	movs	r3, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	07eb      	lsls	r3, r5, #31
 80070f8:	d50a      	bpl.n	8007110 <__pow5mult+0x84>
 80070fa:	4639      	mov	r1, r7
 80070fc:	4622      	mov	r2, r4
 80070fe:	4630      	mov	r0, r6
 8007100:	f7ff ff1c 	bl	8006f3c <__multiply>
 8007104:	4680      	mov	r8, r0
 8007106:	4639      	mov	r1, r7
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff fe01 	bl	8006d10 <_Bfree>
 800710e:	4647      	mov	r7, r8
 8007110:	106d      	asrs	r5, r5, #1
 8007112:	d00b      	beq.n	800712c <__pow5mult+0xa0>
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	b938      	cbnz	r0, 8007128 <__pow5mult+0x9c>
 8007118:	4622      	mov	r2, r4
 800711a:	4621      	mov	r1, r4
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ff0d 	bl	8006f3c <__multiply>
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	f8c0 9000 	str.w	r9, [r0]
 8007128:	4604      	mov	r4, r0
 800712a:	e7e4      	b.n	80070f6 <__pow5mult+0x6a>
 800712c:	4638      	mov	r0, r7
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	bf00      	nop
 8007134:	0800a5e0 	.word	0x0800a5e0
 8007138:	0800a411 	.word	0x0800a411
 800713c:	0800a491 	.word	0x0800a491

08007140 <__lshift>:
 8007140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	460c      	mov	r4, r1
 8007146:	4607      	mov	r7, r0
 8007148:	4691      	mov	r9, r2
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	6849      	ldr	r1, [r1, #4]
 800714e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007158:	f108 0601 	add.w	r6, r8, #1
 800715c:	42b3      	cmp	r3, r6
 800715e:	db0b      	blt.n	8007178 <__lshift+0x38>
 8007160:	4638      	mov	r0, r7
 8007162:	f7ff fd95 	bl	8006c90 <_Balloc>
 8007166:	4605      	mov	r5, r0
 8007168:	b948      	cbnz	r0, 800717e <__lshift+0x3e>
 800716a:	4602      	mov	r2, r0
 800716c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007170:	4b27      	ldr	r3, [pc, #156]	; (8007210 <__lshift+0xd0>)
 8007172:	4828      	ldr	r0, [pc, #160]	; (8007214 <__lshift+0xd4>)
 8007174:	f001 fa98 	bl	80086a8 <__assert_func>
 8007178:	3101      	adds	r1, #1
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	e7ee      	b.n	800715c <__lshift+0x1c>
 800717e:	2300      	movs	r3, #0
 8007180:	f100 0114 	add.w	r1, r0, #20
 8007184:	f100 0210 	add.w	r2, r0, #16
 8007188:	4618      	mov	r0, r3
 800718a:	4553      	cmp	r3, sl
 800718c:	db33      	blt.n	80071f6 <__lshift+0xb6>
 800718e:	6920      	ldr	r0, [r4, #16]
 8007190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007194:	f104 0314 	add.w	r3, r4, #20
 8007198:	f019 091f 	ands.w	r9, r9, #31
 800719c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071a4:	d02b      	beq.n	80071fe <__lshift+0xbe>
 80071a6:	468a      	mov	sl, r1
 80071a8:	2200      	movs	r2, #0
 80071aa:	f1c9 0e20 	rsb	lr, r9, #32
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	fa00 f009 	lsl.w	r0, r0, r9
 80071b4:	4310      	orrs	r0, r2
 80071b6:	f84a 0b04 	str.w	r0, [sl], #4
 80071ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80071be:	459c      	cmp	ip, r3
 80071c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80071c4:	d8f3      	bhi.n	80071ae <__lshift+0x6e>
 80071c6:	ebac 0304 	sub.w	r3, ip, r4
 80071ca:	3b15      	subs	r3, #21
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	3304      	adds	r3, #4
 80071d2:	f104 0015 	add.w	r0, r4, #21
 80071d6:	4584      	cmp	ip, r0
 80071d8:	bf38      	it	cc
 80071da:	2304      	movcc	r3, #4
 80071dc:	50ca      	str	r2, [r1, r3]
 80071de:	b10a      	cbz	r2, 80071e4 <__lshift+0xa4>
 80071e0:	f108 0602 	add.w	r6, r8, #2
 80071e4:	3e01      	subs	r6, #1
 80071e6:	4638      	mov	r0, r7
 80071e8:	4621      	mov	r1, r4
 80071ea:	612e      	str	r6, [r5, #16]
 80071ec:	f7ff fd90 	bl	8006d10 <_Bfree>
 80071f0:	4628      	mov	r0, r5
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80071fa:	3301      	adds	r3, #1
 80071fc:	e7c5      	b.n	800718a <__lshift+0x4a>
 80071fe:	3904      	subs	r1, #4
 8007200:	f853 2b04 	ldr.w	r2, [r3], #4
 8007204:	459c      	cmp	ip, r3
 8007206:	f841 2f04 	str.w	r2, [r1, #4]!
 800720a:	d8f9      	bhi.n	8007200 <__lshift+0xc0>
 800720c:	e7ea      	b.n	80071e4 <__lshift+0xa4>
 800720e:	bf00      	nop
 8007210:	0800a480 	.word	0x0800a480
 8007214:	0800a491 	.word	0x0800a491

08007218 <__mcmp>:
 8007218:	4603      	mov	r3, r0
 800721a:	690a      	ldr	r2, [r1, #16]
 800721c:	6900      	ldr	r0, [r0, #16]
 800721e:	b530      	push	{r4, r5, lr}
 8007220:	1a80      	subs	r0, r0, r2
 8007222:	d10d      	bne.n	8007240 <__mcmp+0x28>
 8007224:	3314      	adds	r3, #20
 8007226:	3114      	adds	r1, #20
 8007228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800722c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007238:	4295      	cmp	r5, r2
 800723a:	d002      	beq.n	8007242 <__mcmp+0x2a>
 800723c:	d304      	bcc.n	8007248 <__mcmp+0x30>
 800723e:	2001      	movs	r0, #1
 8007240:	bd30      	pop	{r4, r5, pc}
 8007242:	42a3      	cmp	r3, r4
 8007244:	d3f4      	bcc.n	8007230 <__mcmp+0x18>
 8007246:	e7fb      	b.n	8007240 <__mcmp+0x28>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e7f8      	b.n	8007240 <__mcmp+0x28>
	...

08007250 <__mdiff>:
 8007250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	460d      	mov	r5, r1
 8007256:	4607      	mov	r7, r0
 8007258:	4611      	mov	r1, r2
 800725a:	4628      	mov	r0, r5
 800725c:	4614      	mov	r4, r2
 800725e:	f7ff ffdb 	bl	8007218 <__mcmp>
 8007262:	1e06      	subs	r6, r0, #0
 8007264:	d111      	bne.n	800728a <__mdiff+0x3a>
 8007266:	4631      	mov	r1, r6
 8007268:	4638      	mov	r0, r7
 800726a:	f7ff fd11 	bl	8006c90 <_Balloc>
 800726e:	4602      	mov	r2, r0
 8007270:	b928      	cbnz	r0, 800727e <__mdiff+0x2e>
 8007272:	f240 2137 	movw	r1, #567	; 0x237
 8007276:	4b3a      	ldr	r3, [pc, #232]	; (8007360 <__mdiff+0x110>)
 8007278:	483a      	ldr	r0, [pc, #232]	; (8007364 <__mdiff+0x114>)
 800727a:	f001 fa15 	bl	80086a8 <__assert_func>
 800727e:	2301      	movs	r3, #1
 8007280:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007284:	4610      	mov	r0, r2
 8007286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728a:	bfa4      	itt	ge
 800728c:	4623      	movge	r3, r4
 800728e:	462c      	movge	r4, r5
 8007290:	4638      	mov	r0, r7
 8007292:	6861      	ldr	r1, [r4, #4]
 8007294:	bfa6      	itte	ge
 8007296:	461d      	movge	r5, r3
 8007298:	2600      	movge	r6, #0
 800729a:	2601      	movlt	r6, #1
 800729c:	f7ff fcf8 	bl	8006c90 <_Balloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	b918      	cbnz	r0, 80072ac <__mdiff+0x5c>
 80072a4:	f240 2145 	movw	r1, #581	; 0x245
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <__mdiff+0x110>)
 80072aa:	e7e5      	b.n	8007278 <__mdiff+0x28>
 80072ac:	f102 0814 	add.w	r8, r2, #20
 80072b0:	46c2      	mov	sl, r8
 80072b2:	f04f 0c00 	mov.w	ip, #0
 80072b6:	6927      	ldr	r7, [r4, #16]
 80072b8:	60c6      	str	r6, [r0, #12]
 80072ba:	692e      	ldr	r6, [r5, #16]
 80072bc:	f104 0014 	add.w	r0, r4, #20
 80072c0:	f105 0914 	add.w	r9, r5, #20
 80072c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80072c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072cc:	3410      	adds	r4, #16
 80072ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80072d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80072d6:	fa1f f18b 	uxth.w	r1, fp
 80072da:	4461      	add	r1, ip
 80072dc:	fa1f fc83 	uxth.w	ip, r3
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	eba1 010c 	sub.w	r1, r1, ip
 80072e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80072ee:	b289      	uxth	r1, r1
 80072f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80072f4:	454e      	cmp	r6, r9
 80072f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80072fa:	f84a 1b04 	str.w	r1, [sl], #4
 80072fe:	d8e6      	bhi.n	80072ce <__mdiff+0x7e>
 8007300:	1b73      	subs	r3, r6, r5
 8007302:	3b15      	subs	r3, #21
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	3515      	adds	r5, #21
 800730a:	3304      	adds	r3, #4
 800730c:	42ae      	cmp	r6, r5
 800730e:	bf38      	it	cc
 8007310:	2304      	movcc	r3, #4
 8007312:	4418      	add	r0, r3
 8007314:	4443      	add	r3, r8
 8007316:	461e      	mov	r6, r3
 8007318:	4605      	mov	r5, r0
 800731a:	4575      	cmp	r5, lr
 800731c:	d30e      	bcc.n	800733c <__mdiff+0xec>
 800731e:	f10e 0103 	add.w	r1, lr, #3
 8007322:	1a09      	subs	r1, r1, r0
 8007324:	f021 0103 	bic.w	r1, r1, #3
 8007328:	3803      	subs	r0, #3
 800732a:	4586      	cmp	lr, r0
 800732c:	bf38      	it	cc
 800732e:	2100      	movcc	r1, #0
 8007330:	440b      	add	r3, r1
 8007332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007336:	b189      	cbz	r1, 800735c <__mdiff+0x10c>
 8007338:	6117      	str	r7, [r2, #16]
 800733a:	e7a3      	b.n	8007284 <__mdiff+0x34>
 800733c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007340:	fa1f f188 	uxth.w	r1, r8
 8007344:	4461      	add	r1, ip
 8007346:	140c      	asrs	r4, r1, #16
 8007348:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800734c:	b289      	uxth	r1, r1
 800734e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007352:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007356:	f846 1b04 	str.w	r1, [r6], #4
 800735a:	e7de      	b.n	800731a <__mdiff+0xca>
 800735c:	3f01      	subs	r7, #1
 800735e:	e7e8      	b.n	8007332 <__mdiff+0xe2>
 8007360:	0800a480 	.word	0x0800a480
 8007364:	0800a491 	.word	0x0800a491

08007368 <__ulp>:
 8007368:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <__ulp+0x3c>)
 800736a:	400b      	ands	r3, r1
 800736c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc08      	bgt.n	8007386 <__ulp+0x1e>
 8007374:	425b      	negs	r3, r3
 8007376:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800737a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800737e:	da04      	bge.n	800738a <__ulp+0x22>
 8007380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007384:	4113      	asrs	r3, r2
 8007386:	2200      	movs	r2, #0
 8007388:	e008      	b.n	800739c <__ulp+0x34>
 800738a:	f1a2 0314 	sub.w	r3, r2, #20
 800738e:	2b1e      	cmp	r3, #30
 8007390:	bfd6      	itet	le
 8007392:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007396:	2201      	movgt	r2, #1
 8007398:	40da      	lsrle	r2, r3
 800739a:	2300      	movs	r3, #0
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	7ff00000 	.word	0x7ff00000

080073a8 <__b2d>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	6905      	ldr	r5, [r0, #16]
 80073ac:	f100 0714 	add.w	r7, r0, #20
 80073b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80073b4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80073b8:	1f2e      	subs	r6, r5, #4
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7ff fd5a 	bl	8006e74 <__hi0bits>
 80073c0:	f1c0 0220 	rsb	r2, r0, #32
 80073c4:	280a      	cmp	r0, #10
 80073c6:	4603      	mov	r3, r0
 80073c8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007434 <__b2d+0x8c>
 80073cc:	600a      	str	r2, [r1, #0]
 80073ce:	dc12      	bgt.n	80073f6 <__b2d+0x4e>
 80073d0:	f1c0 0e0b 	rsb	lr, r0, #11
 80073d4:	fa24 f20e 	lsr.w	r2, r4, lr
 80073d8:	42b7      	cmp	r7, r6
 80073da:	ea42 010c 	orr.w	r1, r2, ip
 80073de:	bf2c      	ite	cs
 80073e0:	2200      	movcs	r2, #0
 80073e2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80073e6:	3315      	adds	r3, #21
 80073e8:	fa04 f303 	lsl.w	r3, r4, r3
 80073ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f0:	431a      	orrs	r2, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f6:	42b7      	cmp	r7, r6
 80073f8:	bf2e      	itee	cs
 80073fa:	2200      	movcs	r2, #0
 80073fc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007400:	f1a5 0608 	subcc.w	r6, r5, #8
 8007404:	3b0b      	subs	r3, #11
 8007406:	d012      	beq.n	800742e <__b2d+0x86>
 8007408:	f1c3 0520 	rsb	r5, r3, #32
 800740c:	fa22 f105 	lsr.w	r1, r2, r5
 8007410:	409c      	lsls	r4, r3
 8007412:	430c      	orrs	r4, r1
 8007414:	42be      	cmp	r6, r7
 8007416:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800741a:	bf94      	ite	ls
 800741c:	2400      	movls	r4, #0
 800741e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007422:	409a      	lsls	r2, r3
 8007424:	40ec      	lsrs	r4, r5
 8007426:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800742a:	4322      	orrs	r2, r4
 800742c:	e7e1      	b.n	80073f2 <__b2d+0x4a>
 800742e:	ea44 010c 	orr.w	r1, r4, ip
 8007432:	e7de      	b.n	80073f2 <__b2d+0x4a>
 8007434:	3ff00000 	.word	0x3ff00000

08007438 <__d2b>:
 8007438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800743a:	2101      	movs	r1, #1
 800743c:	4617      	mov	r7, r2
 800743e:	461c      	mov	r4, r3
 8007440:	9e08      	ldr	r6, [sp, #32]
 8007442:	f7ff fc25 	bl	8006c90 <_Balloc>
 8007446:	4605      	mov	r5, r0
 8007448:	b930      	cbnz	r0, 8007458 <__d2b+0x20>
 800744a:	4602      	mov	r2, r0
 800744c:	f240 310f 	movw	r1, #783	; 0x30f
 8007450:	4b22      	ldr	r3, [pc, #136]	; (80074dc <__d2b+0xa4>)
 8007452:	4823      	ldr	r0, [pc, #140]	; (80074e0 <__d2b+0xa8>)
 8007454:	f001 f928 	bl	80086a8 <__assert_func>
 8007458:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800745c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007460:	bb24      	cbnz	r4, 80074ac <__d2b+0x74>
 8007462:	2f00      	cmp	r7, #0
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	d026      	beq.n	80074b6 <__d2b+0x7e>
 8007468:	4668      	mov	r0, sp
 800746a:	9700      	str	r7, [sp, #0]
 800746c:	f7ff fd22 	bl	8006eb4 <__lo0bits>
 8007470:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007474:	b1e8      	cbz	r0, 80074b2 <__d2b+0x7a>
 8007476:	f1c0 0320 	rsb	r3, r0, #32
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	430b      	orrs	r3, r1
 8007480:	40c2      	lsrs	r2, r0
 8007482:	616b      	str	r3, [r5, #20]
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bf14      	ite	ne
 800748c:	2102      	movne	r1, #2
 800748e:	2101      	moveq	r1, #1
 8007490:	61ab      	str	r3, [r5, #24]
 8007492:	6129      	str	r1, [r5, #16]
 8007494:	b1bc      	cbz	r4, 80074c6 <__d2b+0x8e>
 8007496:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800749a:	4404      	add	r4, r0
 800749c:	6034      	str	r4, [r6, #0]
 800749e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	6018      	str	r0, [r3, #0]
 80074a6:	4628      	mov	r0, r5
 80074a8:	b003      	add	sp, #12
 80074aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b0:	e7d7      	b.n	8007462 <__d2b+0x2a>
 80074b2:	6169      	str	r1, [r5, #20]
 80074b4:	e7e7      	b.n	8007486 <__d2b+0x4e>
 80074b6:	a801      	add	r0, sp, #4
 80074b8:	f7ff fcfc 	bl	8006eb4 <__lo0bits>
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	2101      	movs	r1, #1
 80074c0:	616b      	str	r3, [r5, #20]
 80074c2:	3020      	adds	r0, #32
 80074c4:	e7e5      	b.n	8007492 <__d2b+0x5a>
 80074c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074ca:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80074ce:	6030      	str	r0, [r6, #0]
 80074d0:	6918      	ldr	r0, [r3, #16]
 80074d2:	f7ff fccf 	bl	8006e74 <__hi0bits>
 80074d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80074da:	e7e2      	b.n	80074a2 <__d2b+0x6a>
 80074dc:	0800a480 	.word	0x0800a480
 80074e0:	0800a491 	.word	0x0800a491

080074e4 <__ratio>:
 80074e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	4688      	mov	r8, r1
 80074ea:	4669      	mov	r1, sp
 80074ec:	4681      	mov	r9, r0
 80074ee:	f7ff ff5b 	bl	80073a8 <__b2d>
 80074f2:	460f      	mov	r7, r1
 80074f4:	4604      	mov	r4, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	4640      	mov	r0, r8
 80074fa:	a901      	add	r1, sp, #4
 80074fc:	f7ff ff54 	bl	80073a8 <__b2d>
 8007500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007504:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007508:	468b      	mov	fp, r1
 800750a:	eba3 0c02 	sub.w	ip, r3, r2
 800750e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007518:	2b00      	cmp	r3, #0
 800751a:	bfd5      	itete	le
 800751c:	460a      	movle	r2, r1
 800751e:	462a      	movgt	r2, r5
 8007520:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007524:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007528:	bfd8      	it	le
 800752a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800752e:	465b      	mov	r3, fp
 8007530:	4602      	mov	r2, r0
 8007532:	4639      	mov	r1, r7
 8007534:	4620      	mov	r0, r4
 8007536:	f7f9 f8f9 	bl	800072c <__aeabi_ddiv>
 800753a:	b003      	add	sp, #12
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007540 <__copybits>:
 8007540:	3901      	subs	r1, #1
 8007542:	b570      	push	{r4, r5, r6, lr}
 8007544:	1149      	asrs	r1, r1, #5
 8007546:	6914      	ldr	r4, [r2, #16]
 8007548:	3101      	adds	r1, #1
 800754a:	f102 0314 	add.w	r3, r2, #20
 800754e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007552:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007556:	1f05      	subs	r5, r0, #4
 8007558:	42a3      	cmp	r3, r4
 800755a:	d30c      	bcc.n	8007576 <__copybits+0x36>
 800755c:	1aa3      	subs	r3, r4, r2
 800755e:	3b11      	subs	r3, #17
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	3211      	adds	r2, #17
 8007566:	42a2      	cmp	r2, r4
 8007568:	bf88      	it	hi
 800756a:	2300      	movhi	r3, #0
 800756c:	4418      	add	r0, r3
 800756e:	2300      	movs	r3, #0
 8007570:	4288      	cmp	r0, r1
 8007572:	d305      	bcc.n	8007580 <__copybits+0x40>
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	f853 6b04 	ldr.w	r6, [r3], #4
 800757a:	f845 6f04 	str.w	r6, [r5, #4]!
 800757e:	e7eb      	b.n	8007558 <__copybits+0x18>
 8007580:	f840 3b04 	str.w	r3, [r0], #4
 8007584:	e7f4      	b.n	8007570 <__copybits+0x30>

08007586 <__any_on>:
 8007586:	f100 0214 	add.w	r2, r0, #20
 800758a:	6900      	ldr	r0, [r0, #16]
 800758c:	114b      	asrs	r3, r1, #5
 800758e:	4298      	cmp	r0, r3
 8007590:	b510      	push	{r4, lr}
 8007592:	db11      	blt.n	80075b8 <__any_on+0x32>
 8007594:	dd0a      	ble.n	80075ac <__any_on+0x26>
 8007596:	f011 011f 	ands.w	r1, r1, #31
 800759a:	d007      	beq.n	80075ac <__any_on+0x26>
 800759c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075a0:	fa24 f001 	lsr.w	r0, r4, r1
 80075a4:	fa00 f101 	lsl.w	r1, r0, r1
 80075a8:	428c      	cmp	r4, r1
 80075aa:	d10b      	bne.n	80075c4 <__any_on+0x3e>
 80075ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d803      	bhi.n	80075bc <__any_on+0x36>
 80075b4:	2000      	movs	r0, #0
 80075b6:	bd10      	pop	{r4, pc}
 80075b8:	4603      	mov	r3, r0
 80075ba:	e7f7      	b.n	80075ac <__any_on+0x26>
 80075bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075c0:	2900      	cmp	r1, #0
 80075c2:	d0f5      	beq.n	80075b0 <__any_on+0x2a>
 80075c4:	2001      	movs	r0, #1
 80075c6:	e7f6      	b.n	80075b6 <__any_on+0x30>

080075c8 <sulp>:
 80075c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075cc:	460f      	mov	r7, r1
 80075ce:	4690      	mov	r8, r2
 80075d0:	f7ff feca 	bl	8007368 <__ulp>
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	f1b8 0f00 	cmp.w	r8, #0
 80075dc:	d011      	beq.n	8007602 <sulp+0x3a>
 80075de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80075e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dd0b      	ble.n	8007602 <sulp+0x3a>
 80075ea:	2400      	movs	r4, #0
 80075ec:	051b      	lsls	r3, r3, #20
 80075ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80075f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f7f8 ff6d 	bl	80004d8 <__aeabi_dmul>
 80075fe:	4604      	mov	r4, r0
 8007600:	460d      	mov	r5, r1
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760a:	0000      	movs	r0, r0
 800760c:	0000      	movs	r0, r0
	...

08007610 <_strtod_l>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	b09f      	sub	sp, #124	; 0x7c
 8007616:	9217      	str	r2, [sp, #92]	; 0x5c
 8007618:	2200      	movs	r2, #0
 800761a:	4604      	mov	r4, r0
 800761c:	921a      	str	r2, [sp, #104]	; 0x68
 800761e:	460d      	mov	r5, r1
 8007620:	f04f 0800 	mov.w	r8, #0
 8007624:	f04f 0900 	mov.w	r9, #0
 8007628:	460a      	mov	r2, r1
 800762a:	9219      	str	r2, [sp, #100]	; 0x64
 800762c:	7811      	ldrb	r1, [r2, #0]
 800762e:	292b      	cmp	r1, #43	; 0x2b
 8007630:	d04a      	beq.n	80076c8 <_strtod_l+0xb8>
 8007632:	d838      	bhi.n	80076a6 <_strtod_l+0x96>
 8007634:	290d      	cmp	r1, #13
 8007636:	d832      	bhi.n	800769e <_strtod_l+0x8e>
 8007638:	2908      	cmp	r1, #8
 800763a:	d832      	bhi.n	80076a2 <_strtod_l+0x92>
 800763c:	2900      	cmp	r1, #0
 800763e:	d03b      	beq.n	80076b8 <_strtod_l+0xa8>
 8007640:	2200      	movs	r2, #0
 8007642:	920e      	str	r2, [sp, #56]	; 0x38
 8007644:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007646:	7832      	ldrb	r2, [r6, #0]
 8007648:	2a30      	cmp	r2, #48	; 0x30
 800764a:	f040 80b2 	bne.w	80077b2 <_strtod_l+0x1a2>
 800764e:	7872      	ldrb	r2, [r6, #1]
 8007650:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007654:	2a58      	cmp	r2, #88	; 0x58
 8007656:	d16e      	bne.n	8007736 <_strtod_l+0x126>
 8007658:	9302      	str	r3, [sp, #8]
 800765a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800765c:	4620      	mov	r0, r4
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	ab1a      	add	r3, sp, #104	; 0x68
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	4a8c      	ldr	r2, [pc, #560]	; (8007898 <_strtod_l+0x288>)
 8007666:	ab1b      	add	r3, sp, #108	; 0x6c
 8007668:	a919      	add	r1, sp, #100	; 0x64
 800766a:	f001 f8b7 	bl	80087dc <__gethex>
 800766e:	f010 070f 	ands.w	r7, r0, #15
 8007672:	4605      	mov	r5, r0
 8007674:	d005      	beq.n	8007682 <_strtod_l+0x72>
 8007676:	2f06      	cmp	r7, #6
 8007678:	d128      	bne.n	80076cc <_strtod_l+0xbc>
 800767a:	2300      	movs	r3, #0
 800767c:	3601      	adds	r6, #1
 800767e:	9619      	str	r6, [sp, #100]	; 0x64
 8007680:	930e      	str	r3, [sp, #56]	; 0x38
 8007682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 85a0 	bne.w	80081ca <_strtod_l+0xbba>
 800768a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800768c:	b1cb      	cbz	r3, 80076c2 <_strtod_l+0xb2>
 800768e:	4642      	mov	r2, r8
 8007690:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	b01f      	add	sp, #124	; 0x7c
 800769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	2920      	cmp	r1, #32
 80076a0:	d1ce      	bne.n	8007640 <_strtod_l+0x30>
 80076a2:	3201      	adds	r2, #1
 80076a4:	e7c1      	b.n	800762a <_strtod_l+0x1a>
 80076a6:	292d      	cmp	r1, #45	; 0x2d
 80076a8:	d1ca      	bne.n	8007640 <_strtod_l+0x30>
 80076aa:	2101      	movs	r1, #1
 80076ac:	910e      	str	r1, [sp, #56]	; 0x38
 80076ae:	1c51      	adds	r1, r2, #1
 80076b0:	9119      	str	r1, [sp, #100]	; 0x64
 80076b2:	7852      	ldrb	r2, [r2, #1]
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	d1c5      	bne.n	8007644 <_strtod_l+0x34>
 80076b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076ba:	9519      	str	r5, [sp, #100]	; 0x64
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 8582 	bne.w	80081c6 <_strtod_l+0xbb6>
 80076c2:	4642      	mov	r2, r8
 80076c4:	464b      	mov	r3, r9
 80076c6:	e7e5      	b.n	8007694 <_strtod_l+0x84>
 80076c8:	2100      	movs	r1, #0
 80076ca:	e7ef      	b.n	80076ac <_strtod_l+0x9c>
 80076cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076ce:	b13a      	cbz	r2, 80076e0 <_strtod_l+0xd0>
 80076d0:	2135      	movs	r1, #53	; 0x35
 80076d2:	a81c      	add	r0, sp, #112	; 0x70
 80076d4:	f7ff ff34 	bl	8007540 <__copybits>
 80076d8:	4620      	mov	r0, r4
 80076da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076dc:	f7ff fb18 	bl	8006d10 <_Bfree>
 80076e0:	3f01      	subs	r7, #1
 80076e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80076e4:	2f04      	cmp	r7, #4
 80076e6:	d806      	bhi.n	80076f6 <_strtod_l+0xe6>
 80076e8:	e8df f007 	tbb	[pc, r7]
 80076ec:	201d0314 	.word	0x201d0314
 80076f0:	14          	.byte	0x14
 80076f1:	00          	.byte	0x00
 80076f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80076f6:	05e9      	lsls	r1, r5, #23
 80076f8:	bf48      	it	mi
 80076fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80076fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007702:	0d1b      	lsrs	r3, r3, #20
 8007704:	051b      	lsls	r3, r3, #20
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1bb      	bne.n	8007682 <_strtod_l+0x72>
 800770a:	f7fe fb0f 	bl	8005d2c <__errno>
 800770e:	2322      	movs	r3, #34	; 0x22
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	e7b6      	b.n	8007682 <_strtod_l+0x72>
 8007714:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007718:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800771c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007720:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007724:	e7e7      	b.n	80076f6 <_strtod_l+0xe6>
 8007726:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800789c <_strtod_l+0x28c>
 800772a:	e7e4      	b.n	80076f6 <_strtod_l+0xe6>
 800772c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007730:	f04f 38ff 	mov.w	r8, #4294967295
 8007734:	e7df      	b.n	80076f6 <_strtod_l+0xe6>
 8007736:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	9219      	str	r2, [sp, #100]	; 0x64
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b30      	cmp	r3, #48	; 0x30
 8007740:	d0f9      	beq.n	8007736 <_strtod_l+0x126>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d09d      	beq.n	8007682 <_strtod_l+0x72>
 8007746:	2301      	movs	r3, #1
 8007748:	f04f 0a00 	mov.w	sl, #0
 800774c:	220a      	movs	r2, #10
 800774e:	46d3      	mov	fp, sl
 8007750:	9305      	str	r3, [sp, #20]
 8007752:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007754:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007758:	930b      	str	r3, [sp, #44]	; 0x2c
 800775a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800775c:	7806      	ldrb	r6, [r0, #0]
 800775e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007762:	b2d9      	uxtb	r1, r3
 8007764:	2909      	cmp	r1, #9
 8007766:	d926      	bls.n	80077b6 <_strtod_l+0x1a6>
 8007768:	2201      	movs	r2, #1
 800776a:	494d      	ldr	r1, [pc, #308]	; (80078a0 <_strtod_l+0x290>)
 800776c:	f000 ff66 	bl	800863c <strncmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	d030      	beq.n	80077d6 <_strtod_l+0x1c6>
 8007774:	2000      	movs	r0, #0
 8007776:	4632      	mov	r2, r6
 8007778:	4603      	mov	r3, r0
 800777a:	465e      	mov	r6, fp
 800777c:	9008      	str	r0, [sp, #32]
 800777e:	2a65      	cmp	r2, #101	; 0x65
 8007780:	d001      	beq.n	8007786 <_strtod_l+0x176>
 8007782:	2a45      	cmp	r2, #69	; 0x45
 8007784:	d113      	bne.n	80077ae <_strtod_l+0x19e>
 8007786:	b91e      	cbnz	r6, 8007790 <_strtod_l+0x180>
 8007788:	9a05      	ldr	r2, [sp, #20]
 800778a:	4302      	orrs	r2, r0
 800778c:	d094      	beq.n	80076b8 <_strtod_l+0xa8>
 800778e:	2600      	movs	r6, #0
 8007790:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007792:	1c6a      	adds	r2, r5, #1
 8007794:	9219      	str	r2, [sp, #100]	; 0x64
 8007796:	786a      	ldrb	r2, [r5, #1]
 8007798:	2a2b      	cmp	r2, #43	; 0x2b
 800779a:	d074      	beq.n	8007886 <_strtod_l+0x276>
 800779c:	2a2d      	cmp	r2, #45	; 0x2d
 800779e:	d078      	beq.n	8007892 <_strtod_l+0x282>
 80077a0:	f04f 0c00 	mov.w	ip, #0
 80077a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80077a8:	2909      	cmp	r1, #9
 80077aa:	d97f      	bls.n	80078ac <_strtod_l+0x29c>
 80077ac:	9519      	str	r5, [sp, #100]	; 0x64
 80077ae:	2700      	movs	r7, #0
 80077b0:	e09e      	b.n	80078f0 <_strtod_l+0x2e0>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e7c8      	b.n	8007748 <_strtod_l+0x138>
 80077b6:	f1bb 0f08 	cmp.w	fp, #8
 80077ba:	bfd8      	it	le
 80077bc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80077be:	f100 0001 	add.w	r0, r0, #1
 80077c2:	bfd6      	itet	le
 80077c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80077c8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80077cc:	930a      	strle	r3, [sp, #40]	; 0x28
 80077ce:	f10b 0b01 	add.w	fp, fp, #1
 80077d2:	9019      	str	r0, [sp, #100]	; 0x64
 80077d4:	e7c1      	b.n	800775a <_strtod_l+0x14a>
 80077d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	9219      	str	r2, [sp, #100]	; 0x64
 80077dc:	785a      	ldrb	r2, [r3, #1]
 80077de:	f1bb 0f00 	cmp.w	fp, #0
 80077e2:	d037      	beq.n	8007854 <_strtod_l+0x244>
 80077e4:	465e      	mov	r6, fp
 80077e6:	9008      	str	r0, [sp, #32]
 80077e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80077ec:	2b09      	cmp	r3, #9
 80077ee:	d912      	bls.n	8007816 <_strtod_l+0x206>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e7c4      	b.n	800777e <_strtod_l+0x16e>
 80077f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077f6:	3001      	adds	r0, #1
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	9219      	str	r2, [sp, #100]	; 0x64
 80077fc:	785a      	ldrb	r2, [r3, #1]
 80077fe:	2a30      	cmp	r2, #48	; 0x30
 8007800:	d0f8      	beq.n	80077f4 <_strtod_l+0x1e4>
 8007802:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007806:	2b08      	cmp	r3, #8
 8007808:	f200 84e4 	bhi.w	80081d4 <_strtod_l+0xbc4>
 800780c:	9008      	str	r0, [sp, #32]
 800780e:	2000      	movs	r0, #0
 8007810:	4606      	mov	r6, r0
 8007812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007814:	930b      	str	r3, [sp, #44]	; 0x2c
 8007816:	3a30      	subs	r2, #48	; 0x30
 8007818:	f100 0301 	add.w	r3, r0, #1
 800781c:	d014      	beq.n	8007848 <_strtod_l+0x238>
 800781e:	9908      	ldr	r1, [sp, #32]
 8007820:	eb00 0c06 	add.w	ip, r0, r6
 8007824:	4419      	add	r1, r3
 8007826:	9108      	str	r1, [sp, #32]
 8007828:	4633      	mov	r3, r6
 800782a:	210a      	movs	r1, #10
 800782c:	4563      	cmp	r3, ip
 800782e:	d113      	bne.n	8007858 <_strtod_l+0x248>
 8007830:	1833      	adds	r3, r6, r0
 8007832:	2b08      	cmp	r3, #8
 8007834:	f106 0601 	add.w	r6, r6, #1
 8007838:	4406      	add	r6, r0
 800783a:	dc1a      	bgt.n	8007872 <_strtod_l+0x262>
 800783c:	230a      	movs	r3, #10
 800783e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007840:	fb03 2301 	mla	r3, r3, r1, r2
 8007844:	930a      	str	r3, [sp, #40]	; 0x28
 8007846:	2300      	movs	r3, #0
 8007848:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800784a:	4618      	mov	r0, r3
 800784c:	1c51      	adds	r1, r2, #1
 800784e:	9119      	str	r1, [sp, #100]	; 0x64
 8007850:	7852      	ldrb	r2, [r2, #1]
 8007852:	e7c9      	b.n	80077e8 <_strtod_l+0x1d8>
 8007854:	4658      	mov	r0, fp
 8007856:	e7d2      	b.n	80077fe <_strtod_l+0x1ee>
 8007858:	2b08      	cmp	r3, #8
 800785a:	f103 0301 	add.w	r3, r3, #1
 800785e:	dc03      	bgt.n	8007868 <_strtod_l+0x258>
 8007860:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007862:	434f      	muls	r7, r1
 8007864:	970a      	str	r7, [sp, #40]	; 0x28
 8007866:	e7e1      	b.n	800782c <_strtod_l+0x21c>
 8007868:	2b10      	cmp	r3, #16
 800786a:	bfd8      	it	le
 800786c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007870:	e7dc      	b.n	800782c <_strtod_l+0x21c>
 8007872:	2e10      	cmp	r6, #16
 8007874:	bfdc      	itt	le
 8007876:	230a      	movle	r3, #10
 8007878:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800787c:	e7e3      	b.n	8007846 <_strtod_l+0x236>
 800787e:	2300      	movs	r3, #0
 8007880:	9308      	str	r3, [sp, #32]
 8007882:	2301      	movs	r3, #1
 8007884:	e780      	b.n	8007788 <_strtod_l+0x178>
 8007886:	f04f 0c00 	mov.w	ip, #0
 800788a:	1caa      	adds	r2, r5, #2
 800788c:	9219      	str	r2, [sp, #100]	; 0x64
 800788e:	78aa      	ldrb	r2, [r5, #2]
 8007890:	e788      	b.n	80077a4 <_strtod_l+0x194>
 8007892:	f04f 0c01 	mov.w	ip, #1
 8007896:	e7f8      	b.n	800788a <_strtod_l+0x27a>
 8007898:	0800a5f0 	.word	0x0800a5f0
 800789c:	7ff00000 	.word	0x7ff00000
 80078a0:	0800a5ec 	.word	0x0800a5ec
 80078a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078a6:	1c51      	adds	r1, r2, #1
 80078a8:	9119      	str	r1, [sp, #100]	; 0x64
 80078aa:	7852      	ldrb	r2, [r2, #1]
 80078ac:	2a30      	cmp	r2, #48	; 0x30
 80078ae:	d0f9      	beq.n	80078a4 <_strtod_l+0x294>
 80078b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80078b4:	2908      	cmp	r1, #8
 80078b6:	f63f af7a 	bhi.w	80077ae <_strtod_l+0x19e>
 80078ba:	3a30      	subs	r2, #48	; 0x30
 80078bc:	9209      	str	r2, [sp, #36]	; 0x24
 80078be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078c0:	920c      	str	r2, [sp, #48]	; 0x30
 80078c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078c4:	1c57      	adds	r7, r2, #1
 80078c6:	9719      	str	r7, [sp, #100]	; 0x64
 80078c8:	7852      	ldrb	r2, [r2, #1]
 80078ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80078ce:	f1be 0f09 	cmp.w	lr, #9
 80078d2:	d938      	bls.n	8007946 <_strtod_l+0x336>
 80078d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078d6:	1a7f      	subs	r7, r7, r1
 80078d8:	2f08      	cmp	r7, #8
 80078da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80078de:	dc03      	bgt.n	80078e8 <_strtod_l+0x2d8>
 80078e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e2:	428f      	cmp	r7, r1
 80078e4:	bfa8      	it	ge
 80078e6:	460f      	movge	r7, r1
 80078e8:	f1bc 0f00 	cmp.w	ip, #0
 80078ec:	d000      	beq.n	80078f0 <_strtod_l+0x2e0>
 80078ee:	427f      	negs	r7, r7
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	d14f      	bne.n	8007994 <_strtod_l+0x384>
 80078f4:	9905      	ldr	r1, [sp, #20]
 80078f6:	4301      	orrs	r1, r0
 80078f8:	f47f aec3 	bne.w	8007682 <_strtod_l+0x72>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f47f aedb 	bne.w	80076b8 <_strtod_l+0xa8>
 8007902:	2a69      	cmp	r2, #105	; 0x69
 8007904:	d029      	beq.n	800795a <_strtod_l+0x34a>
 8007906:	dc26      	bgt.n	8007956 <_strtod_l+0x346>
 8007908:	2a49      	cmp	r2, #73	; 0x49
 800790a:	d026      	beq.n	800795a <_strtod_l+0x34a>
 800790c:	2a4e      	cmp	r2, #78	; 0x4e
 800790e:	f47f aed3 	bne.w	80076b8 <_strtod_l+0xa8>
 8007912:	499a      	ldr	r1, [pc, #616]	; (8007b7c <_strtod_l+0x56c>)
 8007914:	a819      	add	r0, sp, #100	; 0x64
 8007916:	f001 f9a3 	bl	8008c60 <__match>
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f aecc 	beq.w	80076b8 <_strtod_l+0xa8>
 8007920:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b28      	cmp	r3, #40	; 0x28
 8007926:	d12f      	bne.n	8007988 <_strtod_l+0x378>
 8007928:	4995      	ldr	r1, [pc, #596]	; (8007b80 <_strtod_l+0x570>)
 800792a:	aa1c      	add	r2, sp, #112	; 0x70
 800792c:	a819      	add	r0, sp, #100	; 0x64
 800792e:	f001 f9ab 	bl	8008c88 <__hexnan>
 8007932:	2805      	cmp	r0, #5
 8007934:	d128      	bne.n	8007988 <_strtod_l+0x378>
 8007936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007938:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800793c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007940:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007944:	e69d      	b.n	8007682 <_strtod_l+0x72>
 8007946:	210a      	movs	r1, #10
 8007948:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800794a:	fb01 2107 	mla	r1, r1, r7, r2
 800794e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007952:	9209      	str	r2, [sp, #36]	; 0x24
 8007954:	e7b5      	b.n	80078c2 <_strtod_l+0x2b2>
 8007956:	2a6e      	cmp	r2, #110	; 0x6e
 8007958:	e7d9      	b.n	800790e <_strtod_l+0x2fe>
 800795a:	498a      	ldr	r1, [pc, #552]	; (8007b84 <_strtod_l+0x574>)
 800795c:	a819      	add	r0, sp, #100	; 0x64
 800795e:	f001 f97f 	bl	8008c60 <__match>
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f aea8 	beq.w	80076b8 <_strtod_l+0xa8>
 8007968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800796a:	4987      	ldr	r1, [pc, #540]	; (8007b88 <_strtod_l+0x578>)
 800796c:	3b01      	subs	r3, #1
 800796e:	a819      	add	r0, sp, #100	; 0x64
 8007970:	9319      	str	r3, [sp, #100]	; 0x64
 8007972:	f001 f975 	bl	8008c60 <__match>
 8007976:	b910      	cbnz	r0, 800797e <_strtod_l+0x36e>
 8007978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797a:	3301      	adds	r3, #1
 800797c:	9319      	str	r3, [sp, #100]	; 0x64
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007b8c <_strtod_l+0x57c>
 8007986:	e67c      	b.n	8007682 <_strtod_l+0x72>
 8007988:	4881      	ldr	r0, [pc, #516]	; (8007b90 <_strtod_l+0x580>)
 800798a:	f000 fe87 	bl	800869c <nan>
 800798e:	4680      	mov	r8, r0
 8007990:	4689      	mov	r9, r1
 8007992:	e676      	b.n	8007682 <_strtod_l+0x72>
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	f1bb 0f00 	cmp.w	fp, #0
 800799a:	bf08      	it	eq
 800799c:	46b3      	moveq	fp, r6
 800799e:	1afb      	subs	r3, r7, r3
 80079a0:	2e10      	cmp	r6, #16
 80079a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079a4:	4635      	mov	r5, r6
 80079a6:	9309      	str	r3, [sp, #36]	; 0x24
 80079a8:	bfa8      	it	ge
 80079aa:	2510      	movge	r5, #16
 80079ac:	f7f8 fd1a 	bl	80003e4 <__aeabi_ui2d>
 80079b0:	2e09      	cmp	r6, #9
 80079b2:	4680      	mov	r8, r0
 80079b4:	4689      	mov	r9, r1
 80079b6:	dd13      	ble.n	80079e0 <_strtod_l+0x3d0>
 80079b8:	4b76      	ldr	r3, [pc, #472]	; (8007b94 <_strtod_l+0x584>)
 80079ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80079be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80079c2:	f7f8 fd89 	bl	80004d8 <__aeabi_dmul>
 80079c6:	4680      	mov	r8, r0
 80079c8:	4650      	mov	r0, sl
 80079ca:	4689      	mov	r9, r1
 80079cc:	f7f8 fd0a 	bl	80003e4 <__aeabi_ui2d>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4640      	mov	r0, r8
 80079d6:	4649      	mov	r1, r9
 80079d8:	f7f8 fbc8 	bl	800016c <__adddf3>
 80079dc:	4680      	mov	r8, r0
 80079de:	4689      	mov	r9, r1
 80079e0:	2e0f      	cmp	r6, #15
 80079e2:	dc36      	bgt.n	8007a52 <_strtod_l+0x442>
 80079e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f43f ae4b 	beq.w	8007682 <_strtod_l+0x72>
 80079ec:	dd22      	ble.n	8007a34 <_strtod_l+0x424>
 80079ee:	2b16      	cmp	r3, #22
 80079f0:	dc09      	bgt.n	8007a06 <_strtod_l+0x3f6>
 80079f2:	4968      	ldr	r1, [pc, #416]	; (8007b94 <_strtod_l+0x584>)
 80079f4:	4642      	mov	r2, r8
 80079f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079fa:	464b      	mov	r3, r9
 80079fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a00:	f7f8 fd6a 	bl	80004d8 <__aeabi_dmul>
 8007a04:	e7c3      	b.n	800798e <_strtod_l+0x37e>
 8007a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a08:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	db20      	blt.n	8007a52 <_strtod_l+0x442>
 8007a10:	4c60      	ldr	r4, [pc, #384]	; (8007b94 <_strtod_l+0x584>)
 8007a12:	f1c6 060f 	rsb	r6, r6, #15
 8007a16:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a20:	464b      	mov	r3, r9
 8007a22:	f7f8 fd59 	bl	80004d8 <__aeabi_dmul>
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	1b9e      	subs	r6, r3, r6
 8007a2a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a32:	e7e5      	b.n	8007a00 <_strtod_l+0x3f0>
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	3316      	adds	r3, #22
 8007a38:	db0b      	blt.n	8007a52 <_strtod_l+0x442>
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	1bdf      	subs	r7, r3, r7
 8007a40:	4b54      	ldr	r3, [pc, #336]	; (8007b94 <_strtod_l+0x584>)
 8007a42:	4649      	mov	r1, r9
 8007a44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a4c:	f7f8 fe6e 	bl	800072c <__aeabi_ddiv>
 8007a50:	e79d      	b.n	800798e <_strtod_l+0x37e>
 8007a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a54:	1b75      	subs	r5, r6, r5
 8007a56:	441d      	add	r5, r3
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	dd70      	ble.n	8007b3e <_strtod_l+0x52e>
 8007a5c:	f015 030f 	ands.w	r3, r5, #15
 8007a60:	d00a      	beq.n	8007a78 <_strtod_l+0x468>
 8007a62:	494c      	ldr	r1, [pc, #304]	; (8007b94 <_strtod_l+0x584>)
 8007a64:	4642      	mov	r2, r8
 8007a66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6e:	464b      	mov	r3, r9
 8007a70:	f7f8 fd32 	bl	80004d8 <__aeabi_dmul>
 8007a74:	4680      	mov	r8, r0
 8007a76:	4689      	mov	r9, r1
 8007a78:	f035 050f 	bics.w	r5, r5, #15
 8007a7c:	d04d      	beq.n	8007b1a <_strtod_l+0x50a>
 8007a7e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007a82:	dd22      	ble.n	8007aca <_strtod_l+0x4ba>
 8007a84:	2600      	movs	r6, #0
 8007a86:	46b3      	mov	fp, r6
 8007a88:	960b      	str	r6, [sp, #44]	; 0x2c
 8007a8a:	9608      	str	r6, [sp, #32]
 8007a8c:	2322      	movs	r3, #34	; 0x22
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007b8c <_strtod_l+0x57c>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f43f adf1 	beq.w	8007682 <_strtod_l+0x72>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007aa4:	f7ff f934 	bl	8006d10 <_Bfree>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	9908      	ldr	r1, [sp, #32]
 8007aac:	f7ff f930 	bl	8006d10 <_Bfree>
 8007ab0:	4659      	mov	r1, fp
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7ff f92c 	bl	8006d10 <_Bfree>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007abc:	f7ff f928 	bl	8006d10 <_Bfree>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7ff f924 	bl	8006d10 <_Bfree>
 8007ac8:	e5db      	b.n	8007682 <_strtod_l+0x72>
 8007aca:	4b33      	ldr	r3, [pc, #204]	; (8007b98 <_strtod_l+0x588>)
 8007acc:	4640      	mov	r0, r8
 8007ace:	9305      	str	r3, [sp, #20]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	469a      	mov	sl, r3
 8007ad6:	112d      	asrs	r5, r5, #4
 8007ad8:	2d01      	cmp	r5, #1
 8007ada:	dc21      	bgt.n	8007b20 <_strtod_l+0x510>
 8007adc:	b10b      	cbz	r3, 8007ae2 <_strtod_l+0x4d2>
 8007ade:	4680      	mov	r8, r0
 8007ae0:	4689      	mov	r9, r1
 8007ae2:	492d      	ldr	r1, [pc, #180]	; (8007b98 <_strtod_l+0x588>)
 8007ae4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ae8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007aec:	4642      	mov	r2, r8
 8007aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af2:	464b      	mov	r3, r9
 8007af4:	f7f8 fcf0 	bl	80004d8 <__aeabi_dmul>
 8007af8:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <_strtod_l+0x57c>)
 8007afa:	460a      	mov	r2, r1
 8007afc:	400b      	ands	r3, r1
 8007afe:	4927      	ldr	r1, [pc, #156]	; (8007b9c <_strtod_l+0x58c>)
 8007b00:	4680      	mov	r8, r0
 8007b02:	428b      	cmp	r3, r1
 8007b04:	d8be      	bhi.n	8007a84 <_strtod_l+0x474>
 8007b06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007b0a:	428b      	cmp	r3, r1
 8007b0c:	bf86      	itte	hi
 8007b0e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007b12:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007ba0 <_strtod_l+0x590>
 8007b16:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9305      	str	r3, [sp, #20]
 8007b1e:	e07b      	b.n	8007c18 <_strtod_l+0x608>
 8007b20:	07ea      	lsls	r2, r5, #31
 8007b22:	d505      	bpl.n	8007b30 <_strtod_l+0x520>
 8007b24:	9b05      	ldr	r3, [sp, #20]
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	f7f8 fcd5 	bl	80004d8 <__aeabi_dmul>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	9a05      	ldr	r2, [sp, #20]
 8007b32:	f10a 0a01 	add.w	sl, sl, #1
 8007b36:	3208      	adds	r2, #8
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	9205      	str	r2, [sp, #20]
 8007b3c:	e7cc      	b.n	8007ad8 <_strtod_l+0x4c8>
 8007b3e:	d0ec      	beq.n	8007b1a <_strtod_l+0x50a>
 8007b40:	426d      	negs	r5, r5
 8007b42:	f015 020f 	ands.w	r2, r5, #15
 8007b46:	d00a      	beq.n	8007b5e <_strtod_l+0x54e>
 8007b48:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <_strtod_l+0x584>)
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b50:	4649      	mov	r1, r9
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f7f8 fde9 	bl	800072c <__aeabi_ddiv>
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4689      	mov	r9, r1
 8007b5e:	112d      	asrs	r5, r5, #4
 8007b60:	d0db      	beq.n	8007b1a <_strtod_l+0x50a>
 8007b62:	2d1f      	cmp	r5, #31
 8007b64:	dd1e      	ble.n	8007ba4 <_strtod_l+0x594>
 8007b66:	2600      	movs	r6, #0
 8007b68:	46b3      	mov	fp, r6
 8007b6a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007b6c:	9608      	str	r6, [sp, #32]
 8007b6e:	2322      	movs	r3, #34	; 0x22
 8007b70:	f04f 0800 	mov.w	r8, #0
 8007b74:	f04f 0900 	mov.w	r9, #0
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	e78d      	b.n	8007a98 <_strtod_l+0x488>
 8007b7c:	0800a3d8 	.word	0x0800a3d8
 8007b80:	0800a604 	.word	0x0800a604
 8007b84:	0800a3d0 	.word	0x0800a3d0
 8007b88:	0800a407 	.word	0x0800a407
 8007b8c:	7ff00000 	.word	0x7ff00000
 8007b90:	0800a694 	.word	0x0800a694
 8007b94:	0800a518 	.word	0x0800a518
 8007b98:	0800a4f0 	.word	0x0800a4f0
 8007b9c:	7ca00000 	.word	0x7ca00000
 8007ba0:	7fefffff 	.word	0x7fefffff
 8007ba4:	f015 0310 	ands.w	r3, r5, #16
 8007ba8:	bf18      	it	ne
 8007baa:	236a      	movne	r3, #106	; 0x6a
 8007bac:	4640      	mov	r0, r8
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007e80 <_strtod_l+0x870>
 8007bb8:	07ea      	lsls	r2, r5, #31
 8007bba:	d504      	bpl.n	8007bc6 <_strtod_l+0x5b6>
 8007bbc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007bc0:	f7f8 fc8a 	bl	80004d8 <__aeabi_dmul>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	106d      	asrs	r5, r5, #1
 8007bc8:	f10a 0a08 	add.w	sl, sl, #8
 8007bcc:	d1f4      	bne.n	8007bb8 <_strtod_l+0x5a8>
 8007bce:	b10b      	cbz	r3, 8007bd4 <_strtod_l+0x5c4>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	4689      	mov	r9, r1
 8007bd4:	9b05      	ldr	r3, [sp, #20]
 8007bd6:	b1bb      	cbz	r3, 8007c08 <_strtod_l+0x5f8>
 8007bd8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007bdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	4649      	mov	r1, r9
 8007be4:	dd10      	ble.n	8007c08 <_strtod_l+0x5f8>
 8007be6:	2b1f      	cmp	r3, #31
 8007be8:	f340 8128 	ble.w	8007e3c <_strtod_l+0x82c>
 8007bec:	2b34      	cmp	r3, #52	; 0x34
 8007bee:	bfd8      	it	le
 8007bf0:	f04f 33ff 	movle.w	r3, #4294967295
 8007bf4:	f04f 0800 	mov.w	r8, #0
 8007bf8:	bfcf      	iteee	gt
 8007bfa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007bfe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007c02:	4093      	lslle	r3, r2
 8007c04:	ea03 0901 	andle.w	r9, r3, r1
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 feca 	bl	80009a8 <__aeabi_dcmpeq>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d1a6      	bne.n	8007b66 <_strtod_l+0x556>
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	465a      	mov	r2, fp
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4633      	mov	r3, r6
 8007c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c24:	f7ff f8dc 	bl	8006de0 <__s2b>
 8007c28:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f43f af2a 	beq.w	8007a84 <_strtod_l+0x474>
 8007c30:	2600      	movs	r6, #0
 8007c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	eba3 0307 	sub.w	r3, r3, r7
 8007c3c:	bfa8      	it	ge
 8007c3e:	2300      	movge	r3, #0
 8007c40:	46b3      	mov	fp, r6
 8007c42:	9312      	str	r3, [sp, #72]	; 0x48
 8007c44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c48:	9316      	str	r3, [sp, #88]	; 0x58
 8007c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	6859      	ldr	r1, [r3, #4]
 8007c50:	f7ff f81e 	bl	8006c90 <_Balloc>
 8007c54:	9008      	str	r0, [sp, #32]
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f43f af18 	beq.w	8007a8c <_strtod_l+0x47c>
 8007c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5e:	300c      	adds	r0, #12
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	f103 010c 	add.w	r1, r3, #12
 8007c66:	3202      	adds	r2, #2
 8007c68:	0092      	lsls	r2, r2, #2
 8007c6a:	f000 fd09 	bl	8008680 <memcpy>
 8007c6e:	ab1c      	add	r3, sp, #112	; 0x70
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4642      	mov	r2, r8
 8007c78:	464b      	mov	r3, r9
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007c80:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007c84:	f7ff fbd8 	bl	8007438 <__d2b>
 8007c88:	901a      	str	r0, [sp, #104]	; 0x68
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f43f aefe 	beq.w	8007a8c <_strtod_l+0x47c>
 8007c90:	2101      	movs	r1, #1
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff f93c 	bl	8006f10 <__i2b>
 8007c98:	4683      	mov	fp, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	f43f aef6 	beq.w	8007a8c <_strtod_l+0x47c>
 8007ca0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007ca2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	bfab      	itete	ge
 8007ca8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007caa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007cac:	eb07 0a03 	addge.w	sl, r7, r3
 8007cb0:	1bdd      	sublt	r5, r3, r7
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	bfa8      	it	ge
 8007cb6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007cb8:	eba7 0703 	sub.w	r7, r7, r3
 8007cbc:	4417      	add	r7, r2
 8007cbe:	4b71      	ldr	r3, [pc, #452]	; (8007e84 <_strtod_l+0x874>)
 8007cc0:	f107 37ff 	add.w	r7, r7, #4294967295
 8007cc4:	bfb8      	it	lt
 8007cc6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007cca:	429f      	cmp	r7, r3
 8007ccc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cd0:	f280 80c7 	bge.w	8007e62 <_strtod_l+0x852>
 8007cd4:	1bdb      	subs	r3, r3, r7
 8007cd6:	2b1f      	cmp	r3, #31
 8007cd8:	f04f 0101 	mov.w	r1, #1
 8007cdc:	eba2 0203 	sub.w	r2, r2, r3
 8007ce0:	f300 80b3 	bgt.w	8007e4a <_strtod_l+0x83a>
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cea:	2300      	movs	r3, #0
 8007cec:	9310      	str	r3, [sp, #64]	; 0x40
 8007cee:	eb0a 0702 	add.w	r7, sl, r2
 8007cf2:	9b05      	ldr	r3, [sp, #20]
 8007cf4:	45ba      	cmp	sl, r7
 8007cf6:	4415      	add	r5, r2
 8007cf8:	441d      	add	r5, r3
 8007cfa:	4653      	mov	r3, sl
 8007cfc:	bfa8      	it	ge
 8007cfe:	463b      	movge	r3, r7
 8007d00:	42ab      	cmp	r3, r5
 8007d02:	bfa8      	it	ge
 8007d04:	462b      	movge	r3, r5
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfc2      	ittt	gt
 8007d0a:	1aff      	subgt	r7, r7, r3
 8007d0c:	1aed      	subgt	r5, r5, r3
 8007d0e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dd17      	ble.n	8007d48 <_strtod_l+0x738>
 8007d18:	4659      	mov	r1, fp
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff f9b5 	bl	800708c <__pow5mult>
 8007d22:	4683      	mov	fp, r0
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f43f aeb1 	beq.w	8007a8c <_strtod_l+0x47c>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f7ff f904 	bl	8006f3c <__multiply>
 8007d34:	900a      	str	r0, [sp, #40]	; 0x28
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f43f aea8 	beq.w	8007a8c <_strtod_l+0x47c>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d40:	f7fe ffe6 	bl	8006d10 <_Bfree>
 8007d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d46:	931a      	str	r3, [sp, #104]	; 0x68
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	f300 808f 	bgt.w	8007e6c <_strtod_l+0x85c>
 8007d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dd08      	ble.n	8007d66 <_strtod_l+0x756>
 8007d54:	4620      	mov	r0, r4
 8007d56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007d58:	9908      	ldr	r1, [sp, #32]
 8007d5a:	f7ff f997 	bl	800708c <__pow5mult>
 8007d5e:	9008      	str	r0, [sp, #32]
 8007d60:	2800      	cmp	r0, #0
 8007d62:	f43f ae93 	beq.w	8007a8c <_strtod_l+0x47c>
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	dd08      	ble.n	8007d7c <_strtod_l+0x76c>
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	9908      	ldr	r1, [sp, #32]
 8007d70:	f7ff f9e6 	bl	8007140 <__lshift>
 8007d74:	9008      	str	r0, [sp, #32]
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f ae88 	beq.w	8007a8c <_strtod_l+0x47c>
 8007d7c:	f1ba 0f00 	cmp.w	sl, #0
 8007d80:	dd08      	ble.n	8007d94 <_strtod_l+0x784>
 8007d82:	4659      	mov	r1, fp
 8007d84:	4652      	mov	r2, sl
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff f9da 	bl	8007140 <__lshift>
 8007d8c:	4683      	mov	fp, r0
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f43f ae7c 	beq.w	8007a8c <_strtod_l+0x47c>
 8007d94:	4620      	mov	r0, r4
 8007d96:	9a08      	ldr	r2, [sp, #32]
 8007d98:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d9a:	f7ff fa59 	bl	8007250 <__mdiff>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f43f ae73 	beq.w	8007a8c <_strtod_l+0x47c>
 8007da6:	2500      	movs	r5, #0
 8007da8:	68c3      	ldr	r3, [r0, #12]
 8007daa:	4659      	mov	r1, fp
 8007dac:	60c5      	str	r5, [r0, #12]
 8007dae:	930a      	str	r3, [sp, #40]	; 0x28
 8007db0:	f7ff fa32 	bl	8007218 <__mcmp>
 8007db4:	42a8      	cmp	r0, r5
 8007db6:	da6b      	bge.n	8007e90 <_strtod_l+0x880>
 8007db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dba:	ea53 0308 	orrs.w	r3, r3, r8
 8007dbe:	f040 808f 	bne.w	8007ee0 <_strtod_l+0x8d0>
 8007dc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f040 808a 	bne.w	8007ee0 <_strtod_l+0x8d0>
 8007dcc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	051b      	lsls	r3, r3, #20
 8007dd4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007dd8:	f240 8082 	bls.w	8007ee0 <_strtod_l+0x8d0>
 8007ddc:	6973      	ldr	r3, [r6, #20]
 8007dde:	b913      	cbnz	r3, 8007de6 <_strtod_l+0x7d6>
 8007de0:	6933      	ldr	r3, [r6, #16]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	dd7c      	ble.n	8007ee0 <_strtod_l+0x8d0>
 8007de6:	4631      	mov	r1, r6
 8007de8:	2201      	movs	r2, #1
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7ff f9a8 	bl	8007140 <__lshift>
 8007df0:	4659      	mov	r1, fp
 8007df2:	4606      	mov	r6, r0
 8007df4:	f7ff fa10 	bl	8007218 <__mcmp>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	dd71      	ble.n	8007ee0 <_strtod_l+0x8d0>
 8007dfc:	9905      	ldr	r1, [sp, #20]
 8007dfe:	464b      	mov	r3, r9
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <_strtod_l+0x878>)
 8007e02:	2900      	cmp	r1, #0
 8007e04:	f000 808d 	beq.w	8007f22 <_strtod_l+0x912>
 8007e08:	ea02 0109 	and.w	r1, r2, r9
 8007e0c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007e10:	f300 8087 	bgt.w	8007f22 <_strtod_l+0x912>
 8007e14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007e18:	f77f aea9 	ble.w	8007b6e <_strtod_l+0x55e>
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <_strtod_l+0x87c>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	f7f8 fb58 	bl	80004d8 <__aeabi_dmul>
 8007e28:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <_strtod_l+0x878>)
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	400b      	ands	r3, r1
 8007e2e:	4689      	mov	r9, r1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f47f ae35 	bne.w	8007aa0 <_strtod_l+0x490>
 8007e36:	2322      	movs	r3, #34	; 0x22
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	e631      	b.n	8007aa0 <_strtod_l+0x490>
 8007e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	ea03 0808 	and.w	r8, r3, r8
 8007e48:	e6de      	b.n	8007c08 <_strtod_l+0x5f8>
 8007e4a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007e4e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007e52:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007e56:	37e2      	adds	r7, #226	; 0xe2
 8007e58:	fa01 f307 	lsl.w	r3, r1, r7
 8007e5c:	9310      	str	r3, [sp, #64]	; 0x40
 8007e5e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007e60:	e745      	b.n	8007cee <_strtod_l+0x6de>
 8007e62:	2300      	movs	r3, #0
 8007e64:	9310      	str	r3, [sp, #64]	; 0x40
 8007e66:	2301      	movs	r3, #1
 8007e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e6a:	e740      	b.n	8007cee <_strtod_l+0x6de>
 8007e6c:	463a      	mov	r2, r7
 8007e6e:	4620      	mov	r0, r4
 8007e70:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e72:	f7ff f965 	bl	8007140 <__lshift>
 8007e76:	901a      	str	r0, [sp, #104]	; 0x68
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f47f af68 	bne.w	8007d4e <_strtod_l+0x73e>
 8007e7e:	e605      	b.n	8007a8c <_strtod_l+0x47c>
 8007e80:	0800a618 	.word	0x0800a618
 8007e84:	fffffc02 	.word	0xfffffc02
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	39500000 	.word	0x39500000
 8007e90:	46ca      	mov	sl, r9
 8007e92:	d165      	bne.n	8007f60 <_strtod_l+0x950>
 8007e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e9a:	b352      	cbz	r2, 8007ef2 <_strtod_l+0x8e2>
 8007e9c:	4a9e      	ldr	r2, [pc, #632]	; (8008118 <_strtod_l+0xb08>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d12a      	bne.n	8007ef8 <_strtod_l+0x8e8>
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	b1fb      	cbz	r3, 8007ee8 <_strtod_l+0x8d8>
 8007ea8:	4b9c      	ldr	r3, [pc, #624]	; (800811c <_strtod_l+0xb0c>)
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007eae:	ea09 0303 	and.w	r3, r9, r3
 8007eb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eb6:	d81a      	bhi.n	8007eee <_strtod_l+0x8de>
 8007eb8:	0d1b      	lsrs	r3, r3, #20
 8007eba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	4299      	cmp	r1, r3
 8007ec4:	d118      	bne.n	8007ef8 <_strtod_l+0x8e8>
 8007ec6:	4b96      	ldr	r3, [pc, #600]	; (8008120 <_strtod_l+0xb10>)
 8007ec8:	459a      	cmp	sl, r3
 8007eca:	d102      	bne.n	8007ed2 <_strtod_l+0x8c2>
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f43f addd 	beq.w	8007a8c <_strtod_l+0x47c>
 8007ed2:	f04f 0800 	mov.w	r8, #0
 8007ed6:	4b91      	ldr	r3, [pc, #580]	; (800811c <_strtod_l+0xb0c>)
 8007ed8:	ea0a 0303 	and.w	r3, sl, r3
 8007edc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007ee0:	9b05      	ldr	r3, [sp, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d19a      	bne.n	8007e1c <_strtod_l+0x80c>
 8007ee6:	e5db      	b.n	8007aa0 <_strtod_l+0x490>
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	e7e9      	b.n	8007ec2 <_strtod_l+0x8b2>
 8007eee:	4613      	mov	r3, r2
 8007ef0:	e7e7      	b.n	8007ec2 <_strtod_l+0x8b2>
 8007ef2:	ea53 0308 	orrs.w	r3, r3, r8
 8007ef6:	d081      	beq.n	8007dfc <_strtod_l+0x7ec>
 8007ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007efa:	b1e3      	cbz	r3, 8007f36 <_strtod_l+0x926>
 8007efc:	ea13 0f0a 	tst.w	r3, sl
 8007f00:	d0ee      	beq.n	8007ee0 <_strtod_l+0x8d0>
 8007f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	9a05      	ldr	r2, [sp, #20]
 8007f0a:	b1c3      	cbz	r3, 8007f3e <_strtod_l+0x92e>
 8007f0c:	f7ff fb5c 	bl	80075c8 <sulp>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f18:	f7f8 f928 	bl	800016c <__adddf3>
 8007f1c:	4680      	mov	r8, r0
 8007f1e:	4689      	mov	r9, r1
 8007f20:	e7de      	b.n	8007ee0 <_strtod_l+0x8d0>
 8007f22:	4013      	ands	r3, r2
 8007f24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007f2c:	f04f 38ff 	mov.w	r8, #4294967295
 8007f30:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007f34:	e7d4      	b.n	8007ee0 <_strtod_l+0x8d0>
 8007f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f38:	ea13 0f08 	tst.w	r3, r8
 8007f3c:	e7e0      	b.n	8007f00 <_strtod_l+0x8f0>
 8007f3e:	f7ff fb43 	bl	80075c8 <sulp>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f4a:	f7f8 f90d 	bl	8000168 <__aeabi_dsub>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2300      	movs	r3, #0
 8007f52:	4680      	mov	r8, r0
 8007f54:	4689      	mov	r9, r1
 8007f56:	f7f8 fd27 	bl	80009a8 <__aeabi_dcmpeq>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d0c0      	beq.n	8007ee0 <_strtod_l+0x8d0>
 8007f5e:	e606      	b.n	8007b6e <_strtod_l+0x55e>
 8007f60:	4659      	mov	r1, fp
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff fabe 	bl	80074e4 <__ratio>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007f70:	2200      	movs	r2, #0
 8007f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f76:	f7f8 fd2b 	bl	80009d0 <__aeabi_dcmple>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d06f      	beq.n	800805e <_strtod_l+0xa4e>
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d17c      	bne.n	800807e <_strtod_l+0xa6e>
 8007f84:	f1b8 0f00 	cmp.w	r8, #0
 8007f88:	d159      	bne.n	800803e <_strtod_l+0xa2e>
 8007f8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d17b      	bne.n	800808a <_strtod_l+0xa7a>
 8007f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f96:	2200      	movs	r2, #0
 8007f98:	4b62      	ldr	r3, [pc, #392]	; (8008124 <_strtod_l+0xb14>)
 8007f9a:	f7f8 fd0f 	bl	80009bc <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d15a      	bne.n	8008058 <_strtod_l+0xa48>
 8007fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4b5f      	ldr	r3, [pc, #380]	; (8008128 <_strtod_l+0xb18>)
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	4605      	mov	r5, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007fb6:	9506      	str	r5, [sp, #24]
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fbe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007fc2:	4b56      	ldr	r3, [pc, #344]	; (800811c <_strtod_l+0xb0c>)
 8007fc4:	4a55      	ldr	r2, [pc, #340]	; (800811c <_strtod_l+0xb0c>)
 8007fc6:	ea0a 0303 	and.w	r3, sl, r3
 8007fca:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fcc:	4b57      	ldr	r3, [pc, #348]	; (800812c <_strtod_l+0xb1c>)
 8007fce:	ea0a 0202 	and.w	r2, sl, r2
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	f040 80b0 	bne.w	8008138 <_strtod_l+0xb28>
 8007fd8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7ff f9c2 	bl	8007368 <__ulp>
 8007fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fe8:	f7f8 fa76 	bl	80004d8 <__aeabi_dmul>
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	f7f8 f8bc 	bl	800016c <__adddf3>
 8007ff4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800811c <_strtod_l+0xb0c>
 8007ff8:	4a4d      	ldr	r2, [pc, #308]	; (8008130 <_strtod_l+0xb20>)
 8007ffa:	ea01 0a0a 	and.w	sl, r1, sl
 8007ffe:	4592      	cmp	sl, r2
 8008000:	4680      	mov	r8, r0
 8008002:	d948      	bls.n	8008096 <_strtod_l+0xa86>
 8008004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008006:	4b46      	ldr	r3, [pc, #280]	; (8008120 <_strtod_l+0xb10>)
 8008008:	429a      	cmp	r2, r3
 800800a:	d103      	bne.n	8008014 <_strtod_l+0xa04>
 800800c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800e:	3301      	adds	r3, #1
 8008010:	f43f ad3c 	beq.w	8007a8c <_strtod_l+0x47c>
 8008014:	f04f 38ff 	mov.w	r8, #4294967295
 8008018:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008120 <_strtod_l+0xb10>
 800801c:	4620      	mov	r0, r4
 800801e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008020:	f7fe fe76 	bl	8006d10 <_Bfree>
 8008024:	4620      	mov	r0, r4
 8008026:	9908      	ldr	r1, [sp, #32]
 8008028:	f7fe fe72 	bl	8006d10 <_Bfree>
 800802c:	4659      	mov	r1, fp
 800802e:	4620      	mov	r0, r4
 8008030:	f7fe fe6e 	bl	8006d10 <_Bfree>
 8008034:	4631      	mov	r1, r6
 8008036:	4620      	mov	r0, r4
 8008038:	f7fe fe6a 	bl	8006d10 <_Bfree>
 800803c:	e605      	b.n	8007c4a <_strtod_l+0x63a>
 800803e:	f1b8 0f01 	cmp.w	r8, #1
 8008042:	d103      	bne.n	800804c <_strtod_l+0xa3c>
 8008044:	f1b9 0f00 	cmp.w	r9, #0
 8008048:	f43f ad91 	beq.w	8007b6e <_strtod_l+0x55e>
 800804c:	2200      	movs	r2, #0
 800804e:	4b39      	ldr	r3, [pc, #228]	; (8008134 <_strtod_l+0xb24>)
 8008050:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008052:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008056:	e016      	b.n	8008086 <_strtod_l+0xa76>
 8008058:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800805a:	4f33      	ldr	r7, [pc, #204]	; (8008128 <_strtod_l+0xb18>)
 800805c:	e7a9      	b.n	8007fb2 <_strtod_l+0x9a2>
 800805e:	4b32      	ldr	r3, [pc, #200]	; (8008128 <_strtod_l+0xb18>)
 8008060:	2200      	movs	r2, #0
 8008062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008066:	f7f8 fa37 	bl	80004d8 <__aeabi_dmul>
 800806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806c:	4605      	mov	r5, r0
 800806e:	460f      	mov	r7, r1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d09e      	beq.n	8007fb2 <_strtod_l+0x9a2>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800807c:	e79d      	b.n	8007fba <_strtod_l+0x9aa>
 800807e:	2200      	movs	r2, #0
 8008080:	4b28      	ldr	r3, [pc, #160]	; (8008124 <_strtod_l+0xb14>)
 8008082:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008086:	4f27      	ldr	r7, [pc, #156]	; (8008124 <_strtod_l+0xb14>)
 8008088:	e797      	b.n	8007fba <_strtod_l+0x9aa>
 800808a:	2200      	movs	r2, #0
 800808c:	4b29      	ldr	r3, [pc, #164]	; (8008134 <_strtod_l+0xb24>)
 800808e:	4645      	mov	r5, r8
 8008090:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008094:	e7f7      	b.n	8008086 <_strtod_l+0xa76>
 8008096:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	46ca      	mov	sl, r9
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1bc      	bne.n	800801c <_strtod_l+0xa0c>
 80080a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080a8:	0d1b      	lsrs	r3, r3, #20
 80080aa:	051b      	lsls	r3, r3, #20
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d1b5      	bne.n	800801c <_strtod_l+0xa0c>
 80080b0:	4628      	mov	r0, r5
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fd58 	bl	8000b68 <__aeabi_d2lz>
 80080b8:	f7f8 f9e0 	bl	800047c <__aeabi_l2d>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4628      	mov	r0, r5
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 f850 	bl	8000168 <__aeabi_dsub>
 80080c8:	460b      	mov	r3, r1
 80080ca:	4602      	mov	r2, r0
 80080cc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80080d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	ea4a 0a08 	orr.w	sl, sl, r8
 80080da:	ea5a 0a03 	orrs.w	sl, sl, r3
 80080de:	d06c      	beq.n	80081ba <_strtod_l+0xbaa>
 80080e0:	a309      	add	r3, pc, #36	; (adr r3, 8008108 <_strtod_l+0xaf8>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 fc69 	bl	80009bc <__aeabi_dcmplt>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f47f acd8 	bne.w	8007aa0 <_strtod_l+0x490>
 80080f0:	a307      	add	r3, pc, #28	; (adr r3, 8008110 <_strtod_l+0xb00>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080fa:	f7f8 fc7d 	bl	80009f8 <__aeabi_dcmpgt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d08c      	beq.n	800801c <_strtod_l+0xa0c>
 8008102:	e4cd      	b.n	8007aa0 <_strtod_l+0x490>
 8008104:	f3af 8000 	nop.w
 8008108:	94a03595 	.word	0x94a03595
 800810c:	3fdfffff 	.word	0x3fdfffff
 8008110:	35afe535 	.word	0x35afe535
 8008114:	3fe00000 	.word	0x3fe00000
 8008118:	000fffff 	.word	0x000fffff
 800811c:	7ff00000 	.word	0x7ff00000
 8008120:	7fefffff 	.word	0x7fefffff
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	3fe00000 	.word	0x3fe00000
 800812c:	7fe00000 	.word	0x7fe00000
 8008130:	7c9fffff 	.word	0x7c9fffff
 8008134:	bff00000 	.word	0xbff00000
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	b333      	cbz	r3, 800818a <_strtod_l+0xb7a>
 800813c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800813e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008142:	d822      	bhi.n	800818a <_strtod_l+0xb7a>
 8008144:	a328      	add	r3, pc, #160	; (adr r3, 80081e8 <_strtod_l+0xbd8>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	4628      	mov	r0, r5
 800814c:	4639      	mov	r1, r7
 800814e:	f7f8 fc3f 	bl	80009d0 <__aeabi_dcmple>
 8008152:	b1a0      	cbz	r0, 800817e <_strtod_l+0xb6e>
 8008154:	4639      	mov	r1, r7
 8008156:	4628      	mov	r0, r5
 8008158:	f7f8 fc96 	bl	8000a88 <__aeabi_d2uiz>
 800815c:	2801      	cmp	r0, #1
 800815e:	bf38      	it	cc
 8008160:	2001      	movcc	r0, #1
 8008162:	f7f8 f93f 	bl	80003e4 <__aeabi_ui2d>
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	4605      	mov	r5, r0
 800816a:	460f      	mov	r7, r1
 800816c:	bb03      	cbnz	r3, 80081b0 <_strtod_l+0xba0>
 800816e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008172:	9014      	str	r0, [sp, #80]	; 0x50
 8008174:	9315      	str	r3, [sp, #84]	; 0x54
 8008176:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800817a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800817e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008182:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008186:	1a9b      	subs	r3, r3, r2
 8008188:	9311      	str	r3, [sp, #68]	; 0x44
 800818a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800818c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800818e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008192:	f7ff f8e9 	bl	8007368 <__ulp>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4640      	mov	r0, r8
 800819c:	4649      	mov	r1, r9
 800819e:	f7f8 f99b 	bl	80004d8 <__aeabi_dmul>
 80081a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081a6:	f7f7 ffe1 	bl	800016c <__adddf3>
 80081aa:	4680      	mov	r8, r0
 80081ac:	4689      	mov	r9, r1
 80081ae:	e774      	b.n	800809a <_strtod_l+0xa8a>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80081b8:	e7dd      	b.n	8008176 <_strtod_l+0xb66>
 80081ba:	a30d      	add	r3, pc, #52	; (adr r3, 80081f0 <_strtod_l+0xbe0>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 fbfc 	bl	80009bc <__aeabi_dcmplt>
 80081c4:	e79b      	b.n	80080fe <_strtod_l+0xaee>
 80081c6:	2300      	movs	r3, #0
 80081c8:	930e      	str	r3, [sp, #56]	; 0x38
 80081ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	f7ff ba5b 	b.w	800768a <_strtod_l+0x7a>
 80081d4:	2a65      	cmp	r2, #101	; 0x65
 80081d6:	f43f ab52 	beq.w	800787e <_strtod_l+0x26e>
 80081da:	2a45      	cmp	r2, #69	; 0x45
 80081dc:	f43f ab4f 	beq.w	800787e <_strtod_l+0x26e>
 80081e0:	2301      	movs	r3, #1
 80081e2:	f7ff bb87 	b.w	80078f4 <_strtod_l+0x2e4>
 80081e6:	bf00      	nop
 80081e8:	ffc00000 	.word	0xffc00000
 80081ec:	41dfffff 	.word	0x41dfffff
 80081f0:	94a03595 	.word	0x94a03595
 80081f4:	3fcfffff 	.word	0x3fcfffff

080081f8 <_strtod_r>:
 80081f8:	4b01      	ldr	r3, [pc, #4]	; (8008200 <_strtod_r+0x8>)
 80081fa:	f7ff ba09 	b.w	8007610 <_strtod_l>
 80081fe:	bf00      	nop
 8008200:	20000070 	.word	0x20000070

08008204 <__ssputs_r>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	461f      	mov	r7, r3
 800820a:	688e      	ldr	r6, [r1, #8]
 800820c:	4682      	mov	sl, r0
 800820e:	42be      	cmp	r6, r7
 8008210:	460c      	mov	r4, r1
 8008212:	4690      	mov	r8, r2
 8008214:	680b      	ldr	r3, [r1, #0]
 8008216:	d82c      	bhi.n	8008272 <__ssputs_r+0x6e>
 8008218:	898a      	ldrh	r2, [r1, #12]
 800821a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800821e:	d026      	beq.n	800826e <__ssputs_r+0x6a>
 8008220:	6965      	ldr	r5, [r4, #20]
 8008222:	6909      	ldr	r1, [r1, #16]
 8008224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008228:	eba3 0901 	sub.w	r9, r3, r1
 800822c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008230:	1c7b      	adds	r3, r7, #1
 8008232:	444b      	add	r3, r9
 8008234:	106d      	asrs	r5, r5, #1
 8008236:	429d      	cmp	r5, r3
 8008238:	bf38      	it	cc
 800823a:	461d      	movcc	r5, r3
 800823c:	0553      	lsls	r3, r2, #21
 800823e:	d527      	bpl.n	8008290 <__ssputs_r+0x8c>
 8008240:	4629      	mov	r1, r5
 8008242:	f7fe fc99 	bl	8006b78 <_malloc_r>
 8008246:	4606      	mov	r6, r0
 8008248:	b360      	cbz	r0, 80082a4 <__ssputs_r+0xa0>
 800824a:	464a      	mov	r2, r9
 800824c:	6921      	ldr	r1, [r4, #16]
 800824e:	f000 fa17 	bl	8008680 <memcpy>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	6126      	str	r6, [r4, #16]
 8008260:	444e      	add	r6, r9
 8008262:	6026      	str	r6, [r4, #0]
 8008264:	463e      	mov	r6, r7
 8008266:	6165      	str	r5, [r4, #20]
 8008268:	eba5 0509 	sub.w	r5, r5, r9
 800826c:	60a5      	str	r5, [r4, #8]
 800826e:	42be      	cmp	r6, r7
 8008270:	d900      	bls.n	8008274 <__ssputs_r+0x70>
 8008272:	463e      	mov	r6, r7
 8008274:	4632      	mov	r2, r6
 8008276:	4641      	mov	r1, r8
 8008278:	6820      	ldr	r0, [r4, #0]
 800827a:	f000 f9c5 	bl	8008608 <memmove>
 800827e:	2000      	movs	r0, #0
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	1b9b      	subs	r3, r3, r6
 8008284:	60a3      	str	r3, [r4, #8]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	4433      	add	r3, r6
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	462a      	mov	r2, r5
 8008292:	f000 fda6 	bl	8008de2 <_realloc_r>
 8008296:	4606      	mov	r6, r0
 8008298:	2800      	cmp	r0, #0
 800829a:	d1e0      	bne.n	800825e <__ssputs_r+0x5a>
 800829c:	4650      	mov	r0, sl
 800829e:	6921      	ldr	r1, [r4, #16]
 80082a0:	f7fe fbfa 	bl	8006a98 <_free_r>
 80082a4:	230c      	movs	r3, #12
 80082a6:	f8ca 3000 	str.w	r3, [sl]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e7e9      	b.n	800828c <__ssputs_r+0x88>

080082b8 <_svfiprintf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	4698      	mov	r8, r3
 80082be:	898b      	ldrh	r3, [r1, #12]
 80082c0:	4607      	mov	r7, r0
 80082c2:	061b      	lsls	r3, r3, #24
 80082c4:	460d      	mov	r5, r1
 80082c6:	4614      	mov	r4, r2
 80082c8:	b09d      	sub	sp, #116	; 0x74
 80082ca:	d50e      	bpl.n	80082ea <_svfiprintf_r+0x32>
 80082cc:	690b      	ldr	r3, [r1, #16]
 80082ce:	b963      	cbnz	r3, 80082ea <_svfiprintf_r+0x32>
 80082d0:	2140      	movs	r1, #64	; 0x40
 80082d2:	f7fe fc51 	bl	8006b78 <_malloc_r>
 80082d6:	6028      	str	r0, [r5, #0]
 80082d8:	6128      	str	r0, [r5, #16]
 80082da:	b920      	cbnz	r0, 80082e6 <_svfiprintf_r+0x2e>
 80082dc:	230c      	movs	r3, #12
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295
 80082e4:	e0d0      	b.n	8008488 <_svfiprintf_r+0x1d0>
 80082e6:	2340      	movs	r3, #64	; 0x40
 80082e8:	616b      	str	r3, [r5, #20]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9309      	str	r3, [sp, #36]	; 0x24
 80082ee:	2320      	movs	r3, #32
 80082f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082f4:	2330      	movs	r3, #48	; 0x30
 80082f6:	f04f 0901 	mov.w	r9, #1
 80082fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80082fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80084a0 <_svfiprintf_r+0x1e8>
 8008302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008306:	4623      	mov	r3, r4
 8008308:	469a      	mov	sl, r3
 800830a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800830e:	b10a      	cbz	r2, 8008314 <_svfiprintf_r+0x5c>
 8008310:	2a25      	cmp	r2, #37	; 0x25
 8008312:	d1f9      	bne.n	8008308 <_svfiprintf_r+0x50>
 8008314:	ebba 0b04 	subs.w	fp, sl, r4
 8008318:	d00b      	beq.n	8008332 <_svfiprintf_r+0x7a>
 800831a:	465b      	mov	r3, fp
 800831c:	4622      	mov	r2, r4
 800831e:	4629      	mov	r1, r5
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff ff6f 	bl	8008204 <__ssputs_r>
 8008326:	3001      	adds	r0, #1
 8008328:	f000 80a9 	beq.w	800847e <_svfiprintf_r+0x1c6>
 800832c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800832e:	445a      	add	r2, fp
 8008330:	9209      	str	r2, [sp, #36]	; 0x24
 8008332:	f89a 3000 	ldrb.w	r3, [sl]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80a1 	beq.w	800847e <_svfiprintf_r+0x1c6>
 800833c:	2300      	movs	r3, #0
 800833e:	f04f 32ff 	mov.w	r2, #4294967295
 8008342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008346:	f10a 0a01 	add.w	sl, sl, #1
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	9307      	str	r3, [sp, #28]
 800834e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008352:	931a      	str	r3, [sp, #104]	; 0x68
 8008354:	4654      	mov	r4, sl
 8008356:	2205      	movs	r2, #5
 8008358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835c:	4850      	ldr	r0, [pc, #320]	; (80084a0 <_svfiprintf_r+0x1e8>)
 800835e:	f7fd fd1a 	bl	8005d96 <memchr>
 8008362:	9a04      	ldr	r2, [sp, #16]
 8008364:	b9d8      	cbnz	r0, 800839e <_svfiprintf_r+0xe6>
 8008366:	06d0      	lsls	r0, r2, #27
 8008368:	bf44      	itt	mi
 800836a:	2320      	movmi	r3, #32
 800836c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008370:	0711      	lsls	r1, r2, #28
 8008372:	bf44      	itt	mi
 8008374:	232b      	movmi	r3, #43	; 0x2b
 8008376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800837a:	f89a 3000 	ldrb.w	r3, [sl]
 800837e:	2b2a      	cmp	r3, #42	; 0x2a
 8008380:	d015      	beq.n	80083ae <_svfiprintf_r+0xf6>
 8008382:	4654      	mov	r4, sl
 8008384:	2000      	movs	r0, #0
 8008386:	f04f 0c0a 	mov.w	ip, #10
 800838a:	9a07      	ldr	r2, [sp, #28]
 800838c:	4621      	mov	r1, r4
 800838e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008392:	3b30      	subs	r3, #48	; 0x30
 8008394:	2b09      	cmp	r3, #9
 8008396:	d94d      	bls.n	8008434 <_svfiprintf_r+0x17c>
 8008398:	b1b0      	cbz	r0, 80083c8 <_svfiprintf_r+0x110>
 800839a:	9207      	str	r2, [sp, #28]
 800839c:	e014      	b.n	80083c8 <_svfiprintf_r+0x110>
 800839e:	eba0 0308 	sub.w	r3, r0, r8
 80083a2:	fa09 f303 	lsl.w	r3, r9, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	46a2      	mov	sl, r4
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	e7d2      	b.n	8008354 <_svfiprintf_r+0x9c>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	1d19      	adds	r1, r3, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	9103      	str	r1, [sp, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bfbb      	ittet	lt
 80083ba:	425b      	neglt	r3, r3
 80083bc:	f042 0202 	orrlt.w	r2, r2, #2
 80083c0:	9307      	strge	r3, [sp, #28]
 80083c2:	9307      	strlt	r3, [sp, #28]
 80083c4:	bfb8      	it	lt
 80083c6:	9204      	strlt	r2, [sp, #16]
 80083c8:	7823      	ldrb	r3, [r4, #0]
 80083ca:	2b2e      	cmp	r3, #46	; 0x2e
 80083cc:	d10c      	bne.n	80083e8 <_svfiprintf_r+0x130>
 80083ce:	7863      	ldrb	r3, [r4, #1]
 80083d0:	2b2a      	cmp	r3, #42	; 0x2a
 80083d2:	d134      	bne.n	800843e <_svfiprintf_r+0x186>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	3402      	adds	r4, #2
 80083d8:	1d1a      	adds	r2, r3, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	9203      	str	r2, [sp, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfb8      	it	lt
 80083e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083e6:	9305      	str	r3, [sp, #20]
 80083e8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80084a4 <_svfiprintf_r+0x1ec>
 80083ec:	2203      	movs	r2, #3
 80083ee:	4650      	mov	r0, sl
 80083f0:	7821      	ldrb	r1, [r4, #0]
 80083f2:	f7fd fcd0 	bl	8005d96 <memchr>
 80083f6:	b138      	cbz	r0, 8008408 <_svfiprintf_r+0x150>
 80083f8:	2240      	movs	r2, #64	; 0x40
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	eba0 000a 	sub.w	r0, r0, sl
 8008400:	4082      	lsls	r2, r0
 8008402:	4313      	orrs	r3, r2
 8008404:	3401      	adds	r4, #1
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840c:	2206      	movs	r2, #6
 800840e:	4826      	ldr	r0, [pc, #152]	; (80084a8 <_svfiprintf_r+0x1f0>)
 8008410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008414:	f7fd fcbf 	bl	8005d96 <memchr>
 8008418:	2800      	cmp	r0, #0
 800841a:	d038      	beq.n	800848e <_svfiprintf_r+0x1d6>
 800841c:	4b23      	ldr	r3, [pc, #140]	; (80084ac <_svfiprintf_r+0x1f4>)
 800841e:	bb1b      	cbnz	r3, 8008468 <_svfiprintf_r+0x1b0>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	3307      	adds	r3, #7
 8008424:	f023 0307 	bic.w	r3, r3, #7
 8008428:	3308      	adds	r3, #8
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842e:	4433      	add	r3, r6
 8008430:	9309      	str	r3, [sp, #36]	; 0x24
 8008432:	e768      	b.n	8008306 <_svfiprintf_r+0x4e>
 8008434:	460c      	mov	r4, r1
 8008436:	2001      	movs	r0, #1
 8008438:	fb0c 3202 	mla	r2, ip, r2, r3
 800843c:	e7a6      	b.n	800838c <_svfiprintf_r+0xd4>
 800843e:	2300      	movs	r3, #0
 8008440:	f04f 0c0a 	mov.w	ip, #10
 8008444:	4619      	mov	r1, r3
 8008446:	3401      	adds	r4, #1
 8008448:	9305      	str	r3, [sp, #20]
 800844a:	4620      	mov	r0, r4
 800844c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008450:	3a30      	subs	r2, #48	; 0x30
 8008452:	2a09      	cmp	r2, #9
 8008454:	d903      	bls.n	800845e <_svfiprintf_r+0x1a6>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0c6      	beq.n	80083e8 <_svfiprintf_r+0x130>
 800845a:	9105      	str	r1, [sp, #20]
 800845c:	e7c4      	b.n	80083e8 <_svfiprintf_r+0x130>
 800845e:	4604      	mov	r4, r0
 8008460:	2301      	movs	r3, #1
 8008462:	fb0c 2101 	mla	r1, ip, r1, r2
 8008466:	e7f0      	b.n	800844a <_svfiprintf_r+0x192>
 8008468:	ab03      	add	r3, sp, #12
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	462a      	mov	r2, r5
 800846e:	4638      	mov	r0, r7
 8008470:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <_svfiprintf_r+0x1f8>)
 8008472:	a904      	add	r1, sp, #16
 8008474:	f7fc fd04 	bl	8004e80 <_printf_float>
 8008478:	1c42      	adds	r2, r0, #1
 800847a:	4606      	mov	r6, r0
 800847c:	d1d6      	bne.n	800842c <_svfiprintf_r+0x174>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	065b      	lsls	r3, r3, #25
 8008482:	f53f af2d 	bmi.w	80082e0 <_svfiprintf_r+0x28>
 8008486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008488:	b01d      	add	sp, #116	; 0x74
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	ab03      	add	r3, sp, #12
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	462a      	mov	r2, r5
 8008494:	4638      	mov	r0, r7
 8008496:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <_svfiprintf_r+0x1f8>)
 8008498:	a904      	add	r1, sp, #16
 800849a:	f7fc ff91 	bl	80053c0 <_printf_i>
 800849e:	e7eb      	b.n	8008478 <_svfiprintf_r+0x1c0>
 80084a0:	0800a640 	.word	0x0800a640
 80084a4:	0800a646 	.word	0x0800a646
 80084a8:	0800a64a 	.word	0x0800a64a
 80084ac:	08004e81 	.word	0x08004e81
 80084b0:	08008205 	.word	0x08008205

080084b4 <__sflush_r>:
 80084b4:	898a      	ldrh	r2, [r1, #12]
 80084b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b8:	4605      	mov	r5, r0
 80084ba:	0710      	lsls	r0, r2, #28
 80084bc:	460c      	mov	r4, r1
 80084be:	d457      	bmi.n	8008570 <__sflush_r+0xbc>
 80084c0:	684b      	ldr	r3, [r1, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dc04      	bgt.n	80084d0 <__sflush_r+0x1c>
 80084c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc01      	bgt.n	80084d0 <__sflush_r+0x1c>
 80084cc:	2000      	movs	r0, #0
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084d2:	2e00      	cmp	r6, #0
 80084d4:	d0fa      	beq.n	80084cc <__sflush_r+0x18>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084dc:	682f      	ldr	r7, [r5, #0]
 80084de:	6a21      	ldr	r1, [r4, #32]
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	d032      	beq.n	800854a <__sflush_r+0x96>
 80084e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	075a      	lsls	r2, r3, #29
 80084ea:	d505      	bpl.n	80084f8 <__sflush_r+0x44>
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	1ac0      	subs	r0, r0, r3
 80084f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084f2:	b10b      	cbz	r3, 80084f8 <__sflush_r+0x44>
 80084f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084f6:	1ac0      	subs	r0, r0, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	4602      	mov	r2, r0
 80084fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084fe:	4628      	mov	r0, r5
 8008500:	6a21      	ldr	r1, [r4, #32]
 8008502:	47b0      	blx	r6
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	d106      	bne.n	8008518 <__sflush_r+0x64>
 800850a:	6829      	ldr	r1, [r5, #0]
 800850c:	291d      	cmp	r1, #29
 800850e:	d82b      	bhi.n	8008568 <__sflush_r+0xb4>
 8008510:	4a28      	ldr	r2, [pc, #160]	; (80085b4 <__sflush_r+0x100>)
 8008512:	410a      	asrs	r2, r1
 8008514:	07d6      	lsls	r6, r2, #31
 8008516:	d427      	bmi.n	8008568 <__sflush_r+0xb4>
 8008518:	2200      	movs	r2, #0
 800851a:	6062      	str	r2, [r4, #4]
 800851c:	6922      	ldr	r2, [r4, #16]
 800851e:	04d9      	lsls	r1, r3, #19
 8008520:	6022      	str	r2, [r4, #0]
 8008522:	d504      	bpl.n	800852e <__sflush_r+0x7a>
 8008524:	1c42      	adds	r2, r0, #1
 8008526:	d101      	bne.n	800852c <__sflush_r+0x78>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b903      	cbnz	r3, 800852e <__sflush_r+0x7a>
 800852c:	6560      	str	r0, [r4, #84]	; 0x54
 800852e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008530:	602f      	str	r7, [r5, #0]
 8008532:	2900      	cmp	r1, #0
 8008534:	d0ca      	beq.n	80084cc <__sflush_r+0x18>
 8008536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800853a:	4299      	cmp	r1, r3
 800853c:	d002      	beq.n	8008544 <__sflush_r+0x90>
 800853e:	4628      	mov	r0, r5
 8008540:	f7fe faaa 	bl	8006a98 <_free_r>
 8008544:	2000      	movs	r0, #0
 8008546:	6360      	str	r0, [r4, #52]	; 0x34
 8008548:	e7c1      	b.n	80084ce <__sflush_r+0x1a>
 800854a:	2301      	movs	r3, #1
 800854c:	4628      	mov	r0, r5
 800854e:	47b0      	blx	r6
 8008550:	1c41      	adds	r1, r0, #1
 8008552:	d1c8      	bne.n	80084e6 <__sflush_r+0x32>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0c5      	beq.n	80084e6 <__sflush_r+0x32>
 800855a:	2b1d      	cmp	r3, #29
 800855c:	d001      	beq.n	8008562 <__sflush_r+0xae>
 800855e:	2b16      	cmp	r3, #22
 8008560:	d101      	bne.n	8008566 <__sflush_r+0xb2>
 8008562:	602f      	str	r7, [r5, #0]
 8008564:	e7b2      	b.n	80084cc <__sflush_r+0x18>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	e7ae      	b.n	80084ce <__sflush_r+0x1a>
 8008570:	690f      	ldr	r7, [r1, #16]
 8008572:	2f00      	cmp	r7, #0
 8008574:	d0aa      	beq.n	80084cc <__sflush_r+0x18>
 8008576:	0793      	lsls	r3, r2, #30
 8008578:	bf18      	it	ne
 800857a:	2300      	movne	r3, #0
 800857c:	680e      	ldr	r6, [r1, #0]
 800857e:	bf08      	it	eq
 8008580:	694b      	ldreq	r3, [r1, #20]
 8008582:	1bf6      	subs	r6, r6, r7
 8008584:	600f      	str	r7, [r1, #0]
 8008586:	608b      	str	r3, [r1, #8]
 8008588:	2e00      	cmp	r6, #0
 800858a:	dd9f      	ble.n	80084cc <__sflush_r+0x18>
 800858c:	4633      	mov	r3, r6
 800858e:	463a      	mov	r2, r7
 8008590:	4628      	mov	r0, r5
 8008592:	6a21      	ldr	r1, [r4, #32]
 8008594:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008598:	47e0      	blx	ip
 800859a:	2800      	cmp	r0, #0
 800859c:	dc06      	bgt.n	80085ac <__sflush_r+0xf8>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e790      	b.n	80084ce <__sflush_r+0x1a>
 80085ac:	4407      	add	r7, r0
 80085ae:	1a36      	subs	r6, r6, r0
 80085b0:	e7ea      	b.n	8008588 <__sflush_r+0xd4>
 80085b2:	bf00      	nop
 80085b4:	dfbffffe 	.word	0xdfbffffe

080085b8 <_fflush_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	690b      	ldr	r3, [r1, #16]
 80085bc:	4605      	mov	r5, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	b913      	cbnz	r3, 80085c8 <_fflush_r+0x10>
 80085c2:	2500      	movs	r5, #0
 80085c4:	4628      	mov	r0, r5
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	b118      	cbz	r0, 80085d2 <_fflush_r+0x1a>
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	b90b      	cbnz	r3, 80085d2 <_fflush_r+0x1a>
 80085ce:	f7fd fab3 	bl	8005b38 <__sinit>
 80085d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0f3      	beq.n	80085c2 <_fflush_r+0xa>
 80085da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085dc:	07d0      	lsls	r0, r2, #31
 80085de:	d404      	bmi.n	80085ea <_fflush_r+0x32>
 80085e0:	0599      	lsls	r1, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_fflush_r+0x32>
 80085e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e6:	f7fd fbcc 	bl	8005d82 <__retarget_lock_acquire_recursive>
 80085ea:	4628      	mov	r0, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7ff ff61 	bl	80084b4 <__sflush_r>
 80085f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085f4:	4605      	mov	r5, r0
 80085f6:	07da      	lsls	r2, r3, #31
 80085f8:	d4e4      	bmi.n	80085c4 <_fflush_r+0xc>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	059b      	lsls	r3, r3, #22
 80085fe:	d4e1      	bmi.n	80085c4 <_fflush_r+0xc>
 8008600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008602:	f7fd fbbf 	bl	8005d84 <__retarget_lock_release_recursive>
 8008606:	e7dd      	b.n	80085c4 <_fflush_r+0xc>

08008608 <memmove>:
 8008608:	4288      	cmp	r0, r1
 800860a:	b510      	push	{r4, lr}
 800860c:	eb01 0402 	add.w	r4, r1, r2
 8008610:	d902      	bls.n	8008618 <memmove+0x10>
 8008612:	4284      	cmp	r4, r0
 8008614:	4623      	mov	r3, r4
 8008616:	d807      	bhi.n	8008628 <memmove+0x20>
 8008618:	1e43      	subs	r3, r0, #1
 800861a:	42a1      	cmp	r1, r4
 800861c:	d008      	beq.n	8008630 <memmove+0x28>
 800861e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008626:	e7f8      	b.n	800861a <memmove+0x12>
 8008628:	4601      	mov	r1, r0
 800862a:	4402      	add	r2, r0
 800862c:	428a      	cmp	r2, r1
 800862e:	d100      	bne.n	8008632 <memmove+0x2a>
 8008630:	bd10      	pop	{r4, pc}
 8008632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800863a:	e7f7      	b.n	800862c <memmove+0x24>

0800863c <strncmp>:
 800863c:	b510      	push	{r4, lr}
 800863e:	b16a      	cbz	r2, 800865c <strncmp+0x20>
 8008640:	3901      	subs	r1, #1
 8008642:	1884      	adds	r4, r0, r2
 8008644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008648:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800864c:	429a      	cmp	r2, r3
 800864e:	d103      	bne.n	8008658 <strncmp+0x1c>
 8008650:	42a0      	cmp	r0, r4
 8008652:	d001      	beq.n	8008658 <strncmp+0x1c>
 8008654:	2a00      	cmp	r2, #0
 8008656:	d1f5      	bne.n	8008644 <strncmp+0x8>
 8008658:	1ad0      	subs	r0, r2, r3
 800865a:	bd10      	pop	{r4, pc}
 800865c:	4610      	mov	r0, r2
 800865e:	e7fc      	b.n	800865a <strncmp+0x1e>

08008660 <_sbrk_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	2300      	movs	r3, #0
 8008664:	4d05      	ldr	r5, [pc, #20]	; (800867c <_sbrk_r+0x1c>)
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7f9 fdc4 	bl	80021f8 <_sbrk>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_sbrk_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_sbrk_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	200009e8 	.word	0x200009e8

08008680 <memcpy>:
 8008680:	440a      	add	r2, r1
 8008682:	4291      	cmp	r1, r2
 8008684:	f100 33ff 	add.w	r3, r0, #4294967295
 8008688:	d100      	bne.n	800868c <memcpy+0xc>
 800868a:	4770      	bx	lr
 800868c:	b510      	push	{r4, lr}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	4291      	cmp	r1, r2
 8008694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008698:	d1f9      	bne.n	800868e <memcpy+0xe>
 800869a:	bd10      	pop	{r4, pc}

0800869c <nan>:
 800869c:	2000      	movs	r0, #0
 800869e:	4901      	ldr	r1, [pc, #4]	; (80086a4 <nan+0x8>)
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	7ff80000 	.word	0x7ff80000

080086a8 <__assert_func>:
 80086a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086aa:	4614      	mov	r4, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <__assert_func+0x2c>)
 80086b0:	4605      	mov	r5, r0
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68d8      	ldr	r0, [r3, #12]
 80086b6:	b14c      	cbz	r4, 80086cc <__assert_func+0x24>
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <__assert_func+0x30>)
 80086ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086be:	9100      	str	r1, [sp, #0]
 80086c0:	462b      	mov	r3, r5
 80086c2:	4906      	ldr	r1, [pc, #24]	; (80086dc <__assert_func+0x34>)
 80086c4:	f000 fbca 	bl	8008e5c <fiprintf>
 80086c8:	f000 fbda 	bl	8008e80 <abort>
 80086cc:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <__assert_func+0x38>)
 80086ce:	461c      	mov	r4, r3
 80086d0:	e7f3      	b.n	80086ba <__assert_func+0x12>
 80086d2:	bf00      	nop
 80086d4:	2000006c 	.word	0x2000006c
 80086d8:	0800a659 	.word	0x0800a659
 80086dc:	0800a666 	.word	0x0800a666
 80086e0:	0800a694 	.word	0x0800a694

080086e4 <_calloc_r>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	fba1 5402 	umull	r5, r4, r1, r2
 80086ea:	b934      	cbnz	r4, 80086fa <_calloc_r+0x16>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7fe fa43 	bl	8006b78 <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b928      	cbnz	r0, 8008702 <_calloc_r+0x1e>
 80086f6:	4630      	mov	r0, r6
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	220c      	movs	r2, #12
 80086fc:	2600      	movs	r6, #0
 80086fe:	6002      	str	r2, [r0, #0]
 8008700:	e7f9      	b.n	80086f6 <_calloc_r+0x12>
 8008702:	462a      	mov	r2, r5
 8008704:	4621      	mov	r1, r4
 8008706:	f7fd fab0 	bl	8005c6a <memset>
 800870a:	e7f4      	b.n	80086f6 <_calloc_r+0x12>

0800870c <rshift>:
 800870c:	6903      	ldr	r3, [r0, #16]
 800870e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008712:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008716:	f100 0414 	add.w	r4, r0, #20
 800871a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800871e:	dd46      	ble.n	80087ae <rshift+0xa2>
 8008720:	f011 011f 	ands.w	r1, r1, #31
 8008724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800872c:	d10c      	bne.n	8008748 <rshift+0x3c>
 800872e:	4629      	mov	r1, r5
 8008730:	f100 0710 	add.w	r7, r0, #16
 8008734:	42b1      	cmp	r1, r6
 8008736:	d335      	bcc.n	80087a4 <rshift+0x98>
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	1eea      	subs	r2, r5, #3
 800873e:	4296      	cmp	r6, r2
 8008740:	bf38      	it	cc
 8008742:	2300      	movcc	r3, #0
 8008744:	4423      	add	r3, r4
 8008746:	e015      	b.n	8008774 <rshift+0x68>
 8008748:	46a1      	mov	r9, r4
 800874a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800874e:	f1c1 0820 	rsb	r8, r1, #32
 8008752:	40cf      	lsrs	r7, r1
 8008754:	f105 0e04 	add.w	lr, r5, #4
 8008758:	4576      	cmp	r6, lr
 800875a:	46f4      	mov	ip, lr
 800875c:	d816      	bhi.n	800878c <rshift+0x80>
 800875e:	1a9a      	subs	r2, r3, r2
 8008760:	0092      	lsls	r2, r2, #2
 8008762:	3a04      	subs	r2, #4
 8008764:	3501      	adds	r5, #1
 8008766:	42ae      	cmp	r6, r5
 8008768:	bf38      	it	cc
 800876a:	2200      	movcc	r2, #0
 800876c:	18a3      	adds	r3, r4, r2
 800876e:	50a7      	str	r7, [r4, r2]
 8008770:	b107      	cbz	r7, 8008774 <rshift+0x68>
 8008772:	3304      	adds	r3, #4
 8008774:	42a3      	cmp	r3, r4
 8008776:	eba3 0204 	sub.w	r2, r3, r4
 800877a:	bf08      	it	eq
 800877c:	2300      	moveq	r3, #0
 800877e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008782:	6102      	str	r2, [r0, #16]
 8008784:	bf08      	it	eq
 8008786:	6143      	streq	r3, [r0, #20]
 8008788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800878c:	f8dc c000 	ldr.w	ip, [ip]
 8008790:	fa0c fc08 	lsl.w	ip, ip, r8
 8008794:	ea4c 0707 	orr.w	r7, ip, r7
 8008798:	f849 7b04 	str.w	r7, [r9], #4
 800879c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087a0:	40cf      	lsrs	r7, r1
 80087a2:	e7d9      	b.n	8008758 <rshift+0x4c>
 80087a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80087a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80087ac:	e7c2      	b.n	8008734 <rshift+0x28>
 80087ae:	4623      	mov	r3, r4
 80087b0:	e7e0      	b.n	8008774 <rshift+0x68>

080087b2 <__hexdig_fun>:
 80087b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087b6:	2b09      	cmp	r3, #9
 80087b8:	d802      	bhi.n	80087c0 <__hexdig_fun+0xe>
 80087ba:	3820      	subs	r0, #32
 80087bc:	b2c0      	uxtb	r0, r0
 80087be:	4770      	bx	lr
 80087c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	d801      	bhi.n	80087cc <__hexdig_fun+0x1a>
 80087c8:	3847      	subs	r0, #71	; 0x47
 80087ca:	e7f7      	b.n	80087bc <__hexdig_fun+0xa>
 80087cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087d0:	2b05      	cmp	r3, #5
 80087d2:	d801      	bhi.n	80087d8 <__hexdig_fun+0x26>
 80087d4:	3827      	subs	r0, #39	; 0x27
 80087d6:	e7f1      	b.n	80087bc <__hexdig_fun+0xa>
 80087d8:	2000      	movs	r0, #0
 80087da:	4770      	bx	lr

080087dc <__gethex>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4681      	mov	r9, r0
 80087e2:	468a      	mov	sl, r1
 80087e4:	4617      	mov	r7, r2
 80087e6:	680a      	ldr	r2, [r1, #0]
 80087e8:	b085      	sub	sp, #20
 80087ea:	f102 0b02 	add.w	fp, r2, #2
 80087ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	32fe      	adds	r2, #254	; 0xfe
 80087fa:	eb02 030b 	add.w	r3, r2, fp
 80087fe:	46d8      	mov	r8, fp
 8008800:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	2830      	cmp	r0, #48	; 0x30
 8008808:	d0f7      	beq.n	80087fa <__gethex+0x1e>
 800880a:	f7ff ffd2 	bl	80087b2 <__hexdig_fun>
 800880e:	4604      	mov	r4, r0
 8008810:	2800      	cmp	r0, #0
 8008812:	d138      	bne.n	8008886 <__gethex+0xaa>
 8008814:	2201      	movs	r2, #1
 8008816:	4640      	mov	r0, r8
 8008818:	49a7      	ldr	r1, [pc, #668]	; (8008ab8 <__gethex+0x2dc>)
 800881a:	f7ff ff0f 	bl	800863c <strncmp>
 800881e:	4606      	mov	r6, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	d169      	bne.n	80088f8 <__gethex+0x11c>
 8008824:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008828:	465d      	mov	r5, fp
 800882a:	f7ff ffc2 	bl	80087b2 <__hexdig_fun>
 800882e:	2800      	cmp	r0, #0
 8008830:	d064      	beq.n	80088fc <__gethex+0x120>
 8008832:	465a      	mov	r2, fp
 8008834:	7810      	ldrb	r0, [r2, #0]
 8008836:	4690      	mov	r8, r2
 8008838:	2830      	cmp	r0, #48	; 0x30
 800883a:	f102 0201 	add.w	r2, r2, #1
 800883e:	d0f9      	beq.n	8008834 <__gethex+0x58>
 8008840:	f7ff ffb7 	bl	80087b2 <__hexdig_fun>
 8008844:	2301      	movs	r3, #1
 8008846:	fab0 f480 	clz	r4, r0
 800884a:	465e      	mov	r6, fp
 800884c:	0964      	lsrs	r4, r4, #5
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	4642      	mov	r2, r8
 8008852:	4615      	mov	r5, r2
 8008854:	7828      	ldrb	r0, [r5, #0]
 8008856:	3201      	adds	r2, #1
 8008858:	f7ff ffab 	bl	80087b2 <__hexdig_fun>
 800885c:	2800      	cmp	r0, #0
 800885e:	d1f8      	bne.n	8008852 <__gethex+0x76>
 8008860:	2201      	movs	r2, #1
 8008862:	4628      	mov	r0, r5
 8008864:	4994      	ldr	r1, [pc, #592]	; (8008ab8 <__gethex+0x2dc>)
 8008866:	f7ff fee9 	bl	800863c <strncmp>
 800886a:	b978      	cbnz	r0, 800888c <__gethex+0xb0>
 800886c:	b946      	cbnz	r6, 8008880 <__gethex+0xa4>
 800886e:	1c6e      	adds	r6, r5, #1
 8008870:	4632      	mov	r2, r6
 8008872:	4615      	mov	r5, r2
 8008874:	7828      	ldrb	r0, [r5, #0]
 8008876:	3201      	adds	r2, #1
 8008878:	f7ff ff9b 	bl	80087b2 <__hexdig_fun>
 800887c:	2800      	cmp	r0, #0
 800887e:	d1f8      	bne.n	8008872 <__gethex+0x96>
 8008880:	1b73      	subs	r3, r6, r5
 8008882:	009e      	lsls	r6, r3, #2
 8008884:	e004      	b.n	8008890 <__gethex+0xb4>
 8008886:	2400      	movs	r4, #0
 8008888:	4626      	mov	r6, r4
 800888a:	e7e1      	b.n	8008850 <__gethex+0x74>
 800888c:	2e00      	cmp	r6, #0
 800888e:	d1f7      	bne.n	8008880 <__gethex+0xa4>
 8008890:	782b      	ldrb	r3, [r5, #0]
 8008892:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008896:	2b50      	cmp	r3, #80	; 0x50
 8008898:	d13d      	bne.n	8008916 <__gethex+0x13a>
 800889a:	786b      	ldrb	r3, [r5, #1]
 800889c:	2b2b      	cmp	r3, #43	; 0x2b
 800889e:	d02f      	beq.n	8008900 <__gethex+0x124>
 80088a0:	2b2d      	cmp	r3, #45	; 0x2d
 80088a2:	d031      	beq.n	8008908 <__gethex+0x12c>
 80088a4:	f04f 0b00 	mov.w	fp, #0
 80088a8:	1c69      	adds	r1, r5, #1
 80088aa:	7808      	ldrb	r0, [r1, #0]
 80088ac:	f7ff ff81 	bl	80087b2 <__hexdig_fun>
 80088b0:	1e42      	subs	r2, r0, #1
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	2a18      	cmp	r2, #24
 80088b6:	d82e      	bhi.n	8008916 <__gethex+0x13a>
 80088b8:	f1a0 0210 	sub.w	r2, r0, #16
 80088bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088c0:	f7ff ff77 	bl	80087b2 <__hexdig_fun>
 80088c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80088c8:	fa5f fc8c 	uxtb.w	ip, ip
 80088cc:	f1bc 0f18 	cmp.w	ip, #24
 80088d0:	d91d      	bls.n	800890e <__gethex+0x132>
 80088d2:	f1bb 0f00 	cmp.w	fp, #0
 80088d6:	d000      	beq.n	80088da <__gethex+0xfe>
 80088d8:	4252      	negs	r2, r2
 80088da:	4416      	add	r6, r2
 80088dc:	f8ca 1000 	str.w	r1, [sl]
 80088e0:	b1dc      	cbz	r4, 800891a <__gethex+0x13e>
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bf14      	ite	ne
 80088e8:	f04f 0800 	movne.w	r8, #0
 80088ec:	f04f 0806 	moveq.w	r8, #6
 80088f0:	4640      	mov	r0, r8
 80088f2:	b005      	add	sp, #20
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	4645      	mov	r5, r8
 80088fa:	4626      	mov	r6, r4
 80088fc:	2401      	movs	r4, #1
 80088fe:	e7c7      	b.n	8008890 <__gethex+0xb4>
 8008900:	f04f 0b00 	mov.w	fp, #0
 8008904:	1ca9      	adds	r1, r5, #2
 8008906:	e7d0      	b.n	80088aa <__gethex+0xce>
 8008908:	f04f 0b01 	mov.w	fp, #1
 800890c:	e7fa      	b.n	8008904 <__gethex+0x128>
 800890e:	230a      	movs	r3, #10
 8008910:	fb03 0002 	mla	r0, r3, r2, r0
 8008914:	e7d0      	b.n	80088b8 <__gethex+0xdc>
 8008916:	4629      	mov	r1, r5
 8008918:	e7e0      	b.n	80088dc <__gethex+0x100>
 800891a:	4621      	mov	r1, r4
 800891c:	eba5 0308 	sub.w	r3, r5, r8
 8008920:	3b01      	subs	r3, #1
 8008922:	2b07      	cmp	r3, #7
 8008924:	dc0a      	bgt.n	800893c <__gethex+0x160>
 8008926:	4648      	mov	r0, r9
 8008928:	f7fe f9b2 	bl	8006c90 <_Balloc>
 800892c:	4604      	mov	r4, r0
 800892e:	b940      	cbnz	r0, 8008942 <__gethex+0x166>
 8008930:	4602      	mov	r2, r0
 8008932:	21e4      	movs	r1, #228	; 0xe4
 8008934:	4b61      	ldr	r3, [pc, #388]	; (8008abc <__gethex+0x2e0>)
 8008936:	4862      	ldr	r0, [pc, #392]	; (8008ac0 <__gethex+0x2e4>)
 8008938:	f7ff feb6 	bl	80086a8 <__assert_func>
 800893c:	3101      	adds	r1, #1
 800893e:	105b      	asrs	r3, r3, #1
 8008940:	e7ef      	b.n	8008922 <__gethex+0x146>
 8008942:	2300      	movs	r3, #0
 8008944:	469b      	mov	fp, r3
 8008946:	f100 0a14 	add.w	sl, r0, #20
 800894a:	f8cd a004 	str.w	sl, [sp, #4]
 800894e:	45a8      	cmp	r8, r5
 8008950:	d344      	bcc.n	80089dc <__gethex+0x200>
 8008952:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008956:	4658      	mov	r0, fp
 8008958:	f848 bb04 	str.w	fp, [r8], #4
 800895c:	eba8 080a 	sub.w	r8, r8, sl
 8008960:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008964:	6122      	str	r2, [r4, #16]
 8008966:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800896a:	f7fe fa83 	bl	8006e74 <__hi0bits>
 800896e:	683d      	ldr	r5, [r7, #0]
 8008970:	eba8 0800 	sub.w	r8, r8, r0
 8008974:	45a8      	cmp	r8, r5
 8008976:	dd59      	ble.n	8008a2c <__gethex+0x250>
 8008978:	eba8 0805 	sub.w	r8, r8, r5
 800897c:	4641      	mov	r1, r8
 800897e:	4620      	mov	r0, r4
 8008980:	f7fe fe01 	bl	8007586 <__any_on>
 8008984:	4683      	mov	fp, r0
 8008986:	b1b8      	cbz	r0, 80089b8 <__gethex+0x1dc>
 8008988:	f04f 0b01 	mov.w	fp, #1
 800898c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008990:	1159      	asrs	r1, r3, #5
 8008992:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008996:	f003 021f 	and.w	r2, r3, #31
 800899a:	fa0b f202 	lsl.w	r2, fp, r2
 800899e:	420a      	tst	r2, r1
 80089a0:	d00a      	beq.n	80089b8 <__gethex+0x1dc>
 80089a2:	455b      	cmp	r3, fp
 80089a4:	dd06      	ble.n	80089b4 <__gethex+0x1d8>
 80089a6:	4620      	mov	r0, r4
 80089a8:	f1a8 0102 	sub.w	r1, r8, #2
 80089ac:	f7fe fdeb 	bl	8007586 <__any_on>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d138      	bne.n	8008a26 <__gethex+0x24a>
 80089b4:	f04f 0b02 	mov.w	fp, #2
 80089b8:	4641      	mov	r1, r8
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7ff fea6 	bl	800870c <rshift>
 80089c0:	4446      	add	r6, r8
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	42b3      	cmp	r3, r6
 80089c6:	da41      	bge.n	8008a4c <__gethex+0x270>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4648      	mov	r0, r9
 80089cc:	f7fe f9a0 	bl	8006d10 <_Bfree>
 80089d0:	2300      	movs	r3, #0
 80089d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	e789      	b.n	80088f0 <__gethex+0x114>
 80089dc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80089e0:	2a2e      	cmp	r2, #46	; 0x2e
 80089e2:	d014      	beq.n	8008a0e <__gethex+0x232>
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d106      	bne.n	80089f6 <__gethex+0x21a>
 80089e8:	9b01      	ldr	r3, [sp, #4]
 80089ea:	f843 bb04 	str.w	fp, [r3], #4
 80089ee:	f04f 0b00 	mov.w	fp, #0
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	465b      	mov	r3, fp
 80089f6:	7828      	ldrb	r0, [r5, #0]
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	f7ff feda 	bl	80087b2 <__hexdig_fun>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	f000 000f 	and.w	r0, r0, #15
 8008a04:	4098      	lsls	r0, r3
 8008a06:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	e79f      	b.n	800894e <__gethex+0x172>
 8008a0e:	45a8      	cmp	r8, r5
 8008a10:	d8e8      	bhi.n	80089e4 <__gethex+0x208>
 8008a12:	2201      	movs	r2, #1
 8008a14:	4628      	mov	r0, r5
 8008a16:	4928      	ldr	r1, [pc, #160]	; (8008ab8 <__gethex+0x2dc>)
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	f7ff fe0f 	bl	800863c <strncmp>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d1df      	bne.n	80089e4 <__gethex+0x208>
 8008a24:	e793      	b.n	800894e <__gethex+0x172>
 8008a26:	f04f 0b03 	mov.w	fp, #3
 8008a2a:	e7c5      	b.n	80089b8 <__gethex+0x1dc>
 8008a2c:	da0b      	bge.n	8008a46 <__gethex+0x26a>
 8008a2e:	eba5 0808 	sub.w	r8, r5, r8
 8008a32:	4621      	mov	r1, r4
 8008a34:	4642      	mov	r2, r8
 8008a36:	4648      	mov	r0, r9
 8008a38:	f7fe fb82 	bl	8007140 <__lshift>
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	eba6 0608 	sub.w	r6, r6, r8
 8008a42:	f100 0a14 	add.w	sl, r0, #20
 8008a46:	f04f 0b00 	mov.w	fp, #0
 8008a4a:	e7ba      	b.n	80089c2 <__gethex+0x1e6>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	42b3      	cmp	r3, r6
 8008a50:	dd74      	ble.n	8008b3c <__gethex+0x360>
 8008a52:	1b9e      	subs	r6, r3, r6
 8008a54:	42b5      	cmp	r5, r6
 8008a56:	dc35      	bgt.n	8008ac4 <__gethex+0x2e8>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d023      	beq.n	8008aa6 <__gethex+0x2ca>
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d025      	beq.n	8008aae <__gethex+0x2d2>
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d115      	bne.n	8008a92 <__gethex+0x2b6>
 8008a66:	42b5      	cmp	r5, r6
 8008a68:	d113      	bne.n	8008a92 <__gethex+0x2b6>
 8008a6a:	2d01      	cmp	r5, #1
 8008a6c:	d10b      	bne.n	8008a86 <__gethex+0x2aa>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	9a02      	ldr	r2, [sp, #8]
 8008a72:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008a76:	6013      	str	r3, [r2, #0]
 8008a78:	2301      	movs	r3, #1
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	f8ca 3000 	str.w	r3, [sl]
 8008a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a82:	601c      	str	r4, [r3, #0]
 8008a84:	e734      	b.n	80088f0 <__gethex+0x114>
 8008a86:	4620      	mov	r0, r4
 8008a88:	1e69      	subs	r1, r5, #1
 8008a8a:	f7fe fd7c 	bl	8007586 <__any_on>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d1ed      	bne.n	8008a6e <__gethex+0x292>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4648      	mov	r0, r9
 8008a96:	f7fe f93b 	bl	8006d10 <_Bfree>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a9e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	e724      	b.n	80088f0 <__gethex+0x114>
 8008aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1f2      	bne.n	8008a92 <__gethex+0x2b6>
 8008aac:	e7df      	b.n	8008a6e <__gethex+0x292>
 8008aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1dc      	bne.n	8008a6e <__gethex+0x292>
 8008ab4:	e7ed      	b.n	8008a92 <__gethex+0x2b6>
 8008ab6:	bf00      	nop
 8008ab8:	0800a5ec 	.word	0x0800a5ec
 8008abc:	0800a480 	.word	0x0800a480
 8008ac0:	0800a695 	.word	0x0800a695
 8008ac4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008ac8:	f1bb 0f00 	cmp.w	fp, #0
 8008acc:	d133      	bne.n	8008b36 <__gethex+0x35a>
 8008ace:	f1b8 0f00 	cmp.w	r8, #0
 8008ad2:	d004      	beq.n	8008ade <__gethex+0x302>
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7fe fd55 	bl	8007586 <__any_on>
 8008adc:	4683      	mov	fp, r0
 8008ade:	2301      	movs	r3, #1
 8008ae0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008ae4:	f008 081f 	and.w	r8, r8, #31
 8008ae8:	fa03 f308 	lsl.w	r3, r3, r8
 8008aec:	f04f 0802 	mov.w	r8, #2
 8008af0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008af4:	4631      	mov	r1, r6
 8008af6:	4213      	tst	r3, r2
 8008af8:	4620      	mov	r0, r4
 8008afa:	bf18      	it	ne
 8008afc:	f04b 0b02 	orrne.w	fp, fp, #2
 8008b00:	1bad      	subs	r5, r5, r6
 8008b02:	f7ff fe03 	bl	800870c <rshift>
 8008b06:	687e      	ldr	r6, [r7, #4]
 8008b08:	f1bb 0f00 	cmp.w	fp, #0
 8008b0c:	d04a      	beq.n	8008ba4 <__gethex+0x3c8>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d016      	beq.n	8008b42 <__gethex+0x366>
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d018      	beq.n	8008b4a <__gethex+0x36e>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d109      	bne.n	8008b30 <__gethex+0x354>
 8008b1c:	f01b 0f02 	tst.w	fp, #2
 8008b20:	d006      	beq.n	8008b30 <__gethex+0x354>
 8008b22:	f8da 3000 	ldr.w	r3, [sl]
 8008b26:	ea4b 0b03 	orr.w	fp, fp, r3
 8008b2a:	f01b 0f01 	tst.w	fp, #1
 8008b2e:	d10f      	bne.n	8008b50 <__gethex+0x374>
 8008b30:	f048 0810 	orr.w	r8, r8, #16
 8008b34:	e036      	b.n	8008ba4 <__gethex+0x3c8>
 8008b36:	f04f 0b01 	mov.w	fp, #1
 8008b3a:	e7d0      	b.n	8008ade <__gethex+0x302>
 8008b3c:	f04f 0801 	mov.w	r8, #1
 8008b40:	e7e2      	b.n	8008b08 <__gethex+0x32c>
 8008b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b44:	f1c3 0301 	rsb	r3, r3, #1
 8008b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0ef      	beq.n	8008b30 <__gethex+0x354>
 8008b50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b54:	f104 0214 	add.w	r2, r4, #20
 8008b58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008b64:	4694      	mov	ip, r2
 8008b66:	f852 1b04 	ldr.w	r1, [r2], #4
 8008b6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008b6e:	d01e      	beq.n	8008bae <__gethex+0x3d2>
 8008b70:	3101      	adds	r1, #1
 8008b72:	f8cc 1000 	str.w	r1, [ip]
 8008b76:	f1b8 0f02 	cmp.w	r8, #2
 8008b7a:	f104 0214 	add.w	r2, r4, #20
 8008b7e:	d13d      	bne.n	8008bfc <__gethex+0x420>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	d10b      	bne.n	8008ba0 <__gethex+0x3c4>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	1169      	asrs	r1, r5, #5
 8008b8c:	f005 051f 	and.w	r5, r5, #31
 8008b90:	fa03 f505 	lsl.w	r5, r3, r5
 8008b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b98:	421d      	tst	r5, r3
 8008b9a:	bf18      	it	ne
 8008b9c:	f04f 0801 	movne.w	r8, #1
 8008ba0:	f048 0820 	orr.w	r8, r8, #32
 8008ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ba6:	601c      	str	r4, [r3, #0]
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	601e      	str	r6, [r3, #0]
 8008bac:	e6a0      	b.n	80088f0 <__gethex+0x114>
 8008bae:	4290      	cmp	r0, r2
 8008bb0:	f842 3c04 	str.w	r3, [r2, #-4]
 8008bb4:	d8d6      	bhi.n	8008b64 <__gethex+0x388>
 8008bb6:	68a2      	ldr	r2, [r4, #8]
 8008bb8:	4593      	cmp	fp, r2
 8008bba:	db17      	blt.n	8008bec <__gethex+0x410>
 8008bbc:	6861      	ldr	r1, [r4, #4]
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	f7fe f865 	bl	8006c90 <_Balloc>
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	b918      	cbnz	r0, 8008bd2 <__gethex+0x3f6>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	2184      	movs	r1, #132	; 0x84
 8008bce:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <__gethex+0x45c>)
 8008bd0:	e6b1      	b.n	8008936 <__gethex+0x15a>
 8008bd2:	6922      	ldr	r2, [r4, #16]
 8008bd4:	f104 010c 	add.w	r1, r4, #12
 8008bd8:	3202      	adds	r2, #2
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	300c      	adds	r0, #12
 8008bde:	f7ff fd4f 	bl	8008680 <memcpy>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4648      	mov	r0, r9
 8008be6:	f7fe f893 	bl	8006d10 <_Bfree>
 8008bea:	4654      	mov	r4, sl
 8008bec:	6922      	ldr	r2, [r4, #16]
 8008bee:	1c51      	adds	r1, r2, #1
 8008bf0:	6121      	str	r1, [r4, #16]
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008bf8:	6151      	str	r1, [r2, #20]
 8008bfa:	e7bc      	b.n	8008b76 <__gethex+0x39a>
 8008bfc:	6921      	ldr	r1, [r4, #16]
 8008bfe:	4559      	cmp	r1, fp
 8008c00:	dd0b      	ble.n	8008c1a <__gethex+0x43e>
 8008c02:	2101      	movs	r1, #1
 8008c04:	4620      	mov	r0, r4
 8008c06:	f7ff fd81 	bl	800870c <rshift>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	42b3      	cmp	r3, r6
 8008c10:	f6ff aeda 	blt.w	80089c8 <__gethex+0x1ec>
 8008c14:	f04f 0801 	mov.w	r8, #1
 8008c18:	e7c2      	b.n	8008ba0 <__gethex+0x3c4>
 8008c1a:	f015 051f 	ands.w	r5, r5, #31
 8008c1e:	d0f9      	beq.n	8008c14 <__gethex+0x438>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	f1c5 0520 	rsb	r5, r5, #32
 8008c26:	441a      	add	r2, r3
 8008c28:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008c2c:	f7fe f922 	bl	8006e74 <__hi0bits>
 8008c30:	42a8      	cmp	r0, r5
 8008c32:	dbe6      	blt.n	8008c02 <__gethex+0x426>
 8008c34:	e7ee      	b.n	8008c14 <__gethex+0x438>
 8008c36:	bf00      	nop
 8008c38:	0800a480 	.word	0x0800a480

08008c3c <L_shift>:
 8008c3c:	f1c2 0208 	rsb	r2, r2, #8
 8008c40:	0092      	lsls	r2, r2, #2
 8008c42:	b570      	push	{r4, r5, r6, lr}
 8008c44:	f1c2 0620 	rsb	r6, r2, #32
 8008c48:	6843      	ldr	r3, [r0, #4]
 8008c4a:	6804      	ldr	r4, [r0, #0]
 8008c4c:	fa03 f506 	lsl.w	r5, r3, r6
 8008c50:	432c      	orrs	r4, r5
 8008c52:	40d3      	lsrs	r3, r2
 8008c54:	6004      	str	r4, [r0, #0]
 8008c56:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c5a:	4288      	cmp	r0, r1
 8008c5c:	d3f4      	bcc.n	8008c48 <L_shift+0xc>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}

08008c60 <__match>:
 8008c60:	b530      	push	{r4, r5, lr}
 8008c62:	6803      	ldr	r3, [r0, #0]
 8008c64:	3301      	adds	r3, #1
 8008c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c6a:	b914      	cbnz	r4, 8008c72 <__match+0x12>
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	2001      	movs	r0, #1
 8008c70:	bd30      	pop	{r4, r5, pc}
 8008c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c7a:	2d19      	cmp	r5, #25
 8008c7c:	bf98      	it	ls
 8008c7e:	3220      	addls	r2, #32
 8008c80:	42a2      	cmp	r2, r4
 8008c82:	d0f0      	beq.n	8008c66 <__match+0x6>
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7f3      	b.n	8008c70 <__match+0x10>

08008c88 <__hexnan>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	680b      	ldr	r3, [r1, #0]
 8008c90:	4682      	mov	sl, r0
 8008c92:	115e      	asrs	r6, r3, #5
 8008c94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c98:	f013 031f 	ands.w	r3, r3, #31
 8008c9c:	bf18      	it	ne
 8008c9e:	3604      	addne	r6, #4
 8008ca0:	1f37      	subs	r7, r6, #4
 8008ca2:	4690      	mov	r8, r2
 8008ca4:	46b9      	mov	r9, r7
 8008ca6:	463c      	mov	r4, r7
 8008ca8:	46ab      	mov	fp, r5
 8008caa:	b087      	sub	sp, #28
 8008cac:	6801      	ldr	r1, [r0, #0]
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cb4:	9502      	str	r5, [sp, #8]
 8008cb6:	784a      	ldrb	r2, [r1, #1]
 8008cb8:	1c4b      	adds	r3, r1, #1
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	b342      	cbz	r2, 8008d10 <__hexnan+0x88>
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	9105      	str	r1, [sp, #20]
 8008cc2:	9204      	str	r2, [sp, #16]
 8008cc4:	f7ff fd75 	bl	80087b2 <__hexdig_fun>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d14f      	bne.n	8008d6c <__hexnan+0xe4>
 8008ccc:	9a04      	ldr	r2, [sp, #16]
 8008cce:	9905      	ldr	r1, [sp, #20]
 8008cd0:	2a20      	cmp	r2, #32
 8008cd2:	d818      	bhi.n	8008d06 <__hexnan+0x7e>
 8008cd4:	9b02      	ldr	r3, [sp, #8]
 8008cd6:	459b      	cmp	fp, r3
 8008cd8:	dd13      	ble.n	8008d02 <__hexnan+0x7a>
 8008cda:	454c      	cmp	r4, r9
 8008cdc:	d206      	bcs.n	8008cec <__hexnan+0x64>
 8008cde:	2d07      	cmp	r5, #7
 8008ce0:	dc04      	bgt.n	8008cec <__hexnan+0x64>
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7ff ffa8 	bl	8008c3c <L_shift>
 8008cec:	4544      	cmp	r4, r8
 8008cee:	d950      	bls.n	8008d92 <__hexnan+0x10a>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f1a4 0904 	sub.w	r9, r4, #4
 8008cf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	464c      	mov	r4, r9
 8008cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8008d02:	9903      	ldr	r1, [sp, #12]
 8008d04:	e7d7      	b.n	8008cb6 <__hexnan+0x2e>
 8008d06:	2a29      	cmp	r2, #41	; 0x29
 8008d08:	d155      	bne.n	8008db6 <__hexnan+0x12e>
 8008d0a:	3102      	adds	r1, #2
 8008d0c:	f8ca 1000 	str.w	r1, [sl]
 8008d10:	f1bb 0f00 	cmp.w	fp, #0
 8008d14:	d04f      	beq.n	8008db6 <__hexnan+0x12e>
 8008d16:	454c      	cmp	r4, r9
 8008d18:	d206      	bcs.n	8008d28 <__hexnan+0xa0>
 8008d1a:	2d07      	cmp	r5, #7
 8008d1c:	dc04      	bgt.n	8008d28 <__hexnan+0xa0>
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4649      	mov	r1, r9
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ff8a 	bl	8008c3c <L_shift>
 8008d28:	4544      	cmp	r4, r8
 8008d2a:	d934      	bls.n	8008d96 <__hexnan+0x10e>
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	f1a8 0204 	sub.w	r2, r8, #4
 8008d32:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d36:	429f      	cmp	r7, r3
 8008d38:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d3c:	d2f9      	bcs.n	8008d32 <__hexnan+0xaa>
 8008d3e:	1b3b      	subs	r3, r7, r4
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	3304      	adds	r3, #4
 8008d46:	3e03      	subs	r6, #3
 8008d48:	3401      	adds	r4, #1
 8008d4a:	42a6      	cmp	r6, r4
 8008d4c:	bf38      	it	cc
 8008d4e:	2304      	movcc	r3, #4
 8008d50:	2200      	movs	r2, #0
 8008d52:	4443      	add	r3, r8
 8008d54:	f843 2b04 	str.w	r2, [r3], #4
 8008d58:	429f      	cmp	r7, r3
 8008d5a:	d2fb      	bcs.n	8008d54 <__hexnan+0xcc>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	b91b      	cbnz	r3, 8008d68 <__hexnan+0xe0>
 8008d60:	4547      	cmp	r7, r8
 8008d62:	d126      	bne.n	8008db2 <__hexnan+0x12a>
 8008d64:	2301      	movs	r3, #1
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	2005      	movs	r0, #5
 8008d6a:	e025      	b.n	8008db8 <__hexnan+0x130>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	2d08      	cmp	r5, #8
 8008d70:	f10b 0b01 	add.w	fp, fp, #1
 8008d74:	dd06      	ble.n	8008d84 <__hexnan+0xfc>
 8008d76:	4544      	cmp	r4, r8
 8008d78:	d9c3      	bls.n	8008d02 <__hexnan+0x7a>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2501      	movs	r5, #1
 8008d7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d82:	3c04      	subs	r4, #4
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	f000 000f 	and.w	r0, r0, #15
 8008d8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d8e:	6020      	str	r0, [r4, #0]
 8008d90:	e7b7      	b.n	8008d02 <__hexnan+0x7a>
 8008d92:	2508      	movs	r5, #8
 8008d94:	e7b5      	b.n	8008d02 <__hexnan+0x7a>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0df      	beq.n	8008d5c <__hexnan+0xd4>
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	f1c3 0320 	rsb	r3, r3, #32
 8008da4:	40da      	lsrs	r2, r3
 8008da6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008daa:	4013      	ands	r3, r2
 8008dac:	f846 3c04 	str.w	r3, [r6, #-4]
 8008db0:	e7d4      	b.n	8008d5c <__hexnan+0xd4>
 8008db2:	3f04      	subs	r7, #4
 8008db4:	e7d2      	b.n	8008d5c <__hexnan+0xd4>
 8008db6:	2004      	movs	r0, #4
 8008db8:	b007      	add	sp, #28
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dbe <__ascii_mbtowc>:
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	b901      	cbnz	r1, 8008dc4 <__ascii_mbtowc+0x6>
 8008dc2:	a901      	add	r1, sp, #4
 8008dc4:	b142      	cbz	r2, 8008dd8 <__ascii_mbtowc+0x1a>
 8008dc6:	b14b      	cbz	r3, 8008ddc <__ascii_mbtowc+0x1e>
 8008dc8:	7813      	ldrb	r3, [r2, #0]
 8008dca:	600b      	str	r3, [r1, #0]
 8008dcc:	7812      	ldrb	r2, [r2, #0]
 8008dce:	1e10      	subs	r0, r2, #0
 8008dd0:	bf18      	it	ne
 8008dd2:	2001      	movne	r0, #1
 8008dd4:	b002      	add	sp, #8
 8008dd6:	4770      	bx	lr
 8008dd8:	4610      	mov	r0, r2
 8008dda:	e7fb      	b.n	8008dd4 <__ascii_mbtowc+0x16>
 8008ddc:	f06f 0001 	mvn.w	r0, #1
 8008de0:	e7f8      	b.n	8008dd4 <__ascii_mbtowc+0x16>

08008de2 <_realloc_r>:
 8008de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	4680      	mov	r8, r0
 8008de8:	4614      	mov	r4, r2
 8008dea:	460e      	mov	r6, r1
 8008dec:	b921      	cbnz	r1, 8008df8 <_realloc_r+0x16>
 8008dee:	4611      	mov	r1, r2
 8008df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	f7fd bec0 	b.w	8006b78 <_malloc_r>
 8008df8:	b92a      	cbnz	r2, 8008e06 <_realloc_r+0x24>
 8008dfa:	f7fd fe4d 	bl	8006a98 <_free_r>
 8008dfe:	4625      	mov	r5, r4
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e06:	f000 f842 	bl	8008e8e <_malloc_usable_size_r>
 8008e0a:	4284      	cmp	r4, r0
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	d802      	bhi.n	8008e16 <_realloc_r+0x34>
 8008e10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e14:	d812      	bhi.n	8008e3c <_realloc_r+0x5a>
 8008e16:	4621      	mov	r1, r4
 8008e18:	4640      	mov	r0, r8
 8008e1a:	f7fd fead 	bl	8006b78 <_malloc_r>
 8008e1e:	4605      	mov	r5, r0
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d0ed      	beq.n	8008e00 <_realloc_r+0x1e>
 8008e24:	42bc      	cmp	r4, r7
 8008e26:	4622      	mov	r2, r4
 8008e28:	4631      	mov	r1, r6
 8008e2a:	bf28      	it	cs
 8008e2c:	463a      	movcs	r2, r7
 8008e2e:	f7ff fc27 	bl	8008680 <memcpy>
 8008e32:	4631      	mov	r1, r6
 8008e34:	4640      	mov	r0, r8
 8008e36:	f7fd fe2f 	bl	8006a98 <_free_r>
 8008e3a:	e7e1      	b.n	8008e00 <_realloc_r+0x1e>
 8008e3c:	4635      	mov	r5, r6
 8008e3e:	e7df      	b.n	8008e00 <_realloc_r+0x1e>

08008e40 <__ascii_wctomb>:
 8008e40:	4603      	mov	r3, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	b141      	cbz	r1, 8008e58 <__ascii_wctomb+0x18>
 8008e46:	2aff      	cmp	r2, #255	; 0xff
 8008e48:	d904      	bls.n	8008e54 <__ascii_wctomb+0x14>
 8008e4a:	228a      	movs	r2, #138	; 0x8a
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	4770      	bx	lr
 8008e54:	2001      	movs	r0, #1
 8008e56:	700a      	strb	r2, [r1, #0]
 8008e58:	4770      	bx	lr
	...

08008e5c <fiprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b503      	push	{r0, r1, lr}
 8008e60:	4601      	mov	r1, r0
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	4805      	ldr	r0, [pc, #20]	; (8008e7c <fiprintf+0x20>)
 8008e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f000 f83d 	bl	8008eec <_vfiprintf_r>
 8008e72:	b002      	add	sp, #8
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	2000006c 	.word	0x2000006c

08008e80 <abort>:
 8008e80:	2006      	movs	r0, #6
 8008e82:	b508      	push	{r3, lr}
 8008e84:	f000 fa0a 	bl	800929c <raise>
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7f9 f942 	bl	8002112 <_exit>

08008e8e <_malloc_usable_size_r>:
 8008e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e92:	1f18      	subs	r0, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bfbc      	itt	lt
 8008e98:	580b      	ldrlt	r3, [r1, r0]
 8008e9a:	18c0      	addlt	r0, r0, r3
 8008e9c:	4770      	bx	lr

08008e9e <__sfputc_r>:
 8008e9e:	6893      	ldr	r3, [r2, #8]
 8008ea0:	b410      	push	{r4}
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	6093      	str	r3, [r2, #8]
 8008ea8:	da07      	bge.n	8008eba <__sfputc_r+0x1c>
 8008eaa:	6994      	ldr	r4, [r2, #24]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	db01      	blt.n	8008eb4 <__sfputc_r+0x16>
 8008eb0:	290a      	cmp	r1, #10
 8008eb2:	d102      	bne.n	8008eba <__sfputc_r+0x1c>
 8008eb4:	bc10      	pop	{r4}
 8008eb6:	f000 b933 	b.w	8009120 <__swbuf_r>
 8008eba:	6813      	ldr	r3, [r2, #0]
 8008ebc:	1c58      	adds	r0, r3, #1
 8008ebe:	6010      	str	r0, [r2, #0]
 8008ec0:	7019      	strb	r1, [r3, #0]
 8008ec2:	4608      	mov	r0, r1
 8008ec4:	bc10      	pop	{r4}
 8008ec6:	4770      	bx	lr

08008ec8 <__sfputs_r>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	4614      	mov	r4, r2
 8008ed0:	18d5      	adds	r5, r2, r3
 8008ed2:	42ac      	cmp	r4, r5
 8008ed4:	d101      	bne.n	8008eda <__sfputs_r+0x12>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e007      	b.n	8008eea <__sfputs_r+0x22>
 8008eda:	463a      	mov	r2, r7
 8008edc:	4630      	mov	r0, r6
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	f7ff ffdc 	bl	8008e9e <__sfputc_r>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d1f3      	bne.n	8008ed2 <__sfputs_r+0xa>
 8008eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008eec <_vfiprintf_r>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	460d      	mov	r5, r1
 8008ef2:	4614      	mov	r4, r2
 8008ef4:	4698      	mov	r8, r3
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	b09d      	sub	sp, #116	; 0x74
 8008efa:	b118      	cbz	r0, 8008f04 <_vfiprintf_r+0x18>
 8008efc:	6a03      	ldr	r3, [r0, #32]
 8008efe:	b90b      	cbnz	r3, 8008f04 <_vfiprintf_r+0x18>
 8008f00:	f7fc fe1a 	bl	8005b38 <__sinit>
 8008f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f06:	07d9      	lsls	r1, r3, #31
 8008f08:	d405      	bmi.n	8008f16 <_vfiprintf_r+0x2a>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	059a      	lsls	r2, r3, #22
 8008f0e:	d402      	bmi.n	8008f16 <_vfiprintf_r+0x2a>
 8008f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f12:	f7fc ff36 	bl	8005d82 <__retarget_lock_acquire_recursive>
 8008f16:	89ab      	ldrh	r3, [r5, #12]
 8008f18:	071b      	lsls	r3, r3, #28
 8008f1a:	d501      	bpl.n	8008f20 <_vfiprintf_r+0x34>
 8008f1c:	692b      	ldr	r3, [r5, #16]
 8008f1e:	b99b      	cbnz	r3, 8008f48 <_vfiprintf_r+0x5c>
 8008f20:	4629      	mov	r1, r5
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f93a 	bl	800919c <__swsetup_r>
 8008f28:	b170      	cbz	r0, 8008f48 <_vfiprintf_r+0x5c>
 8008f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2c:	07dc      	lsls	r4, r3, #31
 8008f2e:	d504      	bpl.n	8008f3a <_vfiprintf_r+0x4e>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b01d      	add	sp, #116	; 0x74
 8008f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3a:	89ab      	ldrh	r3, [r5, #12]
 8008f3c:	0598      	lsls	r0, r3, #22
 8008f3e:	d4f7      	bmi.n	8008f30 <_vfiprintf_r+0x44>
 8008f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f42:	f7fc ff1f 	bl	8005d84 <__retarget_lock_release_recursive>
 8008f46:	e7f3      	b.n	8008f30 <_vfiprintf_r+0x44>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f52:	2330      	movs	r3, #48	; 0x30
 8008f54:	f04f 0901 	mov.w	r9, #1
 8008f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800910c <_vfiprintf_r+0x220>
 8008f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f64:	4623      	mov	r3, r4
 8008f66:	469a      	mov	sl, r3
 8008f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6c:	b10a      	cbz	r2, 8008f72 <_vfiprintf_r+0x86>
 8008f6e:	2a25      	cmp	r2, #37	; 0x25
 8008f70:	d1f9      	bne.n	8008f66 <_vfiprintf_r+0x7a>
 8008f72:	ebba 0b04 	subs.w	fp, sl, r4
 8008f76:	d00b      	beq.n	8008f90 <_vfiprintf_r+0xa4>
 8008f78:	465b      	mov	r3, fp
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f7ff ffa2 	bl	8008ec8 <__sfputs_r>
 8008f84:	3001      	adds	r0, #1
 8008f86:	f000 80a9 	beq.w	80090dc <_vfiprintf_r+0x1f0>
 8008f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f8c:	445a      	add	r2, fp
 8008f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f90:	f89a 3000 	ldrb.w	r3, [sl]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80a1 	beq.w	80090dc <_vfiprintf_r+0x1f0>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa4:	f10a 0a01 	add.w	sl, sl, #1
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb2:	4654      	mov	r4, sl
 8008fb4:	2205      	movs	r2, #5
 8008fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fba:	4854      	ldr	r0, [pc, #336]	; (800910c <_vfiprintf_r+0x220>)
 8008fbc:	f7fc feeb 	bl	8005d96 <memchr>
 8008fc0:	9a04      	ldr	r2, [sp, #16]
 8008fc2:	b9d8      	cbnz	r0, 8008ffc <_vfiprintf_r+0x110>
 8008fc4:	06d1      	lsls	r1, r2, #27
 8008fc6:	bf44      	itt	mi
 8008fc8:	2320      	movmi	r3, #32
 8008fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fce:	0713      	lsls	r3, r2, #28
 8008fd0:	bf44      	itt	mi
 8008fd2:	232b      	movmi	r3, #43	; 0x2b
 8008fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8008fde:	d015      	beq.n	800900c <_vfiprintf_r+0x120>
 8008fe0:	4654      	mov	r4, sl
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f04f 0c0a 	mov.w	ip, #10
 8008fe8:	9a07      	ldr	r2, [sp, #28]
 8008fea:	4621      	mov	r1, r4
 8008fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff0:	3b30      	subs	r3, #48	; 0x30
 8008ff2:	2b09      	cmp	r3, #9
 8008ff4:	d94d      	bls.n	8009092 <_vfiprintf_r+0x1a6>
 8008ff6:	b1b0      	cbz	r0, 8009026 <_vfiprintf_r+0x13a>
 8008ff8:	9207      	str	r2, [sp, #28]
 8008ffa:	e014      	b.n	8009026 <_vfiprintf_r+0x13a>
 8008ffc:	eba0 0308 	sub.w	r3, r0, r8
 8009000:	fa09 f303 	lsl.w	r3, r9, r3
 8009004:	4313      	orrs	r3, r2
 8009006:	46a2      	mov	sl, r4
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	e7d2      	b.n	8008fb2 <_vfiprintf_r+0xc6>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	1d19      	adds	r1, r3, #4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	9103      	str	r1, [sp, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	bfbb      	ittet	lt
 8009018:	425b      	neglt	r3, r3
 800901a:	f042 0202 	orrlt.w	r2, r2, #2
 800901e:	9307      	strge	r3, [sp, #28]
 8009020:	9307      	strlt	r3, [sp, #28]
 8009022:	bfb8      	it	lt
 8009024:	9204      	strlt	r2, [sp, #16]
 8009026:	7823      	ldrb	r3, [r4, #0]
 8009028:	2b2e      	cmp	r3, #46	; 0x2e
 800902a:	d10c      	bne.n	8009046 <_vfiprintf_r+0x15a>
 800902c:	7863      	ldrb	r3, [r4, #1]
 800902e:	2b2a      	cmp	r3, #42	; 0x2a
 8009030:	d134      	bne.n	800909c <_vfiprintf_r+0x1b0>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	3402      	adds	r4, #2
 8009036:	1d1a      	adds	r2, r3, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb8      	it	lt
 8009040:	f04f 33ff 	movlt.w	r3, #4294967295
 8009044:	9305      	str	r3, [sp, #20]
 8009046:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009110 <_vfiprintf_r+0x224>
 800904a:	2203      	movs	r2, #3
 800904c:	4650      	mov	r0, sl
 800904e:	7821      	ldrb	r1, [r4, #0]
 8009050:	f7fc fea1 	bl	8005d96 <memchr>
 8009054:	b138      	cbz	r0, 8009066 <_vfiprintf_r+0x17a>
 8009056:	2240      	movs	r2, #64	; 0x40
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	eba0 000a 	sub.w	r0, r0, sl
 800905e:	4082      	lsls	r2, r0
 8009060:	4313      	orrs	r3, r2
 8009062:	3401      	adds	r4, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906a:	2206      	movs	r2, #6
 800906c:	4829      	ldr	r0, [pc, #164]	; (8009114 <_vfiprintf_r+0x228>)
 800906e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009072:	f7fc fe90 	bl	8005d96 <memchr>
 8009076:	2800      	cmp	r0, #0
 8009078:	d03f      	beq.n	80090fa <_vfiprintf_r+0x20e>
 800907a:	4b27      	ldr	r3, [pc, #156]	; (8009118 <_vfiprintf_r+0x22c>)
 800907c:	bb1b      	cbnz	r3, 80090c6 <_vfiprintf_r+0x1da>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	f023 0307 	bic.w	r3, r3, #7
 8009086:	3308      	adds	r3, #8
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908c:	443b      	add	r3, r7
 800908e:	9309      	str	r3, [sp, #36]	; 0x24
 8009090:	e768      	b.n	8008f64 <_vfiprintf_r+0x78>
 8009092:	460c      	mov	r4, r1
 8009094:	2001      	movs	r0, #1
 8009096:	fb0c 3202 	mla	r2, ip, r2, r3
 800909a:	e7a6      	b.n	8008fea <_vfiprintf_r+0xfe>
 800909c:	2300      	movs	r3, #0
 800909e:	f04f 0c0a 	mov.w	ip, #10
 80090a2:	4619      	mov	r1, r3
 80090a4:	3401      	adds	r4, #1
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ae:	3a30      	subs	r2, #48	; 0x30
 80090b0:	2a09      	cmp	r2, #9
 80090b2:	d903      	bls.n	80090bc <_vfiprintf_r+0x1d0>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0c6      	beq.n	8009046 <_vfiprintf_r+0x15a>
 80090b8:	9105      	str	r1, [sp, #20]
 80090ba:	e7c4      	b.n	8009046 <_vfiprintf_r+0x15a>
 80090bc:	4604      	mov	r4, r0
 80090be:	2301      	movs	r3, #1
 80090c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c4:	e7f0      	b.n	80090a8 <_vfiprintf_r+0x1bc>
 80090c6:	ab03      	add	r3, sp, #12
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	462a      	mov	r2, r5
 80090cc:	4630      	mov	r0, r6
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <_vfiprintf_r+0x230>)
 80090d0:	a904      	add	r1, sp, #16
 80090d2:	f7fb fed5 	bl	8004e80 <_printf_float>
 80090d6:	4607      	mov	r7, r0
 80090d8:	1c78      	adds	r0, r7, #1
 80090da:	d1d6      	bne.n	800908a <_vfiprintf_r+0x19e>
 80090dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090de:	07d9      	lsls	r1, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_vfiprintf_r+0x202>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	059a      	lsls	r2, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_vfiprintf_r+0x202>
 80090e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ea:	f7fc fe4b 	bl	8005d84 <__retarget_lock_release_recursive>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	065b      	lsls	r3, r3, #25
 80090f2:	f53f af1d 	bmi.w	8008f30 <_vfiprintf_r+0x44>
 80090f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f8:	e71c      	b.n	8008f34 <_vfiprintf_r+0x48>
 80090fa:	ab03      	add	r3, sp, #12
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	462a      	mov	r2, r5
 8009100:	4630      	mov	r0, r6
 8009102:	4b06      	ldr	r3, [pc, #24]	; (800911c <_vfiprintf_r+0x230>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	f7fc f95b 	bl	80053c0 <_printf_i>
 800910a:	e7e4      	b.n	80090d6 <_vfiprintf_r+0x1ea>
 800910c:	0800a640 	.word	0x0800a640
 8009110:	0800a646 	.word	0x0800a646
 8009114:	0800a64a 	.word	0x0800a64a
 8009118:	08004e81 	.word	0x08004e81
 800911c:	08008ec9 	.word	0x08008ec9

08009120 <__swbuf_r>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	460e      	mov	r6, r1
 8009124:	4614      	mov	r4, r2
 8009126:	4605      	mov	r5, r0
 8009128:	b118      	cbz	r0, 8009132 <__swbuf_r+0x12>
 800912a:	6a03      	ldr	r3, [r0, #32]
 800912c:	b90b      	cbnz	r3, 8009132 <__swbuf_r+0x12>
 800912e:	f7fc fd03 	bl	8005b38 <__sinit>
 8009132:	69a3      	ldr	r3, [r4, #24]
 8009134:	60a3      	str	r3, [r4, #8]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	071a      	lsls	r2, r3, #28
 800913a:	d525      	bpl.n	8009188 <__swbuf_r+0x68>
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b31b      	cbz	r3, 8009188 <__swbuf_r+0x68>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	6922      	ldr	r2, [r4, #16]
 8009144:	b2f6      	uxtb	r6, r6
 8009146:	1a98      	subs	r0, r3, r2
 8009148:	6963      	ldr	r3, [r4, #20]
 800914a:	4637      	mov	r7, r6
 800914c:	4283      	cmp	r3, r0
 800914e:	dc04      	bgt.n	800915a <__swbuf_r+0x3a>
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f7ff fa30 	bl	80085b8 <_fflush_r>
 8009158:	b9e0      	cbnz	r0, 8009194 <__swbuf_r+0x74>
 800915a:	68a3      	ldr	r3, [r4, #8]
 800915c:	3b01      	subs	r3, #1
 800915e:	60a3      	str	r3, [r4, #8]
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	6022      	str	r2, [r4, #0]
 8009166:	701e      	strb	r6, [r3, #0]
 8009168:	6962      	ldr	r2, [r4, #20]
 800916a:	1c43      	adds	r3, r0, #1
 800916c:	429a      	cmp	r2, r3
 800916e:	d004      	beq.n	800917a <__swbuf_r+0x5a>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	07db      	lsls	r3, r3, #31
 8009174:	d506      	bpl.n	8009184 <__swbuf_r+0x64>
 8009176:	2e0a      	cmp	r6, #10
 8009178:	d104      	bne.n	8009184 <__swbuf_r+0x64>
 800917a:	4621      	mov	r1, r4
 800917c:	4628      	mov	r0, r5
 800917e:	f7ff fa1b 	bl	80085b8 <_fflush_r>
 8009182:	b938      	cbnz	r0, 8009194 <__swbuf_r+0x74>
 8009184:	4638      	mov	r0, r7
 8009186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f806 	bl	800919c <__swsetup_r>
 8009190:	2800      	cmp	r0, #0
 8009192:	d0d5      	beq.n	8009140 <__swbuf_r+0x20>
 8009194:	f04f 37ff 	mov.w	r7, #4294967295
 8009198:	e7f4      	b.n	8009184 <__swbuf_r+0x64>
	...

0800919c <__swsetup_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4b2a      	ldr	r3, [pc, #168]	; (8009248 <__swsetup_r+0xac>)
 80091a0:	4605      	mov	r5, r0
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	460c      	mov	r4, r1
 80091a6:	b118      	cbz	r0, 80091b0 <__swsetup_r+0x14>
 80091a8:	6a03      	ldr	r3, [r0, #32]
 80091aa:	b90b      	cbnz	r3, 80091b0 <__swsetup_r+0x14>
 80091ac:	f7fc fcc4 	bl	8005b38 <__sinit>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091b6:	0718      	lsls	r0, r3, #28
 80091b8:	d422      	bmi.n	8009200 <__swsetup_r+0x64>
 80091ba:	06d9      	lsls	r1, r3, #27
 80091bc:	d407      	bmi.n	80091ce <__swsetup_r+0x32>
 80091be:	2309      	movs	r3, #9
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	e034      	b.n	8009238 <__swsetup_r+0x9c>
 80091ce:	0758      	lsls	r0, r3, #29
 80091d0:	d512      	bpl.n	80091f8 <__swsetup_r+0x5c>
 80091d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d4:	b141      	cbz	r1, 80091e8 <__swsetup_r+0x4c>
 80091d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091da:	4299      	cmp	r1, r3
 80091dc:	d002      	beq.n	80091e4 <__swsetup_r+0x48>
 80091de:	4628      	mov	r0, r5
 80091e0:	f7fd fc5a 	bl	8006a98 <_free_r>
 80091e4:	2300      	movs	r3, #0
 80091e6:	6363      	str	r3, [r4, #52]	; 0x34
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	2300      	movs	r3, #0
 80091f2:	6063      	str	r3, [r4, #4]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f043 0308 	orr.w	r3, r3, #8
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	b94b      	cbnz	r3, 8009218 <__swsetup_r+0x7c>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800920a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920e:	d003      	beq.n	8009218 <__swsetup_r+0x7c>
 8009210:	4621      	mov	r1, r4
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f883 	bl	800931e <__smakebuf_r>
 8009218:	89a0      	ldrh	r0, [r4, #12]
 800921a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800921e:	f010 0301 	ands.w	r3, r0, #1
 8009222:	d00a      	beq.n	800923a <__swsetup_r+0x9e>
 8009224:	2300      	movs	r3, #0
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	6963      	ldr	r3, [r4, #20]
 800922a:	425b      	negs	r3, r3
 800922c:	61a3      	str	r3, [r4, #24]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	b943      	cbnz	r3, 8009244 <__swsetup_r+0xa8>
 8009232:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009236:	d1c4      	bne.n	80091c2 <__swsetup_r+0x26>
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	0781      	lsls	r1, r0, #30
 800923c:	bf58      	it	pl
 800923e:	6963      	ldrpl	r3, [r4, #20]
 8009240:	60a3      	str	r3, [r4, #8]
 8009242:	e7f4      	b.n	800922e <__swsetup_r+0x92>
 8009244:	2000      	movs	r0, #0
 8009246:	e7f7      	b.n	8009238 <__swsetup_r+0x9c>
 8009248:	2000006c 	.word	0x2000006c

0800924c <_raise_r>:
 800924c:	291f      	cmp	r1, #31
 800924e:	b538      	push	{r3, r4, r5, lr}
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	d904      	bls.n	8009260 <_raise_r+0x14>
 8009256:	2316      	movs	r3, #22
 8009258:	6003      	str	r3, [r0, #0]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009262:	b112      	cbz	r2, 800926a <_raise_r+0x1e>
 8009264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009268:	b94b      	cbnz	r3, 800927e <_raise_r+0x32>
 800926a:	4620      	mov	r0, r4
 800926c:	f000 f830 	bl	80092d0 <_getpid_r>
 8009270:	462a      	mov	r2, r5
 8009272:	4601      	mov	r1, r0
 8009274:	4620      	mov	r0, r4
 8009276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800927a:	f000 b817 	b.w	80092ac <_kill_r>
 800927e:	2b01      	cmp	r3, #1
 8009280:	d00a      	beq.n	8009298 <_raise_r+0x4c>
 8009282:	1c59      	adds	r1, r3, #1
 8009284:	d103      	bne.n	800928e <_raise_r+0x42>
 8009286:	2316      	movs	r3, #22
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	2001      	movs	r0, #1
 800928c:	e7e7      	b.n	800925e <_raise_r+0x12>
 800928e:	2400      	movs	r4, #0
 8009290:	4628      	mov	r0, r5
 8009292:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009296:	4798      	blx	r3
 8009298:	2000      	movs	r0, #0
 800929a:	e7e0      	b.n	800925e <_raise_r+0x12>

0800929c <raise>:
 800929c:	4b02      	ldr	r3, [pc, #8]	; (80092a8 <raise+0xc>)
 800929e:	4601      	mov	r1, r0
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	f7ff bfd3 	b.w	800924c <_raise_r>
 80092a6:	bf00      	nop
 80092a8:	2000006c 	.word	0x2000006c

080092ac <_kill_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	2300      	movs	r3, #0
 80092b0:	4d06      	ldr	r5, [pc, #24]	; (80092cc <_kill_r+0x20>)
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	4611      	mov	r1, r2
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	f7f8 ff1a 	bl	80020f2 <_kill>
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	d102      	bne.n	80092c8 <_kill_r+0x1c>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	b103      	cbz	r3, 80092c8 <_kill_r+0x1c>
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop
 80092cc:	200009e8 	.word	0x200009e8

080092d0 <_getpid_r>:
 80092d0:	f7f8 bf08 	b.w	80020e4 <_getpid>

080092d4 <__swhatbuf_r>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092dc:	4615      	mov	r5, r2
 80092de:	2900      	cmp	r1, #0
 80092e0:	461e      	mov	r6, r3
 80092e2:	b096      	sub	sp, #88	; 0x58
 80092e4:	da0c      	bge.n	8009300 <__swhatbuf_r+0x2c>
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	2100      	movs	r1, #0
 80092ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092ee:	bf0c      	ite	eq
 80092f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092f4:	2340      	movne	r3, #64	; 0x40
 80092f6:	2000      	movs	r0, #0
 80092f8:	6031      	str	r1, [r6, #0]
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	b016      	add	sp, #88	; 0x58
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	466a      	mov	r2, sp
 8009302:	f000 f849 	bl	8009398 <_fstat_r>
 8009306:	2800      	cmp	r0, #0
 8009308:	dbed      	blt.n	80092e6 <__swhatbuf_r+0x12>
 800930a:	9901      	ldr	r1, [sp, #4]
 800930c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009310:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009314:	4259      	negs	r1, r3
 8009316:	4159      	adcs	r1, r3
 8009318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931c:	e7eb      	b.n	80092f6 <__swhatbuf_r+0x22>

0800931e <__smakebuf_r>:
 800931e:	898b      	ldrh	r3, [r1, #12]
 8009320:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009322:	079d      	lsls	r5, r3, #30
 8009324:	4606      	mov	r6, r0
 8009326:	460c      	mov	r4, r1
 8009328:	d507      	bpl.n	800933a <__smakebuf_r+0x1c>
 800932a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	2301      	movs	r3, #1
 8009334:	6163      	str	r3, [r4, #20]
 8009336:	b002      	add	sp, #8
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	466a      	mov	r2, sp
 800933c:	ab01      	add	r3, sp, #4
 800933e:	f7ff ffc9 	bl	80092d4 <__swhatbuf_r>
 8009342:	9900      	ldr	r1, [sp, #0]
 8009344:	4605      	mov	r5, r0
 8009346:	4630      	mov	r0, r6
 8009348:	f7fd fc16 	bl	8006b78 <_malloc_r>
 800934c:	b948      	cbnz	r0, 8009362 <__smakebuf_r+0x44>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	059a      	lsls	r2, r3, #22
 8009354:	d4ef      	bmi.n	8009336 <__smakebuf_r+0x18>
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	e7e3      	b.n	800932a <__smakebuf_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	6020      	str	r0, [r4, #0]
 8009366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	9b00      	ldr	r3, [sp, #0]
 800936e:	6120      	str	r0, [r4, #16]
 8009370:	6163      	str	r3, [r4, #20]
 8009372:	9b01      	ldr	r3, [sp, #4]
 8009374:	b15b      	cbz	r3, 800938e <__smakebuf_r+0x70>
 8009376:	4630      	mov	r0, r6
 8009378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937c:	f000 f81e 	bl	80093bc <_isatty_r>
 8009380:	b128      	cbz	r0, 800938e <__smakebuf_r+0x70>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	431d      	orrs	r5, r3
 8009392:	81a5      	strh	r5, [r4, #12]
 8009394:	e7cf      	b.n	8009336 <__smakebuf_r+0x18>
	...

08009398 <_fstat_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	2300      	movs	r3, #0
 800939c:	4d06      	ldr	r5, [pc, #24]	; (80093b8 <_fstat_r+0x20>)
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	4611      	mov	r1, r2
 80093a4:	602b      	str	r3, [r5, #0]
 80093a6:	f7f8 ff02 	bl	80021ae <_fstat>
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	d102      	bne.n	80093b4 <_fstat_r+0x1c>
 80093ae:	682b      	ldr	r3, [r5, #0]
 80093b0:	b103      	cbz	r3, 80093b4 <_fstat_r+0x1c>
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	bd38      	pop	{r3, r4, r5, pc}
 80093b6:	bf00      	nop
 80093b8:	200009e8 	.word	0x200009e8

080093bc <_isatty_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	2300      	movs	r3, #0
 80093c0:	4d05      	ldr	r5, [pc, #20]	; (80093d8 <_isatty_r+0x1c>)
 80093c2:	4604      	mov	r4, r0
 80093c4:	4608      	mov	r0, r1
 80093c6:	602b      	str	r3, [r5, #0]
 80093c8:	f7f8 ff00 	bl	80021cc <_isatty>
 80093cc:	1c43      	adds	r3, r0, #1
 80093ce:	d102      	bne.n	80093d6 <_isatty_r+0x1a>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	b103      	cbz	r3, 80093d6 <_isatty_r+0x1a>
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	200009e8 	.word	0x200009e8

080093dc <pow>:
 80093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e0:	4614      	mov	r4, r2
 80093e2:	461d      	mov	r5, r3
 80093e4:	4680      	mov	r8, r0
 80093e6:	4689      	mov	r9, r1
 80093e8:	f000 f866 	bl	80094b8 <__ieee754_pow>
 80093ec:	4622      	mov	r2, r4
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	462b      	mov	r3, r5
 80093f4:	4620      	mov	r0, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	f7f7 fb08 	bl	8000a0c <__aeabi_dcmpun>
 80093fc:	bbc8      	cbnz	r0, 8009472 <pow+0x96>
 80093fe:	2200      	movs	r2, #0
 8009400:	2300      	movs	r3, #0
 8009402:	4640      	mov	r0, r8
 8009404:	4649      	mov	r1, r9
 8009406:	f7f7 facf 	bl	80009a8 <__aeabi_dcmpeq>
 800940a:	b1b8      	cbz	r0, 800943c <pow+0x60>
 800940c:	2200      	movs	r2, #0
 800940e:	2300      	movs	r3, #0
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f7 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8009418:	2800      	cmp	r0, #0
 800941a:	d141      	bne.n	80094a0 <pow+0xc4>
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f000 f844 	bl	80094ac <finite>
 8009424:	b328      	cbz	r0, 8009472 <pow+0x96>
 8009426:	2200      	movs	r2, #0
 8009428:	2300      	movs	r3, #0
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f7f7 fac5 	bl	80009bc <__aeabi_dcmplt>
 8009432:	b1f0      	cbz	r0, 8009472 <pow+0x96>
 8009434:	f7fc fc7a 	bl	8005d2c <__errno>
 8009438:	2322      	movs	r3, #34	; 0x22
 800943a:	e019      	b.n	8009470 <pow+0x94>
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f000 f834 	bl	80094ac <finite>
 8009444:	b9c8      	cbnz	r0, 800947a <pow+0x9e>
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f000 f82f 	bl	80094ac <finite>
 800944e:	b1a0      	cbz	r0, 800947a <pow+0x9e>
 8009450:	4620      	mov	r0, r4
 8009452:	4629      	mov	r1, r5
 8009454:	f000 f82a 	bl	80094ac <finite>
 8009458:	b178      	cbz	r0, 800947a <pow+0x9e>
 800945a:	4632      	mov	r2, r6
 800945c:	463b      	mov	r3, r7
 800945e:	4630      	mov	r0, r6
 8009460:	4639      	mov	r1, r7
 8009462:	f7f7 fad3 	bl	8000a0c <__aeabi_dcmpun>
 8009466:	2800      	cmp	r0, #0
 8009468:	d0e4      	beq.n	8009434 <pow+0x58>
 800946a:	f7fc fc5f 	bl	8005d2c <__errno>
 800946e:	2321      	movs	r3, #33	; 0x21
 8009470:	6003      	str	r3, [r0, #0]
 8009472:	4630      	mov	r0, r6
 8009474:	4639      	mov	r1, r7
 8009476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947a:	2200      	movs	r2, #0
 800947c:	2300      	movs	r3, #0
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f7 fa91 	bl	80009a8 <__aeabi_dcmpeq>
 8009486:	2800      	cmp	r0, #0
 8009488:	d0f3      	beq.n	8009472 <pow+0x96>
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f000 f80d 	bl	80094ac <finite>
 8009492:	2800      	cmp	r0, #0
 8009494:	d0ed      	beq.n	8009472 <pow+0x96>
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f000 f807 	bl	80094ac <finite>
 800949e:	e7c8      	b.n	8009432 <pow+0x56>
 80094a0:	2600      	movs	r6, #0
 80094a2:	4f01      	ldr	r7, [pc, #4]	; (80094a8 <pow+0xcc>)
 80094a4:	e7e5      	b.n	8009472 <pow+0x96>
 80094a6:	bf00      	nop
 80094a8:	3ff00000 	.word	0x3ff00000

080094ac <finite>:
 80094ac:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80094b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80094b4:	0fc0      	lsrs	r0, r0, #31
 80094b6:	4770      	bx	lr

080094b8 <__ieee754_pow>:
 80094b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094bc:	b093      	sub	sp, #76	; 0x4c
 80094be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094c2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80094c6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80094ca:	4689      	mov	r9, r1
 80094cc:	ea56 0102 	orrs.w	r1, r6, r2
 80094d0:	4680      	mov	r8, r0
 80094d2:	d111      	bne.n	80094f8 <__ieee754_pow+0x40>
 80094d4:	1803      	adds	r3, r0, r0
 80094d6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80094da:	4152      	adcs	r2, r2
 80094dc:	4299      	cmp	r1, r3
 80094de:	4b82      	ldr	r3, [pc, #520]	; (80096e8 <__ieee754_pow+0x230>)
 80094e0:	4193      	sbcs	r3, r2
 80094e2:	f080 84ba 	bcs.w	8009e5a <__ieee754_pow+0x9a2>
 80094e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	f7f6 fe3d 	bl	800016c <__adddf3>
 80094f2:	4683      	mov	fp, r0
 80094f4:	468c      	mov	ip, r1
 80094f6:	e06f      	b.n	80095d8 <__ieee754_pow+0x120>
 80094f8:	4b7c      	ldr	r3, [pc, #496]	; (80096ec <__ieee754_pow+0x234>)
 80094fa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80094fe:	429c      	cmp	r4, r3
 8009500:	464d      	mov	r5, r9
 8009502:	4682      	mov	sl, r0
 8009504:	dc06      	bgt.n	8009514 <__ieee754_pow+0x5c>
 8009506:	d101      	bne.n	800950c <__ieee754_pow+0x54>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1ec      	bne.n	80094e6 <__ieee754_pow+0x2e>
 800950c:	429e      	cmp	r6, r3
 800950e:	dc01      	bgt.n	8009514 <__ieee754_pow+0x5c>
 8009510:	d10f      	bne.n	8009532 <__ieee754_pow+0x7a>
 8009512:	b172      	cbz	r2, 8009532 <__ieee754_pow+0x7a>
 8009514:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009518:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800951c:	ea55 050a 	orrs.w	r5, r5, sl
 8009520:	d1e1      	bne.n	80094e6 <__ieee754_pow+0x2e>
 8009522:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009526:	18db      	adds	r3, r3, r3
 8009528:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800952c:	4152      	adcs	r2, r2
 800952e:	429d      	cmp	r5, r3
 8009530:	e7d5      	b.n	80094de <__ieee754_pow+0x26>
 8009532:	2d00      	cmp	r5, #0
 8009534:	da39      	bge.n	80095aa <__ieee754_pow+0xf2>
 8009536:	4b6e      	ldr	r3, [pc, #440]	; (80096f0 <__ieee754_pow+0x238>)
 8009538:	429e      	cmp	r6, r3
 800953a:	dc52      	bgt.n	80095e2 <__ieee754_pow+0x12a>
 800953c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009540:	429e      	cmp	r6, r3
 8009542:	f340 849d 	ble.w	8009e80 <__ieee754_pow+0x9c8>
 8009546:	1533      	asrs	r3, r6, #20
 8009548:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800954c:	2b14      	cmp	r3, #20
 800954e:	dd0f      	ble.n	8009570 <__ieee754_pow+0xb8>
 8009550:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009554:	fa22 f103 	lsr.w	r1, r2, r3
 8009558:	fa01 f303 	lsl.w	r3, r1, r3
 800955c:	4293      	cmp	r3, r2
 800955e:	f040 848f 	bne.w	8009e80 <__ieee754_pow+0x9c8>
 8009562:	f001 0101 	and.w	r1, r1, #1
 8009566:	f1c1 0302 	rsb	r3, r1, #2
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	b182      	cbz	r2, 8009590 <__ieee754_pow+0xd8>
 800956e:	e05d      	b.n	800962c <__ieee754_pow+0x174>
 8009570:	2a00      	cmp	r2, #0
 8009572:	d159      	bne.n	8009628 <__ieee754_pow+0x170>
 8009574:	f1c3 0314 	rsb	r3, r3, #20
 8009578:	fa46 f103 	asr.w	r1, r6, r3
 800957c:	fa01 f303 	lsl.w	r3, r1, r3
 8009580:	42b3      	cmp	r3, r6
 8009582:	f040 847a 	bne.w	8009e7a <__ieee754_pow+0x9c2>
 8009586:	f001 0101 	and.w	r1, r1, #1
 800958a:	f1c1 0302 	rsb	r3, r1, #2
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	4b58      	ldr	r3, [pc, #352]	; (80096f4 <__ieee754_pow+0x23c>)
 8009592:	429e      	cmp	r6, r3
 8009594:	d132      	bne.n	80095fc <__ieee754_pow+0x144>
 8009596:	2f00      	cmp	r7, #0
 8009598:	f280 846b 	bge.w	8009e72 <__ieee754_pow+0x9ba>
 800959c:	4642      	mov	r2, r8
 800959e:	464b      	mov	r3, r9
 80095a0:	2000      	movs	r0, #0
 80095a2:	4954      	ldr	r1, [pc, #336]	; (80096f4 <__ieee754_pow+0x23c>)
 80095a4:	f7f7 f8c2 	bl	800072c <__aeabi_ddiv>
 80095a8:	e7a3      	b.n	80094f2 <__ieee754_pow+0x3a>
 80095aa:	2300      	movs	r3, #0
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d13c      	bne.n	800962c <__ieee754_pow+0x174>
 80095b2:	4b4e      	ldr	r3, [pc, #312]	; (80096ec <__ieee754_pow+0x234>)
 80095b4:	429e      	cmp	r6, r3
 80095b6:	d1eb      	bne.n	8009590 <__ieee754_pow+0xd8>
 80095b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80095bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80095c0:	ea53 030a 	orrs.w	r3, r3, sl
 80095c4:	f000 8449 	beq.w	8009e5a <__ieee754_pow+0x9a2>
 80095c8:	4b4b      	ldr	r3, [pc, #300]	; (80096f8 <__ieee754_pow+0x240>)
 80095ca:	429c      	cmp	r4, r3
 80095cc:	dd0b      	ble.n	80095e6 <__ieee754_pow+0x12e>
 80095ce:	2f00      	cmp	r7, #0
 80095d0:	f2c0 8449 	blt.w	8009e66 <__ieee754_pow+0x9ae>
 80095d4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80095d8:	4658      	mov	r0, fp
 80095da:	4661      	mov	r1, ip
 80095dc:	b013      	add	sp, #76	; 0x4c
 80095de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e2:	2302      	movs	r3, #2
 80095e4:	e7e2      	b.n	80095ac <__ieee754_pow+0xf4>
 80095e6:	2f00      	cmp	r7, #0
 80095e8:	f04f 0b00 	mov.w	fp, #0
 80095ec:	f04f 0c00 	mov.w	ip, #0
 80095f0:	daf2      	bge.n	80095d8 <__ieee754_pow+0x120>
 80095f2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80095f6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80095fa:	e7ed      	b.n	80095d8 <__ieee754_pow+0x120>
 80095fc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009600:	d106      	bne.n	8009610 <__ieee754_pow+0x158>
 8009602:	4642      	mov	r2, r8
 8009604:	464b      	mov	r3, r9
 8009606:	4640      	mov	r0, r8
 8009608:	4649      	mov	r1, r9
 800960a:	f7f6 ff65 	bl	80004d8 <__aeabi_dmul>
 800960e:	e770      	b.n	80094f2 <__ieee754_pow+0x3a>
 8009610:	4b3a      	ldr	r3, [pc, #232]	; (80096fc <__ieee754_pow+0x244>)
 8009612:	429f      	cmp	r7, r3
 8009614:	d10a      	bne.n	800962c <__ieee754_pow+0x174>
 8009616:	2d00      	cmp	r5, #0
 8009618:	db08      	blt.n	800962c <__ieee754_pow+0x174>
 800961a:	4640      	mov	r0, r8
 800961c:	4649      	mov	r1, r9
 800961e:	b013      	add	sp, #76	; 0x4c
 8009620:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	f000 bd0a 	b.w	800a03c <__ieee754_sqrt>
 8009628:	2300      	movs	r3, #0
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4640      	mov	r0, r8
 800962e:	4649      	mov	r1, r9
 8009630:	f000 fc58 	bl	8009ee4 <fabs>
 8009634:	4683      	mov	fp, r0
 8009636:	468c      	mov	ip, r1
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d128      	bne.n	8009690 <__ieee754_pow+0x1d8>
 800963e:	b124      	cbz	r4, 800964a <__ieee754_pow+0x192>
 8009640:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <__ieee754_pow+0x23c>)
 8009642:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009646:	429a      	cmp	r2, r3
 8009648:	d122      	bne.n	8009690 <__ieee754_pow+0x1d8>
 800964a:	2f00      	cmp	r7, #0
 800964c:	da07      	bge.n	800965e <__ieee754_pow+0x1a6>
 800964e:	465a      	mov	r2, fp
 8009650:	4663      	mov	r3, ip
 8009652:	2000      	movs	r0, #0
 8009654:	4927      	ldr	r1, [pc, #156]	; (80096f4 <__ieee754_pow+0x23c>)
 8009656:	f7f7 f869 	bl	800072c <__aeabi_ddiv>
 800965a:	4683      	mov	fp, r0
 800965c:	468c      	mov	ip, r1
 800965e:	2d00      	cmp	r5, #0
 8009660:	daba      	bge.n	80095d8 <__ieee754_pow+0x120>
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009668:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800966c:	431c      	orrs	r4, r3
 800966e:	d108      	bne.n	8009682 <__ieee754_pow+0x1ca>
 8009670:	465a      	mov	r2, fp
 8009672:	4663      	mov	r3, ip
 8009674:	4658      	mov	r0, fp
 8009676:	4661      	mov	r1, ip
 8009678:	f7f6 fd76 	bl	8000168 <__aeabi_dsub>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	e790      	b.n	80095a4 <__ieee754_pow+0xec>
 8009682:	9b00      	ldr	r3, [sp, #0]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d1a7      	bne.n	80095d8 <__ieee754_pow+0x120>
 8009688:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800968c:	469c      	mov	ip, r3
 800968e:	e7a3      	b.n	80095d8 <__ieee754_pow+0x120>
 8009690:	0feb      	lsrs	r3, r5, #31
 8009692:	3b01      	subs	r3, #1
 8009694:	930c      	str	r3, [sp, #48]	; 0x30
 8009696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	4313      	orrs	r3, r2
 800969c:	d104      	bne.n	80096a8 <__ieee754_pow+0x1f0>
 800969e:	4642      	mov	r2, r8
 80096a0:	464b      	mov	r3, r9
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	e7e7      	b.n	8009678 <__ieee754_pow+0x1c0>
 80096a8:	4b15      	ldr	r3, [pc, #84]	; (8009700 <__ieee754_pow+0x248>)
 80096aa:	429e      	cmp	r6, r3
 80096ac:	f340 80f6 	ble.w	800989c <__ieee754_pow+0x3e4>
 80096b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80096b4:	429e      	cmp	r6, r3
 80096b6:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <__ieee754_pow+0x240>)
 80096b8:	dd09      	ble.n	80096ce <__ieee754_pow+0x216>
 80096ba:	429c      	cmp	r4, r3
 80096bc:	dc0c      	bgt.n	80096d8 <__ieee754_pow+0x220>
 80096be:	2f00      	cmp	r7, #0
 80096c0:	da0c      	bge.n	80096dc <__ieee754_pow+0x224>
 80096c2:	2000      	movs	r0, #0
 80096c4:	b013      	add	sp, #76	; 0x4c
 80096c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f000 bcb2 	b.w	800a032 <__math_oflow>
 80096ce:	429c      	cmp	r4, r3
 80096d0:	dbf5      	blt.n	80096be <__ieee754_pow+0x206>
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <__ieee754_pow+0x23c>)
 80096d4:	429c      	cmp	r4, r3
 80096d6:	dd15      	ble.n	8009704 <__ieee754_pow+0x24c>
 80096d8:	2f00      	cmp	r7, #0
 80096da:	dcf2      	bgt.n	80096c2 <__ieee754_pow+0x20a>
 80096dc:	2000      	movs	r0, #0
 80096de:	b013      	add	sp, #76	; 0x4c
 80096e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	f000 bca0 	b.w	800a028 <__math_uflow>
 80096e8:	fff00000 	.word	0xfff00000
 80096ec:	7ff00000 	.word	0x7ff00000
 80096f0:	433fffff 	.word	0x433fffff
 80096f4:	3ff00000 	.word	0x3ff00000
 80096f8:	3fefffff 	.word	0x3fefffff
 80096fc:	3fe00000 	.word	0x3fe00000
 8009700:	41e00000 	.word	0x41e00000
 8009704:	4661      	mov	r1, ip
 8009706:	2200      	movs	r2, #0
 8009708:	4658      	mov	r0, fp
 800970a:	4b5f      	ldr	r3, [pc, #380]	; (8009888 <__ieee754_pow+0x3d0>)
 800970c:	f7f6 fd2c 	bl	8000168 <__aeabi_dsub>
 8009710:	a355      	add	r3, pc, #340	; (adr r3, 8009868 <__ieee754_pow+0x3b0>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	4604      	mov	r4, r0
 8009718:	460d      	mov	r5, r1
 800971a:	f7f6 fedd 	bl	80004d8 <__aeabi_dmul>
 800971e:	a354      	add	r3, pc, #336	; (adr r3, 8009870 <__ieee754_pow+0x3b8>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1
 8009728:	4620      	mov	r0, r4
 800972a:	4629      	mov	r1, r5
 800972c:	f7f6 fed4 	bl	80004d8 <__aeabi_dmul>
 8009730:	2200      	movs	r2, #0
 8009732:	4682      	mov	sl, r0
 8009734:	468b      	mov	fp, r1
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	4b54      	ldr	r3, [pc, #336]	; (800988c <__ieee754_pow+0x3d4>)
 800973c:	f7f6 fecc 	bl	80004d8 <__aeabi_dmul>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	a14c      	add	r1, pc, #304	; (adr r1, 8009878 <__ieee754_pow+0x3c0>)
 8009746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974a:	f7f6 fd0d 	bl	8000168 <__aeabi_dsub>
 800974e:	4622      	mov	r2, r4
 8009750:	462b      	mov	r3, r5
 8009752:	f7f6 fec1 	bl	80004d8 <__aeabi_dmul>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	2000      	movs	r0, #0
 800975c:	494c      	ldr	r1, [pc, #304]	; (8009890 <__ieee754_pow+0x3d8>)
 800975e:	f7f6 fd03 	bl	8000168 <__aeabi_dsub>
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	4680      	mov	r8, r0
 8009768:	4689      	mov	r9, r1
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	f7f6 feb3 	bl	80004d8 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f6 fead 	bl	80004d8 <__aeabi_dmul>
 800977e:	a340      	add	r3, pc, #256	; (adr r3, 8009880 <__ieee754_pow+0x3c8>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7f6 fea8 	bl	80004d8 <__aeabi_dmul>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4650      	mov	r0, sl
 800978e:	4659      	mov	r1, fp
 8009790:	f7f6 fcea 	bl	8000168 <__aeabi_dsub>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4604      	mov	r4, r0
 800979a:	460d      	mov	r5, r1
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f6 fce4 	bl	800016c <__adddf3>
 80097a4:	2000      	movs	r0, #0
 80097a6:	4632      	mov	r2, r6
 80097a8:	463b      	mov	r3, r7
 80097aa:	4682      	mov	sl, r0
 80097ac:	468b      	mov	fp, r1
 80097ae:	f7f6 fcdb 	bl	8000168 <__aeabi_dsub>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4620      	mov	r0, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	f7f6 fcd5 	bl	8000168 <__aeabi_dsub>
 80097be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097c2:	9b00      	ldr	r3, [sp, #0]
 80097c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097c6:	3b01      	subs	r3, #1
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f04f 0600 	mov.w	r6, #0
 80097ce:	f04f 0200 	mov.w	r2, #0
 80097d2:	bf0c      	ite	eq
 80097d4:	4b2f      	ldreq	r3, [pc, #188]	; (8009894 <__ieee754_pow+0x3dc>)
 80097d6:	4b2c      	ldrne	r3, [pc, #176]	; (8009888 <__ieee754_pow+0x3d0>)
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e0:	e9cd 2300 	strd	r2, r3, [sp]
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	f7f6 fcbe 	bl	8000168 <__aeabi_dsub>
 80097ec:	4652      	mov	r2, sl
 80097ee:	465b      	mov	r3, fp
 80097f0:	f7f6 fe72 	bl	80004d8 <__aeabi_dmul>
 80097f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097f8:	4680      	mov	r8, r0
 80097fa:	4689      	mov	r9, r1
 80097fc:	4620      	mov	r0, r4
 80097fe:	4629      	mov	r1, r5
 8009800:	f7f6 fe6a 	bl	80004d8 <__aeabi_dmul>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	f7f6 fcae 	bl	800016c <__adddf3>
 8009810:	4632      	mov	r2, r6
 8009812:	463b      	mov	r3, r7
 8009814:	4680      	mov	r8, r0
 8009816:	4689      	mov	r9, r1
 8009818:	4650      	mov	r0, sl
 800981a:	4659      	mov	r1, fp
 800981c:	f7f6 fe5c 	bl	80004d8 <__aeabi_dmul>
 8009820:	4604      	mov	r4, r0
 8009822:	460d      	mov	r5, r1
 8009824:	460b      	mov	r3, r1
 8009826:	4602      	mov	r2, r0
 8009828:	4649      	mov	r1, r9
 800982a:	4640      	mov	r0, r8
 800982c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009830:	f7f6 fc9c 	bl	800016c <__adddf3>
 8009834:	4b18      	ldr	r3, [pc, #96]	; (8009898 <__ieee754_pow+0x3e0>)
 8009836:	4682      	mov	sl, r0
 8009838:	4299      	cmp	r1, r3
 800983a:	460f      	mov	r7, r1
 800983c:	460e      	mov	r6, r1
 800983e:	f340 82e7 	ble.w	8009e10 <__ieee754_pow+0x958>
 8009842:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009846:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800984a:	4303      	orrs	r3, r0
 800984c:	f000 81e2 	beq.w	8009c14 <__ieee754_pow+0x75c>
 8009850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009854:	2200      	movs	r2, #0
 8009856:	2300      	movs	r3, #0
 8009858:	f7f7 f8b0 	bl	80009bc <__aeabi_dcmplt>
 800985c:	3800      	subs	r0, #0
 800985e:	bf18      	it	ne
 8009860:	2001      	movne	r0, #1
 8009862:	e72f      	b.n	80096c4 <__ieee754_pow+0x20c>
 8009864:	f3af 8000 	nop.w
 8009868:	60000000 	.word	0x60000000
 800986c:	3ff71547 	.word	0x3ff71547
 8009870:	f85ddf44 	.word	0xf85ddf44
 8009874:	3e54ae0b 	.word	0x3e54ae0b
 8009878:	55555555 	.word	0x55555555
 800987c:	3fd55555 	.word	0x3fd55555
 8009880:	652b82fe 	.word	0x652b82fe
 8009884:	3ff71547 	.word	0x3ff71547
 8009888:	3ff00000 	.word	0x3ff00000
 800988c:	3fd00000 	.word	0x3fd00000
 8009890:	3fe00000 	.word	0x3fe00000
 8009894:	bff00000 	.word	0xbff00000
 8009898:	408fffff 	.word	0x408fffff
 800989c:	4bd4      	ldr	r3, [pc, #848]	; (8009bf0 <__ieee754_pow+0x738>)
 800989e:	2200      	movs	r2, #0
 80098a0:	402b      	ands	r3, r5
 80098a2:	b943      	cbnz	r3, 80098b6 <__ieee754_pow+0x3fe>
 80098a4:	4658      	mov	r0, fp
 80098a6:	4661      	mov	r1, ip
 80098a8:	4bd2      	ldr	r3, [pc, #840]	; (8009bf4 <__ieee754_pow+0x73c>)
 80098aa:	f7f6 fe15 	bl	80004d8 <__aeabi_dmul>
 80098ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80098b2:	4683      	mov	fp, r0
 80098b4:	460c      	mov	r4, r1
 80098b6:	1523      	asrs	r3, r4, #20
 80098b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098bc:	4413      	add	r3, r2
 80098be:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c0:	4bcd      	ldr	r3, [pc, #820]	; (8009bf8 <__ieee754_pow+0x740>)
 80098c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80098c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80098ca:	429c      	cmp	r4, r3
 80098cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098d0:	dd08      	ble.n	80098e4 <__ieee754_pow+0x42c>
 80098d2:	4bca      	ldr	r3, [pc, #808]	; (8009bfc <__ieee754_pow+0x744>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	f340 8164 	ble.w	8009ba2 <__ieee754_pow+0x6ea>
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80098e0:	3301      	adds	r3, #1
 80098e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098e4:	2600      	movs	r6, #0
 80098e6:	00f3      	lsls	r3, r6, #3
 80098e8:	930d      	str	r3, [sp, #52]	; 0x34
 80098ea:	4bc5      	ldr	r3, [pc, #788]	; (8009c00 <__ieee754_pow+0x748>)
 80098ec:	4658      	mov	r0, fp
 80098ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80098f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098f6:	4629      	mov	r1, r5
 80098f8:	461a      	mov	r2, r3
 80098fa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80098fe:	4623      	mov	r3, r4
 8009900:	f7f6 fc32 	bl	8000168 <__aeabi_dsub>
 8009904:	46da      	mov	sl, fp
 8009906:	462b      	mov	r3, r5
 8009908:	4652      	mov	r2, sl
 800990a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800990e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009912:	f7f6 fc2b 	bl	800016c <__adddf3>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	2000      	movs	r0, #0
 800991c:	49b9      	ldr	r1, [pc, #740]	; (8009c04 <__ieee754_pow+0x74c>)
 800991e:	f7f6 ff05 	bl	800072c <__aeabi_ddiv>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800992a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800992e:	f7f6 fdd3 	bl	80004d8 <__aeabi_dmul>
 8009932:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009936:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800993a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800993e:	2300      	movs	r3, #0
 8009940:	2200      	movs	r2, #0
 8009942:	46ab      	mov	fp, r5
 8009944:	106d      	asrs	r5, r5, #1
 8009946:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009950:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009954:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009958:	4640      	mov	r0, r8
 800995a:	4649      	mov	r1, r9
 800995c:	4614      	mov	r4, r2
 800995e:	461d      	mov	r5, r3
 8009960:	f7f6 fdba 	bl	80004d8 <__aeabi_dmul>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800996c:	f7f6 fbfc 	bl	8000168 <__aeabi_dsub>
 8009970:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009974:	4606      	mov	r6, r0
 8009976:	460f      	mov	r7, r1
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fbf4 	bl	8000168 <__aeabi_dsub>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4650      	mov	r0, sl
 8009986:	4659      	mov	r1, fp
 8009988:	f7f6 fbee 	bl	8000168 <__aeabi_dsub>
 800998c:	4642      	mov	r2, r8
 800998e:	464b      	mov	r3, r9
 8009990:	f7f6 fda2 	bl	80004d8 <__aeabi_dmul>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fbe4 	bl	8000168 <__aeabi_dsub>
 80099a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099a4:	f7f6 fd98 	bl	80004d8 <__aeabi_dmul>
 80099a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099ac:	4682      	mov	sl, r0
 80099ae:	468b      	mov	fp, r1
 80099b0:	4610      	mov	r0, r2
 80099b2:	4619      	mov	r1, r3
 80099b4:	f7f6 fd90 	bl	80004d8 <__aeabi_dmul>
 80099b8:	a37b      	add	r3, pc, #492	; (adr r3, 8009ba8 <__ieee754_pow+0x6f0>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	4604      	mov	r4, r0
 80099c0:	460d      	mov	r5, r1
 80099c2:	f7f6 fd89 	bl	80004d8 <__aeabi_dmul>
 80099c6:	a37a      	add	r3, pc, #488	; (adr r3, 8009bb0 <__ieee754_pow+0x6f8>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fbce 	bl	800016c <__adddf3>
 80099d0:	4622      	mov	r2, r4
 80099d2:	462b      	mov	r3, r5
 80099d4:	f7f6 fd80 	bl	80004d8 <__aeabi_dmul>
 80099d8:	a377      	add	r3, pc, #476	; (adr r3, 8009bb8 <__ieee754_pow+0x700>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fbc5 	bl	800016c <__adddf3>
 80099e2:	4622      	mov	r2, r4
 80099e4:	462b      	mov	r3, r5
 80099e6:	f7f6 fd77 	bl	80004d8 <__aeabi_dmul>
 80099ea:	a375      	add	r3, pc, #468	; (adr r3, 8009bc0 <__ieee754_pow+0x708>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f7f6 fbbc 	bl	800016c <__adddf3>
 80099f4:	4622      	mov	r2, r4
 80099f6:	462b      	mov	r3, r5
 80099f8:	f7f6 fd6e 	bl	80004d8 <__aeabi_dmul>
 80099fc:	a372      	add	r3, pc, #456	; (adr r3, 8009bc8 <__ieee754_pow+0x710>)
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	f7f6 fbb3 	bl	800016c <__adddf3>
 8009a06:	4622      	mov	r2, r4
 8009a08:	462b      	mov	r3, r5
 8009a0a:	f7f6 fd65 	bl	80004d8 <__aeabi_dmul>
 8009a0e:	a370      	add	r3, pc, #448	; (adr r3, 8009bd0 <__ieee754_pow+0x718>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	f7f6 fbaa 	bl	800016c <__adddf3>
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	462b      	mov	r3, r5
 8009a20:	4620      	mov	r0, r4
 8009a22:	4629      	mov	r1, r5
 8009a24:	f7f6 fd58 	bl	80004d8 <__aeabi_dmul>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f6 fd52 	bl	80004d8 <__aeabi_dmul>
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	464b      	mov	r3, r9
 8009a40:	f7f6 fb94 	bl	800016c <__adddf3>
 8009a44:	4652      	mov	r2, sl
 8009a46:	465b      	mov	r3, fp
 8009a48:	f7f6 fd46 	bl	80004d8 <__aeabi_dmul>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	462b      	mov	r3, r5
 8009a50:	f7f6 fb8c 	bl	800016c <__adddf3>
 8009a54:	4642      	mov	r2, r8
 8009a56:	4606      	mov	r6, r0
 8009a58:	460f      	mov	r7, r1
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f6 fd3a 	bl	80004d8 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4b66      	ldr	r3, [pc, #408]	; (8009c08 <__ieee754_pow+0x750>)
 8009a70:	f7f6 fb7c 	bl	800016c <__adddf3>
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	f7f6 fb78 	bl	800016c <__adddf3>
 8009a7c:	2400      	movs	r4, #0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	4622      	mov	r2, r4
 8009a82:	460b      	mov	r3, r1
 8009a84:	4640      	mov	r0, r8
 8009a86:	4649      	mov	r1, r9
 8009a88:	f7f6 fd26 	bl	80004d8 <__aeabi_dmul>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4680      	mov	r8, r0
 8009a90:	4689      	mov	r9, r1
 8009a92:	4620      	mov	r0, r4
 8009a94:	4629      	mov	r1, r5
 8009a96:	4b5c      	ldr	r3, [pc, #368]	; (8009c08 <__ieee754_pow+0x750>)
 8009a98:	f7f6 fb66 	bl	8000168 <__aeabi_dsub>
 8009a9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009aa0:	f7f6 fb62 	bl	8000168 <__aeabi_dsub>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f6 fb5c 	bl	8000168 <__aeabi_dsub>
 8009ab0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ab4:	f7f6 fd10 	bl	80004d8 <__aeabi_dmul>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	462b      	mov	r3, r5
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	f7f6 fd08 	bl	80004d8 <__aeabi_dmul>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4630      	mov	r0, r6
 8009ace:	4639      	mov	r1, r7
 8009ad0:	f7f6 fb4c 	bl	800016c <__adddf3>
 8009ad4:	2400      	movs	r4, #0
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f6 fb43 	bl	800016c <__adddf3>
 8009ae6:	a33c      	add	r3, pc, #240	; (adr r3, 8009bd8 <__ieee754_pow+0x720>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	4620      	mov	r0, r4
 8009aee:	460d      	mov	r5, r1
 8009af0:	f7f6 fcf2 	bl	80004d8 <__aeabi_dmul>
 8009af4:	4642      	mov	r2, r8
 8009af6:	464b      	mov	r3, r9
 8009af8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f7f6 fb32 	bl	8000168 <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4630      	mov	r0, r6
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	f7f6 fb2c 	bl	8000168 <__aeabi_dsub>
 8009b10:	a333      	add	r3, pc, #204	; (adr r3, 8009be0 <__ieee754_pow+0x728>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fcdf 	bl	80004d8 <__aeabi_dmul>
 8009b1a:	a333      	add	r3, pc, #204	; (adr r3, 8009be8 <__ieee754_pow+0x730>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	4606      	mov	r6, r0
 8009b22:	460f      	mov	r7, r1
 8009b24:	4620      	mov	r0, r4
 8009b26:	4629      	mov	r1, r5
 8009b28:	f7f6 fcd6 	bl	80004d8 <__aeabi_dmul>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 fb1a 	bl	800016c <__adddf3>
 8009b38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b3a:	4b34      	ldr	r3, [pc, #208]	; (8009c0c <__ieee754_pow+0x754>)
 8009b3c:	4413      	add	r3, r2
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fb13 	bl	800016c <__adddf3>
 8009b46:	4680      	mov	r8, r0
 8009b48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009b4a:	4689      	mov	r9, r1
 8009b4c:	f7f6 fc5a 	bl	8000404 <__aeabi_i2d>
 8009b50:	4604      	mov	r4, r0
 8009b52:	460d      	mov	r5, r1
 8009b54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b5a:	4b2d      	ldr	r3, [pc, #180]	; (8009c10 <__ieee754_pow+0x758>)
 8009b5c:	4413      	add	r3, r2
 8009b5e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b62:	4642      	mov	r2, r8
 8009b64:	464b      	mov	r3, r9
 8009b66:	f7f6 fb01 	bl	800016c <__adddf3>
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	f7f6 fafd 	bl	800016c <__adddf3>
 8009b72:	4622      	mov	r2, r4
 8009b74:	462b      	mov	r3, r5
 8009b76:	f7f6 faf9 	bl	800016c <__adddf3>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	462b      	mov	r3, r5
 8009b80:	4682      	mov	sl, r0
 8009b82:	468b      	mov	fp, r1
 8009b84:	f7f6 faf0 	bl	8000168 <__aeabi_dsub>
 8009b88:	4632      	mov	r2, r6
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	f7f6 faec 	bl	8000168 <__aeabi_dsub>
 8009b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b94:	f7f6 fae8 	bl	8000168 <__aeabi_dsub>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	e60b      	b.n	80097ba <__ieee754_pow+0x302>
 8009ba2:	2601      	movs	r6, #1
 8009ba4:	e69f      	b.n	80098e6 <__ieee754_pow+0x42e>
 8009ba6:	bf00      	nop
 8009ba8:	4a454eef 	.word	0x4a454eef
 8009bac:	3fca7e28 	.word	0x3fca7e28
 8009bb0:	93c9db65 	.word	0x93c9db65
 8009bb4:	3fcd864a 	.word	0x3fcd864a
 8009bb8:	a91d4101 	.word	0xa91d4101
 8009bbc:	3fd17460 	.word	0x3fd17460
 8009bc0:	518f264d 	.word	0x518f264d
 8009bc4:	3fd55555 	.word	0x3fd55555
 8009bc8:	db6fabff 	.word	0xdb6fabff
 8009bcc:	3fdb6db6 	.word	0x3fdb6db6
 8009bd0:	33333303 	.word	0x33333303
 8009bd4:	3fe33333 	.word	0x3fe33333
 8009bd8:	e0000000 	.word	0xe0000000
 8009bdc:	3feec709 	.word	0x3feec709
 8009be0:	dc3a03fd 	.word	0xdc3a03fd
 8009be4:	3feec709 	.word	0x3feec709
 8009be8:	145b01f5 	.word	0x145b01f5
 8009bec:	be3e2fe0 	.word	0xbe3e2fe0
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	43400000 	.word	0x43400000
 8009bf8:	0003988e 	.word	0x0003988e
 8009bfc:	000bb679 	.word	0x000bb679
 8009c00:	0800a6f8 	.word	0x0800a6f8
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	40080000 	.word	0x40080000
 8009c0c:	0800a718 	.word	0x0800a718
 8009c10:	0800a708 	.word	0x0800a708
 8009c14:	a39c      	add	r3, pc, #624	; (adr r3, 8009e88 <__ieee754_pow+0x9d0>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	f7f6 faa5 	bl	800016c <__adddf3>
 8009c22:	4622      	mov	r2, r4
 8009c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c28:	462b      	mov	r3, r5
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	4639      	mov	r1, r7
 8009c2e:	f7f6 fa9b 	bl	8000168 <__aeabi_dsub>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c3a:	f7f6 fedd 	bl	80009f8 <__aeabi_dcmpgt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f47f ae06 	bne.w	8009850 <__ieee754_pow+0x398>
 8009c44:	4aa2      	ldr	r2, [pc, #648]	; (8009ed0 <__ieee754_pow+0xa18>)
 8009c46:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	f340 8100 	ble.w	8009e50 <__ieee754_pow+0x998>
 8009c50:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c54:	151b      	asrs	r3, r3, #20
 8009c56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c5a:	fa4a fa03 	asr.w	sl, sl, r3
 8009c5e:	44b2      	add	sl, r6
 8009c60:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009c64:	489b      	ldr	r0, [pc, #620]	; (8009ed4 <__ieee754_pow+0xa1c>)
 8009c66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009c6a:	4108      	asrs	r0, r1
 8009c6c:	ea00 030a 	and.w	r3, r0, sl
 8009c70:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009c74:	f1c1 0114 	rsb	r1, r1, #20
 8009c78:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c7c:	fa4a fa01 	asr.w	sl, sl, r1
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	4620      	mov	r0, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	bfb8      	it	lt
 8009c8c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c90:	f7f6 fa6a 	bl	8000168 <__aeabi_dsub>
 8009c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9c:	2400      	movs	r4, #0
 8009c9e:	4642      	mov	r2, r8
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	f7f6 fa63 	bl	800016c <__adddf3>
 8009ca6:	a37a      	add	r3, pc, #488	; (adr r3, 8009e90 <__ieee754_pow+0x9d8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	4620      	mov	r0, r4
 8009cae:	460d      	mov	r5, r1
 8009cb0:	f7f6 fc12 	bl	80004d8 <__aeabi_dmul>
 8009cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cb8:	4606      	mov	r6, r0
 8009cba:	460f      	mov	r7, r1
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f7f6 fa52 	bl	8000168 <__aeabi_dsub>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4640      	mov	r0, r8
 8009cca:	4649      	mov	r1, r9
 8009ccc:	f7f6 fa4c 	bl	8000168 <__aeabi_dsub>
 8009cd0:	a371      	add	r3, pc, #452	; (adr r3, 8009e98 <__ieee754_pow+0x9e0>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fbff 	bl	80004d8 <__aeabi_dmul>
 8009cda:	a371      	add	r3, pc, #452	; (adr r3, 8009ea0 <__ieee754_pow+0x9e8>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	4680      	mov	r8, r0
 8009ce2:	4689      	mov	r9, r1
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fbf6 	bl	80004d8 <__aeabi_dmul>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fa3a 	bl	800016c <__adddf3>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fa32 	bl	800016c <__adddf3>
 8009d08:	4632      	mov	r2, r6
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4689      	mov	r9, r1
 8009d10:	f7f6 fa2a 	bl	8000168 <__aeabi_dsub>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4620      	mov	r0, r4
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	f7f6 fa24 	bl	8000168 <__aeabi_dsub>
 8009d20:	4642      	mov	r2, r8
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	464b      	mov	r3, r9
 8009d28:	4640      	mov	r0, r8
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	f7f6 fbd4 	bl	80004d8 <__aeabi_dmul>
 8009d30:	a35d      	add	r3, pc, #372	; (adr r3, 8009ea8 <__ieee754_pow+0x9f0>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	4604      	mov	r4, r0
 8009d38:	460d      	mov	r5, r1
 8009d3a:	f7f6 fbcd 	bl	80004d8 <__aeabi_dmul>
 8009d3e:	a35c      	add	r3, pc, #368	; (adr r3, 8009eb0 <__ieee754_pow+0x9f8>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f7f6 fa10 	bl	8000168 <__aeabi_dsub>
 8009d48:	4622      	mov	r2, r4
 8009d4a:	462b      	mov	r3, r5
 8009d4c:	f7f6 fbc4 	bl	80004d8 <__aeabi_dmul>
 8009d50:	a359      	add	r3, pc, #356	; (adr r3, 8009eb8 <__ieee754_pow+0xa00>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fa09 	bl	800016c <__adddf3>
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	462b      	mov	r3, r5
 8009d5e:	f7f6 fbbb 	bl	80004d8 <__aeabi_dmul>
 8009d62:	a357      	add	r3, pc, #348	; (adr r3, 8009ec0 <__ieee754_pow+0xa08>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f7f6 f9fe 	bl	8000168 <__aeabi_dsub>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	462b      	mov	r3, r5
 8009d70:	f7f6 fbb2 	bl	80004d8 <__aeabi_dmul>
 8009d74:	a354      	add	r3, pc, #336	; (adr r3, 8009ec8 <__ieee754_pow+0xa10>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 f9f7 	bl	800016c <__adddf3>
 8009d7e:	4622      	mov	r2, r4
 8009d80:	462b      	mov	r3, r5
 8009d82:	f7f6 fba9 	bl	80004d8 <__aeabi_dmul>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f7f6 f9eb 	bl	8000168 <__aeabi_dsub>
 8009d92:	4604      	mov	r4, r0
 8009d94:	460d      	mov	r5, r1
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 fb9b 	bl	80004d8 <__aeabi_dmul>
 8009da2:	2200      	movs	r2, #0
 8009da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 f9da 	bl	8000168 <__aeabi_dsub>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dbc:	f7f6 fcb6 	bl	800072c <__aeabi_ddiv>
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fb84 	bl	80004d8 <__aeabi_dmul>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	f7f6 f9ca 	bl	800016c <__adddf3>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 f9c2 	bl	8000168 <__aeabi_dsub>
 8009de4:	4642      	mov	r2, r8
 8009de6:	464b      	mov	r3, r9
 8009de8:	f7f6 f9be 	bl	8000168 <__aeabi_dsub>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	2000      	movs	r0, #0
 8009df2:	4939      	ldr	r1, [pc, #228]	; (8009ed8 <__ieee754_pow+0xa20>)
 8009df4:	f7f6 f9b8 	bl	8000168 <__aeabi_dsub>
 8009df8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009dfc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009e00:	da29      	bge.n	8009e56 <__ieee754_pow+0x99e>
 8009e02:	4652      	mov	r2, sl
 8009e04:	f000 f874 	bl	8009ef0 <scalbn>
 8009e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e0c:	f7ff bbfd 	b.w	800960a <__ieee754_pow+0x152>
 8009e10:	4b32      	ldr	r3, [pc, #200]	; (8009edc <__ieee754_pow+0xa24>)
 8009e12:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009e16:	429f      	cmp	r7, r3
 8009e18:	f77f af14 	ble.w	8009c44 <__ieee754_pow+0x78c>
 8009e1c:	4b30      	ldr	r3, [pc, #192]	; (8009ee0 <__ieee754_pow+0xa28>)
 8009e1e:	440b      	add	r3, r1
 8009e20:	4303      	orrs	r3, r0
 8009e22:	d009      	beq.n	8009e38 <__ieee754_pow+0x980>
 8009e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f7f6 fdc6 	bl	80009bc <__aeabi_dcmplt>
 8009e30:	3800      	subs	r0, #0
 8009e32:	bf18      	it	ne
 8009e34:	2001      	movne	r0, #1
 8009e36:	e452      	b.n	80096de <__ieee754_pow+0x226>
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	f7f6 f994 	bl	8000168 <__aeabi_dsub>
 8009e40:	4642      	mov	r2, r8
 8009e42:	464b      	mov	r3, r9
 8009e44:	f7f6 fdce 	bl	80009e4 <__aeabi_dcmpge>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f43f aefb 	beq.w	8009c44 <__ieee754_pow+0x78c>
 8009e4e:	e7e9      	b.n	8009e24 <__ieee754_pow+0x96c>
 8009e50:	f04f 0a00 	mov.w	sl, #0
 8009e54:	e720      	b.n	8009c98 <__ieee754_pow+0x7e0>
 8009e56:	4621      	mov	r1, r4
 8009e58:	e7d6      	b.n	8009e08 <__ieee754_pow+0x950>
 8009e5a:	f04f 0b00 	mov.w	fp, #0
 8009e5e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009ed8 <__ieee754_pow+0xa20>
 8009e62:	f7ff bbb9 	b.w	80095d8 <__ieee754_pow+0x120>
 8009e66:	f04f 0b00 	mov.w	fp, #0
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	f7ff bbb3 	b.w	80095d8 <__ieee754_pow+0x120>
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7ff bb3c 	b.w	80094f2 <__ieee754_pow+0x3a>
 8009e7a:	9200      	str	r2, [sp, #0]
 8009e7c:	f7ff bb88 	b.w	8009590 <__ieee754_pow+0xd8>
 8009e80:	2300      	movs	r3, #0
 8009e82:	f7ff bb72 	b.w	800956a <__ieee754_pow+0xb2>
 8009e86:	bf00      	nop
 8009e88:	652b82fe 	.word	0x652b82fe
 8009e8c:	3c971547 	.word	0x3c971547
 8009e90:	00000000 	.word	0x00000000
 8009e94:	3fe62e43 	.word	0x3fe62e43
 8009e98:	fefa39ef 	.word	0xfefa39ef
 8009e9c:	3fe62e42 	.word	0x3fe62e42
 8009ea0:	0ca86c39 	.word	0x0ca86c39
 8009ea4:	be205c61 	.word	0xbe205c61
 8009ea8:	72bea4d0 	.word	0x72bea4d0
 8009eac:	3e663769 	.word	0x3e663769
 8009eb0:	c5d26bf1 	.word	0xc5d26bf1
 8009eb4:	3ebbbd41 	.word	0x3ebbbd41
 8009eb8:	af25de2c 	.word	0xaf25de2c
 8009ebc:	3f11566a 	.word	0x3f11566a
 8009ec0:	16bebd93 	.word	0x16bebd93
 8009ec4:	3f66c16c 	.word	0x3f66c16c
 8009ec8:	5555553e 	.word	0x5555553e
 8009ecc:	3fc55555 	.word	0x3fc55555
 8009ed0:	3fe00000 	.word	0x3fe00000
 8009ed4:	fff00000 	.word	0xfff00000
 8009ed8:	3ff00000 	.word	0x3ff00000
 8009edc:	4090cbff 	.word	0x4090cbff
 8009ee0:	3f6f3400 	.word	0x3f6f3400

08009ee4 <fabs>:
 8009ee4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4770      	bx	lr
 8009eec:	0000      	movs	r0, r0
	...

08009ef0 <scalbn>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	4616      	mov	r6, r2
 8009ef4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	460b      	mov	r3, r1
 8009efe:	b992      	cbnz	r2, 8009f26 <scalbn+0x36>
 8009f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f04:	4303      	orrs	r3, r0
 8009f06:	d03c      	beq.n	8009f82 <scalbn+0x92>
 8009f08:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <scalbn+0xe0>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f7f6 fae4 	bl	80004d8 <__aeabi_dmul>
 8009f10:	4b30      	ldr	r3, [pc, #192]	; (8009fd4 <scalbn+0xe4>)
 8009f12:	4604      	mov	r4, r0
 8009f14:	429e      	cmp	r6, r3
 8009f16:	460d      	mov	r5, r1
 8009f18:	da0f      	bge.n	8009f3a <scalbn+0x4a>
 8009f1a:	a329      	add	r3, pc, #164	; (adr r3, 8009fc0 <scalbn+0xd0>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	f7f6 fada 	bl	80004d8 <__aeabi_dmul>
 8009f24:	e006      	b.n	8009f34 <scalbn+0x44>
 8009f26:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009f2a:	42ba      	cmp	r2, r7
 8009f2c:	d109      	bne.n	8009f42 <scalbn+0x52>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	f7f6 f91c 	bl	800016c <__adddf3>
 8009f34:	4604      	mov	r4, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	e023      	b.n	8009f82 <scalbn+0x92>
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f40:	3a36      	subs	r2, #54	; 0x36
 8009f42:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009f46:	428e      	cmp	r6, r1
 8009f48:	dd0e      	ble.n	8009f68 <scalbn+0x78>
 8009f4a:	a31f      	add	r3, pc, #124	; (adr r3, 8009fc8 <scalbn+0xd8>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009f54:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009f58:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009f5c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009f60:	481d      	ldr	r0, [pc, #116]	; (8009fd8 <scalbn+0xe8>)
 8009f62:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009f66:	e7db      	b.n	8009f20 <scalbn+0x30>
 8009f68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009f6c:	4432      	add	r2, r6
 8009f6e:	428a      	cmp	r2, r1
 8009f70:	dceb      	bgt.n	8009f4a <scalbn+0x5a>
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	dd08      	ble.n	8009f88 <scalbn+0x98>
 8009f76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f7e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009f8c:	da0c      	bge.n	8009fa8 <scalbn+0xb8>
 8009f8e:	a30c      	add	r3, pc, #48	; (adr r3, 8009fc0 <scalbn+0xd0>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009f98:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009f9c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009fa0:	480e      	ldr	r0, [pc, #56]	; (8009fdc <scalbn+0xec>)
 8009fa2:	f041 011f 	orr.w	r1, r1, #31
 8009fa6:	e7bb      	b.n	8009f20 <scalbn+0x30>
 8009fa8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fac:	3236      	adds	r2, #54	; 0x36
 8009fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4b08      	ldr	r3, [pc, #32]	; (8009fe0 <scalbn+0xf0>)
 8009fbe:	e7af      	b.n	8009f20 <scalbn+0x30>
 8009fc0:	c2f8f359 	.word	0xc2f8f359
 8009fc4:	01a56e1f 	.word	0x01a56e1f
 8009fc8:	8800759c 	.word	0x8800759c
 8009fcc:	7e37e43c 	.word	0x7e37e43c
 8009fd0:	43500000 	.word	0x43500000
 8009fd4:	ffff3cb0 	.word	0xffff3cb0
 8009fd8:	8800759c 	.word	0x8800759c
 8009fdc:	c2f8f359 	.word	0xc2f8f359
 8009fe0:	3c900000 	.word	0x3c900000

08009fe4 <with_errno>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	4616      	mov	r6, r2
 8009fec:	f7fb fe9e 	bl	8005d2c <__errno>
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	6006      	str	r6, [r0, #0]
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}

08009ff8 <xflow>:
 8009ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ffa:	4615      	mov	r5, r2
 8009ffc:	461c      	mov	r4, r3
 8009ffe:	b180      	cbz	r0, 800a022 <xflow+0x2a>
 800a000:	4610      	mov	r0, r2
 800a002:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a006:	e9cd 0100 	strd	r0, r1, [sp]
 800a00a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a00e:	4628      	mov	r0, r5
 800a010:	4621      	mov	r1, r4
 800a012:	f7f6 fa61 	bl	80004d8 <__aeabi_dmul>
 800a016:	2222      	movs	r2, #34	; 0x22
 800a018:	b003      	add	sp, #12
 800a01a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a01e:	f7ff bfe1 	b.w	8009fe4 <with_errno>
 800a022:	4610      	mov	r0, r2
 800a024:	4619      	mov	r1, r3
 800a026:	e7ee      	b.n	800a006 <xflow+0xe>

0800a028 <__math_uflow>:
 800a028:	2200      	movs	r2, #0
 800a02a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a02e:	f7ff bfe3 	b.w	8009ff8 <xflow>

0800a032 <__math_oflow>:
 800a032:	2200      	movs	r2, #0
 800a034:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a038:	f7ff bfde 	b.w	8009ff8 <xflow>

0800a03c <__ieee754_sqrt>:
 800a03c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800a1e0 <__ieee754_sqrt+0x1a4>
 800a040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	ea3c 0c01 	bics.w	ip, ip, r1
 800a048:	460b      	mov	r3, r1
 800a04a:	4606      	mov	r6, r0
 800a04c:	460d      	mov	r5, r1
 800a04e:	460a      	mov	r2, r1
 800a050:	4604      	mov	r4, r0
 800a052:	d10e      	bne.n	800a072 <__ieee754_sqrt+0x36>
 800a054:	4602      	mov	r2, r0
 800a056:	f7f6 fa3f 	bl	80004d8 <__aeabi_dmul>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	4630      	mov	r0, r6
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 f883 	bl	800016c <__adddf3>
 800a066:	4606      	mov	r6, r0
 800a068:	460d      	mov	r5, r1
 800a06a:	4630      	mov	r0, r6
 800a06c:	4629      	mov	r1, r5
 800a06e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a072:	2900      	cmp	r1, #0
 800a074:	dc0d      	bgt.n	800a092 <__ieee754_sqrt+0x56>
 800a076:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a07a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a07e:	d0f4      	beq.n	800a06a <__ieee754_sqrt+0x2e>
 800a080:	b139      	cbz	r1, 800a092 <__ieee754_sqrt+0x56>
 800a082:	4602      	mov	r2, r0
 800a084:	f7f6 f870 	bl	8000168 <__aeabi_dsub>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	f7f6 fb4e 	bl	800072c <__aeabi_ddiv>
 800a090:	e7e9      	b.n	800a066 <__ieee754_sqrt+0x2a>
 800a092:	1512      	asrs	r2, r2, #20
 800a094:	f000 8089 	beq.w	800a1aa <__ieee754_sqrt+0x16e>
 800a098:	2500      	movs	r5, #0
 800a09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a09e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a0a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a6:	07d2      	lsls	r2, r2, #31
 800a0a8:	bf5c      	itt	pl
 800a0aa:	005b      	lslpl	r3, r3, #1
 800a0ac:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a0b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0b4:	bf58      	it	pl
 800a0b6:	0064      	lslpl	r4, r4, #1
 800a0b8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a0bc:	0062      	lsls	r2, r4, #1
 800a0be:	2016      	movs	r0, #22
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a0c6:	1076      	asrs	r6, r6, #1
 800a0c8:	190f      	adds	r7, r1, r4
 800a0ca:	429f      	cmp	r7, r3
 800a0cc:	bfde      	ittt	le
 800a0ce:	1bdb      	suble	r3, r3, r7
 800a0d0:	1939      	addle	r1, r7, r4
 800a0d2:	192d      	addle	r5, r5, r4
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	3801      	subs	r0, #1
 800a0d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a0dc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a0e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a0e4:	d1f0      	bne.n	800a0c8 <__ieee754_sqrt+0x8c>
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	2720      	movs	r7, #32
 800a0ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a0ee:	428b      	cmp	r3, r1
 800a0f0:	eb0c 0e00 	add.w	lr, ip, r0
 800a0f4:	dc02      	bgt.n	800a0fc <__ieee754_sqrt+0xc0>
 800a0f6:	d113      	bne.n	800a120 <__ieee754_sqrt+0xe4>
 800a0f8:	4596      	cmp	lr, r2
 800a0fa:	d811      	bhi.n	800a120 <__ieee754_sqrt+0xe4>
 800a0fc:	f1be 0f00 	cmp.w	lr, #0
 800a100:	eb0e 000c 	add.w	r0, lr, ip
 800a104:	da56      	bge.n	800a1b4 <__ieee754_sqrt+0x178>
 800a106:	2800      	cmp	r0, #0
 800a108:	db54      	blt.n	800a1b4 <__ieee754_sqrt+0x178>
 800a10a:	f101 0801 	add.w	r8, r1, #1
 800a10e:	1a5b      	subs	r3, r3, r1
 800a110:	4641      	mov	r1, r8
 800a112:	4596      	cmp	lr, r2
 800a114:	bf88      	it	hi
 800a116:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a11a:	eba2 020e 	sub.w	r2, r2, lr
 800a11e:	4464      	add	r4, ip
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	3f01      	subs	r7, #1
 800a124:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a128:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a12c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a130:	d1dd      	bne.n	800a0ee <__ieee754_sqrt+0xb2>
 800a132:	4313      	orrs	r3, r2
 800a134:	d01b      	beq.n	800a16e <__ieee754_sqrt+0x132>
 800a136:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a1e4 <__ieee754_sqrt+0x1a8>
 800a13a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a1e8 <__ieee754_sqrt+0x1ac>
 800a13e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a142:	e9db 2300 	ldrd	r2, r3, [fp]
 800a146:	f7f6 f80f 	bl	8000168 <__aeabi_dsub>
 800a14a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4640      	mov	r0, r8
 800a154:	4649      	mov	r1, r9
 800a156:	f7f6 fc3b 	bl	80009d0 <__aeabi_dcmple>
 800a15a:	b140      	cbz	r0, 800a16e <__ieee754_sqrt+0x132>
 800a15c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a160:	e9db 2300 	ldrd	r2, r3, [fp]
 800a164:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a168:	d126      	bne.n	800a1b8 <__ieee754_sqrt+0x17c>
 800a16a:	463c      	mov	r4, r7
 800a16c:	3501      	adds	r5, #1
 800a16e:	106b      	asrs	r3, r5, #1
 800a170:	0864      	lsrs	r4, r4, #1
 800a172:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a176:	07ea      	lsls	r2, r5, #31
 800a178:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a17c:	bf48      	it	mi
 800a17e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800a182:	4620      	mov	r0, r4
 800a184:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a188:	e76d      	b.n	800a066 <__ieee754_sqrt+0x2a>
 800a18a:	0ae3      	lsrs	r3, r4, #11
 800a18c:	3915      	subs	r1, #21
 800a18e:	0564      	lsls	r4, r4, #21
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0fa      	beq.n	800a18a <__ieee754_sqrt+0x14e>
 800a194:	02d8      	lsls	r0, r3, #11
 800a196:	d50a      	bpl.n	800a1ae <__ieee754_sqrt+0x172>
 800a198:	f1c2 0020 	rsb	r0, r2, #32
 800a19c:	fa24 f000 	lsr.w	r0, r4, r0
 800a1a0:	1e55      	subs	r5, r2, #1
 800a1a2:	4094      	lsls	r4, r2
 800a1a4:	4303      	orrs	r3, r0
 800a1a6:	1b4a      	subs	r2, r1, r5
 800a1a8:	e776      	b.n	800a098 <__ieee754_sqrt+0x5c>
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	e7f0      	b.n	800a190 <__ieee754_sqrt+0x154>
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	3201      	adds	r2, #1
 800a1b2:	e7ef      	b.n	800a194 <__ieee754_sqrt+0x158>
 800a1b4:	4688      	mov	r8, r1
 800a1b6:	e7aa      	b.n	800a10e <__ieee754_sqrt+0xd2>
 800a1b8:	f7f5 ffd8 	bl	800016c <__adddf3>
 800a1bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 fbf8 	bl	80009bc <__aeabi_dcmplt>
 800a1cc:	b120      	cbz	r0, 800a1d8 <__ieee754_sqrt+0x19c>
 800a1ce:	1ca1      	adds	r1, r4, #2
 800a1d0:	bf08      	it	eq
 800a1d2:	3501      	addeq	r5, #1
 800a1d4:	3402      	adds	r4, #2
 800a1d6:	e7ca      	b.n	800a16e <__ieee754_sqrt+0x132>
 800a1d8:	3401      	adds	r4, #1
 800a1da:	f024 0401 	bic.w	r4, r4, #1
 800a1de:	e7c6      	b.n	800a16e <__ieee754_sqrt+0x132>
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	200001e0 	.word	0x200001e0
 800a1e8:	200001e8 	.word	0x200001e8

0800a1ec <_init>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr

0800a1f8 <_fini>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr
